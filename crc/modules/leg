/* -*- crc -*-
 *
 * Purpose:
 *   This file contains basic definitions for the areas defined under the sections headline. Many of the
 *   definitions are used in the other level modules. This is to improve caching and to reuse variable
 *   names in a good way.
 *
 * Created by:
 *   Extracted from the Carmen Standard User, 06-Dec-2005
 * Major changes:
 *
 */

root module leg
import levels;
import fundamental;
import system_db_parameters;
import parameters;
import task;
import per_diem;
import crew_contract;
import base_product;
import base_utils;
import keywords;

/*
** Basic definitions
**
** Most of the definitions below are just redefinitions of keywords.
** This is for improving caching and thus performance since keywords are never cached.
*/
%crew_employment_table% =
  parameter "crew_employment"
  remark "ETAB: Crew employment data table (company, base, rank)";
export %time_to_next_leg% =
  next(leg(chain), leg.%start_UTC%) - leg.%end_UTC%;

export %is_truck% = %ac_type% = "RFS"; /*RFS -  Road Feeder Service - Cargo Truck */
export %is_nop% = not_operating;
export %is_dummy% = %start_UTC% <= 01JAN1986;
export %is_flight_duty% = flight_duty and not ground_transport and not %is_truck%;
export %is_considered_as_flight_duty% =
  %is_flight_duty% or %is_ground_transport% or %is_standby% or %is_pm_meeting%;
export %is_on_duty% = true; /* Redefined in leg_ccr. */
export %is_planned_rest% =
  not %is_flight_duty% and
  not %is_deadhead% and
  (not task.%is_on_duty%(%code%) or task.%is_compensation_day%(%code%));
export %is_active_flight% =
  %is_flight_duty% and not %is_deadhead% and not %is_not_operating%;
export %is_active_flight_not_operating% =
  %is_flight_duty% and not %is_not_operating%;
export %is_active_no_rtr_flight% =
  %is_active_flight% and not %returned_to_ramp%;
export %is_not_operating% = not_operating;
export %is_deadhead% = default(deadhead or oag or ground_transport, false);
export %is_private_passive% = false; /* Redefined in leg_ccr */
export %is_blank_day% = task.%is_blank_day%(%code%);
export %is_training_blank_day% = task.%is_training_blank_day%(%code%);
export %is_supernum% = false;
export %is_ground_transport% = ground_transport;
export %is_hotel_flight_duty% = %is_flight_duty% or %is_ground_transport% or %is_standby_at_airport% or %is_standby_at_hotel%;
export %is_on_airport% = %is_flight_duty% or %is_standby_at_airport%;
export %is_simulator_briefing_debriefing% =
  task.%is_simulator_briefing_debriefing%(%code%);
export %is_simulator% = default(task.%is_simulator%(%code%), false);
export %is_simulator_not_homebase% = %is_simulator% and not %arrives_at_homebase%;
export %is_pgt% = task.%is_pgt%(%code%);
export %is_emg_pgt% = task.%is_emg_pgt%(%code%);
export %is_ac_demo% =
    let code = %code%;
    length(code) = 3 and
    substr(code,1,2) = "AC";
export %is_asf% = task.%is_asf%(%code%);
export %is_ast% = task.%is_ast%(%code%);
export %is_safety_training% = task.%is_safety_training%(%code%);
export %is_oag% = default(oag or not (flight_carrier in own_carrier_codes), false);
export %is_FS% = task.%is_super_freeday%(%code%); /* Super freeday */
export %is_FS1% = task.%is_single_super_freeday%(%code%); /* Single super freeday */
export %is_FW% = task.%is_free_weekend_FW%(%code%); /* Bidding free weekend */
export %is_ffs% = task.%is_ffs%(%code%);
export %is_crm% = task.%is_crm%(%code%);
export %is_rec% = task.%is_rec%(%code%);
export %is_crmc% = task.%is_crmc%(%code%);
export %is_pc% = task.%is_pc%(%code%);
export %is_opc% = task.%is_opc%(%code%);
export %is_ol123% = task.%is_ol123%(%code%);
export %is_ol456% = task.%is_ol456%(%code%);
export %is_olcrm456% = task.%is_olcrm456%(%code%);
export %is_cc_rec_cx7% = %code% = "CX7";
export %is_cc_rec_cx6% = %code% = "CX6";
export %is_cc_rec_web% = task.%is_cc_rec_web%(%code%);
export %is_cc_rec% = %is_cc_rec_cx7% or %is_cc_rec_cx6% or %is_cc_rec_web%;
export %is_passive_transfer% = task.%is_passive_transfer%(leg.%code%);
export %is_pc_or_opc% = default(%is_pc% or %is_opc%, false);
export %is_cc_inst_activity_ntc17% = task.%is_cc_inst_activity_ntc17%(%code%);
export %is_fd_inst_activity_ntc17% = task.%is_fd_inst_activity_ntc17%(%code%);
export %is_flt_sby_or_bl% =
  %is_active_flight% or %is_standby% or %is_blank_day%;
%next_leg_is_lh% =
  default(next(leg(trip), %is_long_haul%), false);
export %no_in_chain% = count(leg(chain)) from (first) to (current);
export %leg_num_in_duty% = count(leg(duty)) from(first) to (current);
%leg_num_in_trip% = count(leg(duty)) from(first) to (current);
export %is_any_lc% = false;
export %is_any_pilot_on_lc_or_ilc% = false;
export %is_course% = false;
export %is_cc_rec_instr% = task.%is_cc_rec_instr%(%code%);
export %is_fc_rec_instr% = task.%is_fc_rec_instr%(%code%);
export %is_fmst% = task.%is_fmst%(%code%);
export %is_lrsb% = task.%is_lrsb%(%code%);
export %is_lrp2r% = task.%is_lrp2r%(%code%);

export %is_pact% = false;
export %is_ground_duty% = false;
export %is_ground_duty_leg% = false;
export %is_cd% = %code% = "CD";

/* Jira SKPROJ-446 For CD already define code is used*/
export %is_gd_duty% =  %code% = "GD";
export %is_kd_duty% =  %code% = "KD";
export %is_sd_duty% =  %code% = "SD";
/* End Jira SKPROJ-446 */

export %name% = first(leg(trip),keywords.%crr_name%);

export %is_standby% = task.%is_standby%(%code%);
export %is_standby_with_rest% =
  %is_standby_at_home% or
  %is_standby_at_hotel%;

export %is_standby_callout% = false;
export %is_callout_from_standby% = false;
export %is_airport_callout% = false;
export %is_callout_from_airport% = false;

export %is_production% = %is_flight_duty% or %is_standby% or %is_blank_day%;

export %is_pm_mentor% =
  task.%is_pm_mentor%(%code%);
export %is_pm_student% =
  task.%is_pm_student%(%code%);
export %is_pm_meeting% =
  %is_pm_student% or %is_pm_mentor%;

export %is_ofdx%(Int ofdx_id) =
  task.%code% = task.%ofdx_code%(ofdx_id);

export %is_any_ofdx% =
    any(times(task.%ofdx_count%), %is_ofdx%(times_index(0)));

export %ofdx_id% =
  task.%ofdx_id%(task.%code%);

export %activity_desc_w_ofdx% =
  task.%description_by_code_w_ofdx%(task.%code%, leg.%start_utc%);

export %ofdx_period_goal% =
  task.%ofdx_attend_goal%(%ofdx_id%, leg.%start_UTC%);

/* ofdx limit for leg. redefined. Int cct there is no need to have another limit then "goal" */
export %ofdx_period_limit% =
  task.%ofdx_attend_limit%(%ofdx_id%, leg.%start_UTC%);

export %ofdx_invalid_date% =
  void (task.%ofdx_period_start%(%ofdx_id%,leg.%start_utc%))
  or void(task.%ofdx_period_end%(%ofdx_id%,leg.%end_utc%));

export %ofdx_valid% =
  not %ofdx_invalid_date%; /* redefined in ccr to match crew attributes */

export %ofdx_attended% = 0; /* redefined in ccr using crew training log */

export %pc_change_date%(Abstime s, Abstime e) = /* redefined */
  void_Abstime;

%is_passive_plus% =
  default(crew_contract.%is_passive_plus%(first(leg(trip), leg.%start_hb%)),
          false);

export %is_trip_sim_sby% =
  (%is_standby% and %standby_code_with_qualification%) or
  %is_simulator% or
  (%is_flight_duty% and not %is_deadhead%);

export %in_summer_vacation_codes% =
    leg.%code% in task.summer_vacation_codes or leg.%code% in task.summer_vacation_parttime_codes;



/*set zftt_simulator_set = "C313", "C913", "C443", "C633", "C223", "C713", "C813";*/
export %zftt_simulator_set_table% = %etab_path%(%zfft_simulator_set_table_name%);
%zfft_simulator_set_table_name% = "zftt_simulator_set_table.etab";
set zftt_simulator_set = external string %zftt_simulator_set_table%."zftt_sim_name";

export %is_zftt_simulator% = %code% in zftt_simulator_set;

/* Multilegs */
export %is_multileg_flight% =
    default(%turnin_flt_nr% = %flight_nr%, false) or
    default(%turnout_flt_nr% = %flight_nr%, false);

export %is_last_multileg_inside_trip% =
    default(next(leg(trip), %flight_nr%) <> %flight_nr% and
            not is_last(leg(trip)),false);

%turnin_flt_nr% = turnin_flight_number;
%turnout_flt_nr% = turnout_flight_number;
/*
Bought days
This code is doubled to avoid circular dependencies
*/

export %bought_table% = %etab_path%(%table_p%);
%table_p% =
  parameter "bought_days"
  remark "ETAB: Table with bought days";

table bought_day_table(AbsTime t_hb) =
  crr_crew_id, t_hb ->
    export AbsTime %bought_time%;
  external %bought_table%;
  crew, (start_time, end_time( -> start_time;
  -   , -        -> void_abstime;
end

export %is_bought% =
  %is_on_duty% and
  (not void(%bought_time%(%start_hb%)) or
   not void(%bought_time%(%end_hb% - 00:01))); /* -00:01 to prevent touch
                                                  on full day leg*/

export %bought_svs_table% = %etab_path%(%table_p_svs%);
%table_p_svs% =
  parameter "bought_days_svs"
  remark "ETAB: Table with bought days";

table bought_day_svs_table(AbsTime t_hb) =
  crr_crew_id, t_hb ->
    export AbsTime %bought_time_svs%;
  external %bought_svs_table%;
  crew, (start_time, end_time( -> start_time;
  -   , -        -> void_abstime;
end

export %is_bought_svs% =
  (not void(%bought_time_svs%(%start_hb%)) or
   not void(%bought_time_svs%(%end_hb% - 00:01))); /* -00:01 to prevent touch
                                                  on full day leg*/
/* Includes standby lines */
export %is_standby_at_home% =
  task.%is_standby_at_home%(%code%);
export %is_scattered_standby_at_home% =
  %is_standby_at_home% and
  task.%is_scattered_standby%(%code%);
export %is_scattered_standby% =
  task.%is_scattered_standby%(%code%);
export %is_standby_at_hotel% =
  task.%is_standby_at_hotel%(%code%);
export %is_standby_at_airport% =
  default(task.%is_standby_at_airport%(%code%),false);
export %is_standby_line% =
  task.%is_standby_line%(%code%);
export %is_standby_long_haul% =
  task.%is_standby_long_haul%(%code%);
export %is_waiting% =
  default(task.%is_waiting%(%code%),false);



/* SKCMS-1207 Waiting Time to replace airport standby created in the Tracking Phase*/
set waiting_at_airport = "WP","WO","W";
set standby_at_airport =  "AC","AO","A";

export %is_waiting_at_airport% =
  %code% in waiting_at_airport or %is_standby_at_airport_code%;

export %is_standby_at_airport_code% =
  %code% in standby_at_airport;

export %is_waiting_at_airport_type_W% = %code% = "W";
export %is_standby_at_airport_type_A% = %code% = "A";


set cancellation_standby_codes = "AC","AO","RC","HC";
export %is_cancellation_standby% =
  %code% in cancellation_standby_codes or %code% = "WP" or %code% = "WO";

export %is_standby_with_break% =
  %code% = "R86" or
  %code% = "R88" or
  %code% = "R91" or
  %code% = "R93" or
  %code% = "T86" or
  %code% = "T88" or
  %code% = "T91" or
  %code% = "T93";

export %is_F7S% = %code% = "F7S";
export %is_F7% = %code% = "F7";
export %is_F0% = %code% = "F0";
export %is_F3% = %code% = "F3";
export %is_F32% = %code% = "F32";
export %is_F3S% = %code% = "F3S";
export %is_BLS% = %code% = "BLS";
export %is_f31% = %code% = "F31";
export %is_f36% = %code% = "F36";
export %is_f38% = %code% = "F38";
export %is_F89% = %code% = "F89";
export %is_f9% = %code% = "F9";

export %is_course_office_duty% =
 substr(%code%,1,2) = "OK" or
 substr(%code%,1,2) = "UP";

export %is_sby_manual_duty_break% = false; /* Redefined in CCT */

export %returned_to_ramp% = false;

export %start_time_zone% = departure_time_zone;
export %end_time_zone% = arrival_time_zone;

export %end_latitude% = arrival_latitude;
export %start_latitude% = departure_latitude;
export %end_longitude% = arrival_longitude;
export %start_longitude% = departure_longitude;

export %start_country% = departure_airport_country;
export %end_country% = arrival_airport_country;
export %start_city% = departure_airport_city;
export %end_city% = arrival_airport_city;
export %start_station% = departure_airport_name;
export %start_base% = departure_airport_base;
export %end_base% = arrival_airport_base;
export %start_station_base% = fundamental.%base2station%(%start_station%);
export %end_station% = arrival_airport_name;
export %next_end_station% = next(leg(chain), %end_station%);
export %time% = %end_UTC% - %start_UTC%;
export %scheduled_time% = %activity_scheduled_end_time_utc% - %activity_scheduled_start_time_utc%;
export %normalized_scheduled_start_date_utc% = fundamental.%normalized_date%(%activity_scheduled_start_time_utc%);
export %start_hb% = homebase_departure_summer;
/* Start day homebase UTC */
export %start_day_hb_utc%(String hb, AbsTime startUtc) =
  let st_dt_hb = round_down(station_localtime(hb, startUtc), 24:00);
  station_utctime(hb, st_dt_hb);
export %start_od% = time_of_day(%start_hb%);
export %start_date% = round_down(%start_hb%,24:00);
export %start_date_utc% = round_down(%start_UTC%, 24:00);
export %start_weekday% = time_of_week(%start_hb%)/24:00 + 1;
export %start_weekday_arn% = time_of_week(%start_hb_arn%)/24:00 + 1;
%start_hb_arn% = station_localtime("ARN", %start_utc%);
export %end_hb% = homebase_arrival_summer;
export %end_od% = time_of_day(%end_hb%);
/* Subtracted 0:01 to cover for duties ending 24:00, HenrikA 05oct2006 */
export %end_date% = round_down(%end_hb%-0:01,24:00);
export %end_date_UTC% = round_down(%end_utc%-0:01,24:00);
export %end_date_LT% = round_down(%end_lt%-0:01, 24:00);
export %start_UTC% = departure;
export %end_UTC% = arrival;
export %start_od_utc% = time_of_day(%start_UTC%);
export %end_od_utc% = time_of_day(%end_UTC%);
export %start_lt% = local_departure_time_summer;
export %end_lt% = local_arrival_time_summer;
export %end_od_lt% = time_of_day(%end_lt%);
export %start_od_lt% = time_of_day(%start_lt%);
export %start_date_lt% = round_down(%start_lt%, 24:00);
export %in_pp% = overlap(%start_hb%,%end_hb%,%pp_start%,%pp_end%)>0:00;
export %in_pp_utc% = overlap(%start_utc%, %end_utc%, %pp_start%, %pp_end%) > 0:00;
export %in_pp_extended% = overlap(%start_hb%, %end_hb%, %pp_start%, %pp_end_extended%) > 0:00;
export %in_publ_period% = overlap(%start_hb%,%end_hb%,%publ_period_start%,%publ_period_end%)>0:00;
export %in_or_before_publ_period% = %start_hb% < %publ_period_end%;
export %starts_in_pp% = %start_hb% >= %pp_start% and %start_hb% < %pp_end%;
export %starts_in_extended_pp% = %starts_in_pp%;
export %starts_before_pp% = %start_hb% < %pp_start%;
export %completely_in_pp% =
  %start_hb% >= %pp_start% and
  %end_hb% <= %pp_end%;
export %starts_in_extended_pp_utc% =
  %start_utc% >= (%pp_start% - 24:00) and
  %start_utc% < (%pp_end_extended% + 24:00);

export %in_period%(Abstime start, Abstime stop) =
    overlap(%start_hb%,%end_hb%,start,stop) > 0:00;

export %starts_in_period%(Abstime start, Abstime stop) =
    %start_hb% >= start and %start_hb% < stop;


/* Non-tracking defaults to "most recent".
*  These keywords are assigned values in the following priority order:
*  1. Use actual time if it exists, otherwise
*  2. use estimated time if it exists, otherwise
*  3. use scheduled time.
*/
export %activity_start_time_UTC% = departure;
export %activity_end_time_UTC%  = arrival;
export %activity_scheduled_start_time_UTC% = departure;
export %activity_scheduled_end_time_UTC%  = arrival;
export %activity_estimated_start_time_UTC% = departure;
export %activity_estimated_end_time_UTC%  = arrival;
export %activity_actual_start_time_UTC% = departure;
export %activity_actual_end_time_UTC%  = arrival;
export %activity_start_time_lt% = local_departure_time_summer;
export %activity_end_time_lt%  = local_arrival_time_summer;
export %activity_scheduled_start_time_lt% = local_departure_time_summer;
export %activity_scheduled_end_time_lt%  = local_arrival_time_summer;
export %activity_estimated_start_time_lt% = local_departure_time_summer;
export %activity_estimated_end_time_lt%  = local_arrival_time_summer;
export %activity_actual_start_time_lt% = local_departure_time_summer;
export %activity_actual_end_time_lt%  = local_arrival_time_summer;
export %activity_start_time_hb% = homebase_departure_summer;
export %activity_end_time_hb%  = homebase_arrival_summer;
export %activity_scheduled_start_time_hb% = homebase_departure_summer;
export %activity_scheduled_end_time_hb%  = homebase_arrival_summer;
export %activity_estimated_start_time_hb% = homebase_departure_summer;
export %activity_estimated_end_time_hb%  = homebase_arrival_summer;
export %activity_actual_start_time_hb% = homebase_departure_summer;
export %activity_actual_end_time_hb%  = homebase_arrival_summer;

export %start_delay% =
  %activity_start_time_UTC% - %activity_scheduled_start_time_UTC%;
export %end_delay% =
  %activity_end_time_UTC% - %activity_scheduled_end_time_UTC%;

/* CCP uses homebase keyword (well-defined for trip chains) */
/* In a CMS environment, a trip cannot be relied upon to always start
   at a base */
export %trip_homebase% = default(homebase, "");
export %trip_homecountry% = default(homebase_country, "");
/* trip_start_home_airport is used for homebase timezone calculations */
export %trip_start_home_airport% = first(leg(trip), %start_station%);

/*
 * Keyword homebase is fine to use in apc and pairing, but in rostering
 * and tracking keyword homebase is defined by the homebase of the first
 * object in the chain. Therefore %homebase% is redefined in rostering
 * to use %trip_homebase%
 */
export %homebase% = default(homebase, "");
export %homeairport% = default(%trip_start_home_airport%, "");
export %departs_from_homebase% = %departure_airport_base% = %homebase%;
export %arrives_at_homebase% = %arrival_airport_base% = %homebase%;
export %arrives_at_SAS_hub% = arrival_airport_name in SAS_hub_set;
export %arrives_at_SAS_base% = arrival_airport_name in SAS_base_set;
export %arrives_at_SH_base% = arrival_airport_name in SH_base_set;
export %departs_from_a_base% = %departure_airport_base% <> "";
export %departs_from_scandinavian_base% = departure_airport_name in SAS_base_set;
export %arrives_at_a_base% = %arrival_airport_base% <> "";

export %departure_airport_base% = departure_airport_base;
export %arrival_airport_base% = arrival_airport_base;

export %arrival_airport_name% = arrival_airport_name;
export %departure_airport_name% = departure_airport_name;

export %arrives_at_trip_or_crew_homebase% =
  %arrives_at_homebase% or
  %arrives_at_crew_homebase%;

%arrives_at_crew_homebase% =
  false;

export %starts_at_midnight_hb% =
  time_of_day(%activity_scheduled_start_time_hb%) = 0:00;

export %ends_at_midnight_hb% =
  let tod = time_of_day(%activity_scheduled_end_time_hb%);
  tod = 0:00 or tod = 23:59;

export %is_whole_hb_day_pact% =
  %is_pact%
  and %starts_at_midnight_hb%
  and %ends_at_midnight_hb%;

/*
 * Flight identities
 * Built from carrier, number and suffix - we have several variants:
 *
 * name:        %flight_descriptor%
 * format:      Complete, carrier three positions, number six positions,
 *              suffix one position.  CCC999999S
 * usage:       For use with UDM tables. Not used by customer internally.
 * examples:    'SK 000460 ', 'SK 000460R'
 *
 * name:        %flight_id%
 * format:      Complete, carrier three positions, number four positions, suffix
 *              one position.  CCC9999S
 * usage:       Customer's "official format". Used e.g. in request/response reports.
 * examples:    'SK 0341 ', 'SK 0341Z'
 *
 * name:        %flight_name%
 * format:      Compressed format, own carrier is omitted. Numbers will have at least
 *              three digits.
 * usage:       Presentation, to conserve space in various reports.
 * examples:    '3244', '345Z', '056', 'LH8843', '412R'
 */

export %flight_carrier% = default(flight_carrier, "");
export %flight_nr% = flight_number;
/* in Tracking carmsys flight_number is VOID for ground duties,
   default to -1 */
/*eport %flight_nr% = default(flight_number, -1);*/
export %our_flight_suffix% =
  default(
    if flight_suffix = "*"
    then ""
    else flight_suffix, "");

export %their_flight_suffix% =
  default(
    if origsuffix = " "
    then ""
    else origsuffix, "");

export %flight_suffix% =
  if not void(origsuffix) and origsuffix <> "" then
    if origsuffix = " " then ""
    else origsuffix
  else default(if flight_suffix = "*"
                then ""
               else flight_suffix,
               "");

export %leg_number% = leg_number;

/* convert 'SK' to 'SK ' */
export %flight_carrier_padded% = substr(concat(%flight_carrier%, "   "), 1, 3);

/* suffix one character long */
export %flight_suffix_padded% =
  if %flight_suffix% = "" then
    " "
  else
    %flight_suffix%;

/* numbers should have at least three digits */
export %flight_nr_min_3_digits% = format_int(%flight_nr%, "%03d");

/* [acosta:07/073@16:15] This variable MUST match the UDM 'fd' */
export %flight_descriptor% =
  concat(
    %flight_carrier_padded%,
    format_int(%flight_nr%, "%06d"),
    (if %our_flight_suffix% = "" or %our_flight_suffix% = "*"
      then " "
    else %our_flight_suffix%));

export %flight_id% =
  if %is_flight_duty% then
    concat(
      %flight_carrier_padded%,
      format_int(%flight_nr%, "%04d"),
      %flight_suffix_padded%
    )
  else
    %code%;


export %flight_id_no_suffix% =
  if %is_flight_duty% then
    concat(
      %flight_carrier_padded%,
      format_int(%flight_nr%, "%04d")
    )
  else
    %code%;
    

export %compact_flight_id% =
  if %is_flight_duty% then
    concat(
      %flight_carrier%,
      format_int(%flight_nr%, "%d")
    )
  else
    %code%;

%flight_id_min_3_digits% =
  if %is_flight_duty% then
    concat(
      %flight_carrier_padded%,
      %flight_nr_min_3_digits%,
      %flight_suffix_padded%
    )
  else
    %code%;

export %flight_name% =
  if %is_flight_duty% then
    if %is_oag% then
      concat(%flight_carrier%, %flight_nr_min_3_digits%, %flight_suffix%)
    else
      concat(%flight_nr_min_3_digits%, %flight_suffix%)
  else
    %code%;

/*
 * Start date of origin for a flight in UTC, all legs in a multi-legged flight
 * will get the same UDOR. 'gdor' is not defined for ground duties, etc. so
 * they will instead get start day UTC.
 */
export %udor% = default(gdor, round_down(%start_utc%, 24:00));
export %udor_int% = (%activity_scheduled_start_time_utc% - 1Jan1986)/24:00;
export %udor_str% = format_time(%activity_scheduled_start_time_utc%, "%Y-%02m-%02d");

/* Start date of origin for a flight in local time, NOT RECOMMENDED,
 * customer insists using this anyhow.
 * This expression is not accurate.
 */
export %ldor% = round_down(%activity_scheduled_start_time_lt%, 24:00);
export %rdor% = round_down(%activity_scheduled_start_time_hb%, 24:00);


export %is_round_trip% = default(%end_station% =
                                 prev(leg(duty), %start_station%), false);

export %deadhead_in_roundtrip% = default((%is_round_trip% and
                                          (not prev(leg(duty),%is_ac_change%)) and
                                          (%is_deadhead% or
                                          prev(leg(duty), %is_deadhead%))), false);

export %is_middle_duty_deadhead% =
  %is_deadhead% and not %is_last_in_duty% and not %is_first_in_duty%;

/*
 * Deadhead type code definition.
 * Type could be "P" passive or "D" deadhead
 */

export %deadhead_code% =
  default(
    if (leg.%flight_carrier% = "SK" or leg.%flight_carrier% = "KF") then
      if (leg.%is_deadhead% and not leg.%is_oag% and
          ((leg.%is_domestic% and %deadhead_code_condition%) or leg.%is_long_haul%))
      or
        (leg.%flight_nr% >= 9000 and leg.%flight_nr% <= 9999) then
        "D"
      else if leg.%is_deadhead% then
        "P"
      else
        ""
    else
      /* Not SK flight - "P" */
      if (leg.%is_deadhead% and leg.%is_flight_duty%) then
        "P"
      else
        ""
  , "");

%deadhead_code_condition% = first(leg(trip), %is_sks%)
                            where (leg.%is_active_flight%);


/* AlertServer failobject for level leg. Is redefined in leg_cct.
   Also used for defining default duty and trip failobjects */
export %failobject_departure% = "";
export %failobject_arrival% = "";

/*
** Simulator time at controls - MADS !!
*/
export %time_at_controls% = 0:00;

export %air_time% = %end_UTC% - %start_UTC%;
export %ground_time% = default(next(leg(trip), %start_UTC%) - %end_UTC%, 0:00);

export %connection_time% =
  next(leg(duty),%connection_start_utc%) - %connection_end_utc%;

/*
** Start time for a simulator activity to be used when calculating connection
** time between two legs is considered to be the start of it's briefing
*/
%connection_start_utc% =
  %start_utc% -
  (if leg.%is_simulator% then
     default(leg.%check_in_default_sim_gd%, 2:00)
   else
     0:00);

/*
** End time for a simulator activity to be used when calculating connection
** time between two legs is considered to be the end of it's debriefing
*/
%connection_end_utc% =
  %end_utc% +
  (if leg.%is_simulator% then
     default(leg.%check_out_default_sim_gd%, 1:00)
   else
     0:00);

export %scheduled_connection_time% = %connection_time%;
export %per_diem_connection_time% = %connection_time%;

/*
** Aircraft definitions
*/
export %ac_type% = aircraft_type;
export %ac_type_custom% =
  if aircraft_type_custom = "" then
    aircraft_type
  else
    aircraft_type_custom;

export %is_ac_change% =
  not %is_last_in_duty% and
  next(leg(duty), %is_flight_duty%) and
  default(aircraft_change,true);

export %is_ac_change_and_not_dh% =
  not %is_last_in_duty% and
  not %is_deadhead% and
  next(leg(duty), %is_flight_duty% and not %is_deadhead%) and
  default(aircraft_change,true);

export %aircraft_types_table% = %etab_path%(%aircraft_types_table_p%);
%aircraft_types_table_p% =
  parameter "aircraft_type"
  remark "ETAB: Aircraft values table";

export %ac_family_and_subtype% = concat(%ac_family%,".",%ac_type%);

export %crew_bunk_flight_crew% = %nr_crew_bunk_flight_crew% > 0;
export %crew_bunk_cabin_crew% = %nr_crew_bunk_cabin_crew% > 0;
/* OBS! Braathens configuration of 73G allows 4 FC iso 3 in SAS, HenrikA 14-Dec-2005 */
export %max_flight_crew_seats% =
  if %ac_type% = "73G" and %aoc% = "BU" then
    4
  else
    %_max_flight_crew_seats%(%ac_type%);

table leg_ac_family(String acType) =
  acType ->
    export String %_ac_family%,
    Int %_max_flight_crew_seats%,
    Int %_max_cabin_crew_seats%,
    Int %_class_1_flight_crew%,
    Int %_class_2_flight_crew%,
    Int %_class_3_flight_crew%,
    Int %_class_1_cabin_crew%,
    Int %_class_2_cabin_crew%,
    Int %_class_3_cabin_crew%,
    String %_ac_version%;
  external %aircraft_types_table%;
  id -> maintype, maxfc, maxcc, class1fc, class2fc, class3fc, class1cc, class2cc, class3cc, version;
  - -> "---", 0, 0, 0, 0, 0, 0, 0, 0, "";
end

export %ac_family% = %_ac_family%(%ac_type%);
export %ac_version% = default(%_ac_version%(%ac_type%), "");
export %max_cabin_crew_seats% = %_max_cabin_crew_seats%(%ac_type%);
/* Override in leg_ccr since uses attributes-module /pergr */
%leg_crew_bunks_1_from_attr_fc% = void_int;
%leg_crew_bunks_2_from_attr_fc% = void_int;
%leg_crew_bunks_3_from_attr_fc% = void_int;
%leg_crew_bunks_1_from_attr_cc% = void_int;
%leg_crew_bunks_2_from_attr_cc% = void_int;
%leg_crew_bunks_3_from_attr_cc% = void_int;


%nr_rest_class_1_fc% = default(%_class_1_flight_crew%(%ac_type%),0);
%nr_rest_class_2_fc% = default(%_class_2_flight_crew%(%ac_type%),0);
%nr_rest_class_3_fc% = default(%_class_3_flight_crew%(%ac_type%),0);

export %nr_crew_bunk_flight_crew% =
        if %nr_rest_class_1_fc% > 0 then %nr_rest_class_1_fc%
        else if %nr_rest_class_2_fc% > 0 then %nr_rest_class_2_fc%
        else %nr_rest_class_3_fc%;


export %nr_rest_class_1_cc% = default(%_class_1_cabin_crew%(%ac_type%),0);
export %nr_rest_class_2_cc% = default(%_class_2_cabin_crew%(%ac_type%),0);
export %nr_rest_class_3_cc% = default(%_class_3_cabin_crew%(%ac_type%),0);

export %nr_crew_bunk_cabin_crew% =
        if %nr_rest_class_1_cc% > 0 then %nr_rest_class_1_cc%
        else if %nr_rest_class_2_cc% > 0 then %nr_rest_class_2_cc%
        else %nr_rest_class_3_cc%;

export %rest_class_cc% = if %nr_rest_class_1_cc% > 0 then 1
  else if leg.%nr_rest_class_2_cc% > 0 then 2 else
       if leg.%nr_rest_class_3_cc% > 0 then 3 else void_int;


export %rest_class_fc% = if %nr_rest_class_1_fc% > 0 then 1
  else if leg.%nr_rest_class_2_fc% > 0 then 2 else
       if leg.%nr_rest_class_3_fc% > 0 then 3 else void_int;

/* AC qualification
 * Moved from qualification module, Anna 19jul2007*/
export %ac_type_mappings_table% = %etab_path%(%ac_type_mappings_table_p%);
%ac_type_mappings_table_p% =
  parameter "ac_qual_map"
  remark "ETAB: Aircraft type -> qual mapping";

export %qual% =
  if (%is_simulator% or %is_standby%) then
    %sim_leg_qual%
  else
    (if %flight_crew% then
      %qual_fc%
    else
      %qual_cc%);
export %qual_new% =
  if (%is_simulator% or %is_standby%) then
    %sim_leg_qual%
  else
    (if %flight_crew% then
      default(%qual_fc_new%("SK"),%qual_fc_new%("SVS"))
    else
      default(%qual_cc_new%("SK"),%qual_cc_new%("SVS")));

/* check if given qualification code matches leg.%qual%; regarding codes 36 and 38 equal.
   The intention is that this code could serve as placerholder, for also other similar "quals".*/
export %qual_eq_3638%(String q) =
  if %qual% = "36" or %qual% = "38" then
      q = "36" or q = "38"
  else
      /* Allow A3, A4 or A5 for qualification AWB */
      if q = "AWB" then
        %qual% = "A3" or %qual% = "A4" or %qual% = "A5"
      else
        %qual% = q;

export %any_qual% =
    not (void(%qual_fc%) or void(%qual_cc%));

/* Change back to %aoc% from %ac_qual_aoc% */
table ac_type_mappings =
  %ac_type%, %aoc% ->
    export String  %qual_fc%,
    export String  %qual_cc%;
  external %ac_type_mappings_table%;
  ac_type, aoc ->
    ac_qual_fc, ac_qual_cc;
  -, -  ->  "---", "---";       /* "---" for un-defined aicraft type */
end

table ac_type_mappings_new(String aoc_new) =
  %ac_type%, aoc_new ->
    export String  %qual_fc_new%,
    export String  %qual_cc_new%;
  external %ac_type_mappings_table%;
  ac_type, aoc ->
    ac_qual_fc, ac_qual_cc;
  -, -  ->  "---", "---";       /* "---" for un-defined aicraft type */
end


/* This lookup is for PGT Distribution report.
   Do not reuse unless sure. /EkG */
table ac_type_mappings_reverse(String acqual)  =
  acqual ->
    export String %ac_type_by_qual%;
  external %ac_type_mappings_table%;
  ac_qual_fc -> ac_type;
  -  ->  "Unknown";
end


/* only valid for flightdeck, cabin has to many quals! */
export %code_for_areaqual% =
    if %has_qual%("38") or %has_qual%("37") then "38"
    else if %has_qual%("36") then "36"
    else if %has_qual%("A2") then "A2"
    else if %has_qual%("M0") then "M0"
    else if %has_qual%("M8") then "M8"
    else if %has_qual%("A3") or %has_qual%("A4") or %has_qual%("A5") then "LH"
    else if %has_qual%("Q4") then "Q4"
    else if %has_qual%("F5") then "F5"
    else if %has_qual%("CJ") then "CJ"
    else if %has_qual%("EJ") then "EJ"
    else "";

export %has_qual%(string qual) =
  (%is_active_flight% and %qual_fc% = qual) or
  (%is_simulator% and %qual% = qual);

/*
** First / Last
*/
export %is_first_in_duty% = is_first(leg(duty));
export %is_last_in_duty%  = is_last (leg(duty));
export %is_first_in_trip% = is_first(leg(trip));
export %is_last_in_trip%  = is_last (leg(trip));


export %is_last_active_in_duty% =
  %is_active_flight% and is_last(leg(duty)) where (not %is_deadhead%);

export %is_possible_hard_lock% =
  not %is_last_active_in_duty% and
  %is_active_flight%;

/* Leg indexes start at 1 */
export %duty_index% =
  let this_start = %start_UTC%;
  count(leg(duty)) where (%start_UTC% <= this_start);
export %trip_index% =
  let this_start = %start_UTC%;
  count(leg(trip)) where (%start_UTC% <= this_start);



/*
 * APIS - Crew Manifests and Master Crew List
 */

/* Countries to where we send APIS */
set apis_countries = "US", "MX", "GB", "CN", "JP", "TH", "AE", "RU", "TR", "CA";
set apis_countries_dk = "US", "MX", "GB", "CN", "JP", "TH", "AE", "RU", "TR", "DK", "CA";
set apis_countries_no = "US", "MX", "GB", "CN", "JP", "TH", "AE", "RU", "TR", "DK", "CA", "NO";
set apis_countries_ie = "US", "MX", "GB", "CN", "JP", "TH", "AE", "RU", "TR", "DK", "CA", "NO", "IE";
set apis_countries_bg = "US", "MX", "GB", "CN", "JP", "TH", "AE", "RU", "TR", "DK", "CA", "NO", "CA", "BG";

/*******************************************************************************
 * Leg definitions
 */

/* Should return True if the leg represents a flight activity */
export %leg_is_flight% = leg.%is_flight_duty%;

/* Country from where the leg departs */
export %leg_start_country% = leg.%start_country%;

/* Country to where the leg arrives */
export %leg_end_country% = leg.%end_country%;

/* Time of departure (best of STD, ETD and ATD) (used in reports) */
export %leg_start_utc% = leg.%start_utc%;

/******************************************************************************
 ** Flyovers
 *****************************************************************************/

/* Limited by the number of available countries in the world. */
%max_flyover_times% = 300;






/* terjeda:
   Given a time and two countries, this function will return true
   if there is a flyover-flight for this combination of end-countries
   The function is used by leg_has_any_flyover_ab and *_ba
   */
%has_any_flyover%(abstime t, string ctry_a, string ctry_b) =
  any(times(%max_flyover_times%) while (not void(%flyover_ctry_seq%(ctry_a, ctry_b, t, times_index(0)))),
    %flyover_ctry_seq%(ctry_a, ctry_b, t, times_index(0)) in apis_countries);


%leg_has_any_flyover_ab% =
  %has_any_flyover%(%leg_start_utc%, %leg_start_country%, %leg_end_country%);

/* terjeda: Again a pair of nearly identitical "twin" functions?! */
%leg_has_any_flyover_ba% =
  %has_any_flyover%(%leg_start_utc%, %leg_end_country%, %leg_start_country%);


%leg_has_any_flyover% =
    %leg_is_flight%
    and
    default(%leg_has_any_flyover_ab% or %leg_has_any_flyover_ba%, false);



/* terjeda: this method is called in CARMUSR/lib/python/carmusr/paxlst/mmi.py */
/* terjetda:
   This method checks if the current leg has an applicable flyove-rule for the given country.
*/
%leg_has_flyover%(string country) =
  %leg_is_flight%
  and
  (if %leg_start_country% = %leg_end_country% then
    %leg_start_country% = country
  else
    default(%leg_has_flyover_ab%(country) or %leg_has_flyover_ba%(country), false));



/* start_utc was arbitrarily chosen, since we don't know when a country is flown over. */
%leg_has_flyover_ab%(string country) =
  %has_flyover%(country, %leg_start_utc%, %leg_start_country%, %leg_end_country%);

%leg_has_flyover_ba%(string country) =
  %has_flyover%(country, %leg_start_utc%, %leg_end_country%, %leg_start_country%);
/* terjeda: Really? 2 functions that are nearly identical?! */


/* terjeda:
   Given a flyover-country, and two end-countries and a time,
   this function returns true if there is a flyover-requirment for flyover-country flown over by between the end-countries for the given time.
*/
%has_flyover%(string flyover, abstime t, string ctry_a, string ctry_b) =
  any(times(%max_flyover_times%) while (not void(%flyover_ctry_seq%(ctry_a, ctry_b, t, times_index(0)))),
    flyover = %flyover_ctry_seq%(ctry_a, ctry_b, t, times_index(0)));



/* terjeda:
   This table wrappes the DB-table "flyover",
   and exports the function %flyover_ctr_seq% which given two country-codes and a time, and an int "seq"
   returns a country code for a flyover-country of the two country-codes match a flights end-countries,
   and the time is withing the tables validfrom-validto range
   If no match, then a void_string
   "seq" indicates which row to return given more than one result.
   (match_number is a "special field name" for tables)
*/
table flyover_table(string ctry_a, string ctry_b, abstime t, int seq) =
  ctry_a,
  ctry_b,
  t,
  seq ->
    string %flyover_ctry_seq%;
  external "flyover";
  "country_a",  "country_b",   ("validfrom", "validto"(,  match_number  ->  "flyover";
  -, -, -, -                                                            ->  void_string;
end

export %is_apis% =
  leg.%is_flight_duty%
  and ((%end_country% in apis_countries or %start_country% in apis_countries or %leg_has_any_flyover%)
        or %is_denmark_non_schengen%
        or %is_norway_non_schengen%
        or %is_ireland_non_EU%
        or %is_bulgaria_all%)
  and %valid_russia%;

export %is_norway_non_schengen% =
  (%end_station% = "LYR") or
  ((%end_country% = "NO") and ((not %departure_is_schengen%) or (%start_station% = "LYR")));

export %is_denmark_non_schengen% =
  (%start_country% = "DK" and not %arrival_is_schengen%)  or (%end_country% = "DK" and not %departure_is_schengen%);

export %is_ireland_non_EU% =
  %end_country% = "IE" and %departure_is_non_EU%;

export %departure_is_non_EU% =
  ((%start_country% in non_EU_schengen) or not %departure_is_schengen%) and %start_country% not in non_schengen_EU;

export set non_EU_schengen = 
  "NO", "CH", "LI", "IS"
  remark "Non EU schengen countries";

export set non_schengen_EU =
  "BG", "RO", "HR", "CY", "IE", "GB"
  remark "Non schengen EU countries";

export %is_bulgaria_all% =
  (%start_country% = "BG")  or (%end_country% = "BG");


/* APIS to Russia valid from 1 Dec 2013 */
/* terjeda: Is this function necessary any more?  Depreciate? */
%valid_russia% =
    if (%end_country% = "RU" and not (%start_country% in apis_countries))
        or (%start_country% = "RU" and not (%end_country% in apis_countries)) then
       %agreement_valid%("apis_russia", leg.%end_lt%)
    else true;

/*
** Domestic / Interscand / European / International
*/
export %is_domestic% =
  (departure_airport_country = arrival_airport_country) and
  %departure_is_interscand% and %arrival_is_interscand%;

export %is_norwegian_domestic% =
   (departure_airport_country = arrival_airport_country) and
   %departure_is_norwegian%;

export %is_interscand% =
  %departure_is_interscand% and %arrival_is_interscand%;

export %is_european% =
  (%departure_is_european% or %arrival_is_european%) and
  not %is_intercont%;

export %is_schengen% =
  %is_interscand% or (%is_european% and %departure_is_schengen% and %arrival_is_schengen%) ;

export %is_intercont% =
  %departure_is_intercont% or %arrival_is_intercont%;

export %departure_is_interscand% =
  %country_is_domestic%(%start_country%) and
  not (arrival_airport_name in domestic_exception_airports);

export %arrival_is_interscand% =
  %country_is_domestic%(%end_country%) and
   not (arrival_airport_name in domestic_exception_airports);

export  %departure_is_norwegian% =
        %start_country% = "NO";

export  %arrival_is_norwegian% =
        %end_country% = "NO";



export %arrival_in_max_consecutive_us_airports% =
  %end_station% in max_consecutive_us_airports and
  not %is_deadhead% and
  %is_long_haul% and
  %departure_is_interscand%;

export %departure_is_european% =
  %country_is_european%(%start_country%);

export %arrival_is_european% =
  %country_is_european%(%end_country%);

export %departure_is_schengen% =
  %country_is_schengen%(%start_country%);

export %arrival_is_schengen% =
  %country_is_schengen%(%end_country%);

export %departure_is_intercont% =
  %country_is_intercont%(%start_country%);

export %arrival_is_intercont% =
  %country_is_intercont%(%end_country%);

set SAS_hub_set =
  parameter ""
  remark "Airport considered connectionwise hubs";

export set SAS_base_set = "OSL", "CPH", "ARN"; /* This set should remain as the "basic SK" bases, the capital cities triangle*/
export set SH_base_set = "OSL","CPH","ARN";

export %country_is_domestic%(String country) =
  %param_table%("scandinavian_countries", country, %start_utc%);

export %country_is_schengen%(String country) =
  %param_table%("schengen_countries", country, %start_utc%);

%country_is_european%(String country) =
  %param_table%("european_countries", country, %start_utc%);

%country_is_intercont%(String country) =
  %param_table%("intercontinental_countries", country, %start_utc%) or
  %param_table%("middle_eastern_countries", country, %start_utc%);

set domestic_exception_airports =
  parameter "SFJ", "THU"
  remark "Exception airports NOT to consider domestic";

export %leg_to_NRT% = (leg.%start_station% = "NRT") or (leg.%end_station% = "NRT");

/* US airports relevant for max consecutive trips rule */
set max_consecutive_us_airports =
  "EWR", "IAD";


/* leg starting in TLV, CAI or airport with similar distance to Scandinavia*/
export %middle_east_distance_destination% =
  %start_station% in middle_east_distance_destinations_set or
  %end_station% in middle_east_distance_destinations_set;

/* Airports in the near middle east regarded short haul but with freedays after trip*/
set middle_east_distance_destinations_set = "TLV","CAI";

/*
** Area
** domestic(d), interscand(s), european(e), international(i)
*/
export %area% =
  if %is_domestic% then
    "D"
  else if %is_interscand% then
    "S"
  else if %is_european%   then
    "E"
  else if %is_intercont% then
    "I"
  else
    "*";

/*
** Schengen Area (SASCMS-5910
** domestic(d), interscand(s), schengen(es), non-schengen(ens), international(i)
*/
export %area_schengen% =
  let area = %area%;
  if area = "E" and %is_schengen% then
    "ES"
  else if area = "E" and not %is_schengen% then
    "ENS"
  else
     area;

/* Split duty exception */

export %is_split_duty_exception% =
  %param_table%("split_duty_exception", %flight_nr_min_3_digits%, %start_utc%);

/*
** AOC - operation certificate
** SK or BU - All SKN flights belong to BU.
*/
/* CR 307
    AOC should depend on employer, but these keywords aren't available in
    Matador, so the planning area region is saved at optimizer start to be used
    instead */
%excepted_aoc_p% =
    parameter "SK"
    remark "[Script] AOC to be used for excepted ac types in matador.";

export %aoc% =
  if %employer_region% = "SVS" then
     "SVS"
  else if %employer_region% = "SKN" then
    "BU"
  else
    "SK";
/*
** Region
** SKD, SKN, SKS, SK (Int)
*/

/************************************/
/* New region definition, see CR352 */

/* Leg employer
   This works both for tracking and planning since the %flight_crew%-definition
   in tracking looks at open positions
   Note 1: The employer keywords will be "" for non-flight legs
   Note 2: Never use any code dependent on employer in CCR legality, the
           employer keywords are not available in Matador. Only use for Studio
           functionality and reports. It is ok to code CCP legality however, since
           they are available in APC */
table crew_employment_table(String id, Abstime lookuptime) =
           id, lookuptime
           -> export String %base_at_date_by_id%,
              export String %station_at_date_by_id%,
              export String %planning_group_at_date_by_id%;
           external %crew_employment_table%;
           crew, (validfrom, validto( -> base, station, planning_group;
           -, - -> void_string, void_string, void_string;
         end
export %cabin_employer_from_base% =
  let tmp_base = if %is_roster% then default(%base_at_date_by_id%(keywords.%crr_crew_id%, %now%),homebase) else homebase;
  if aircraft_owner = "SK" then
    if tmp_base = "CPH" then
      if %is_long_haul_4exng% then "SK" else "SKD"
    else if tmp_base = "OSL" or tmp_base = "SVG" or tmp_base = "TOS" or tmp_base = "TRD" or tmp_base = "BGO" then
      if %is_long_haul_4exng% then "SK" else "SKN"
    else if tmp_base = "STO" then
      if %is_long_haul_4exng% then "SK" else "SKS"
    else
      "SK"
  else if aircraft_owner = "RSS" then "SKS"
  else if aircraft_owner = "RSN" then "SKN"
  else if aircraft_owner = "RSD" then "SKD"
  else aircraft_owner;

export %cockpit_employer_from_base% =
  let tmp_base = if %is_roster% then default(%base_at_date_by_id%(keywords.%crr_crew_id%, %now%),homebase) else homebase;
  if aircraft_owner = "SK" then
    if tmp_base = "CPH" then
      if %is_long_haul_FC% then "SK" else "SKD"
    else if tmp_base = "OSL" or tmp_base = "SVG" or tmp_base = "TOS" or tmp_base = "TRD" or tmp_base = "BGO" then
      if %is_long_haul_FC% then "SK" else "SKN"
    else if tmp_base = "STO" then
      if %is_long_haul_FC% then "SK" else "SKS"
    else
      "SK"
    else if aircraft_owner = "RSS" then "SKS"
    else if aircraft_owner = "RSN" then "SKN"
    else if aircraft_owner = "RSD" then "SKD"
    else aircraft_owner;

export %employer_fix_tracking_p% =
  parameter false
  remark "Temporary fix for employer in Tracking";

export %employer% =
  if %employer_fix_tracking_p% then
    if %is_flight_duty% then
      if %flight_crew% then cockpit_crew_employer
      else cabin_crew_employer
    else ""
  else
    if %is_flight_duty% then
      if %flight_crew% then %cockpit_employer_from_base%
      else %cabin_employer_from_base%
    else "";

/* Leg employer region */
set skn_employer_set = parameter "BU", "SKN";
set ski_employer_set = parameter "SK", "SKI";
set skd_employer_set = parameter "SKD", "SKC", "HFM";
set sks_employer_set = parameter "SKS";
set default_employer_set = "SKS", "SKD", "SKN", "SVS", "SZS"; /* Used to catch the common case fast */
/* Employer region is undefined if employer is not a SAS employer */
export %employer_region% =
    if %employer% in default_employer_set then %employer%
    else if %employer% in ski_employer_set then "SKI"
    else if %employer% in skn_employer_set then "SKN"
    else if %employer% in sks_employer_set then "SKS"
    else if %employer% in skd_employer_set then "SKD"
    else "";

export %employer_planning_group% =
    if %employer% in default_employer_set then %employer%
    else if (%employer% = "SK" and %cabin_crew%) then
        (if %homebase_planning_group% = "" then "SKD" else %homebase_planning_group%)
    else if %employer% in ski_employer_set then "SKI"
    else if %employer% in skn_employer_set then "SKN"
    else if %employer% in sks_employer_set then "SKS"
    else if %employer% in skd_employer_set then "SKD"
    else "";

export %fd_employer% =
    if %employer% in default_employer_set then %employer%
    else if %employer% in ski_employer_set then "SKI"
    else if %employer% in skn_employer_set then "SKN"
    else if %employer% in sks_employer_set then "SKS"
    else if %employer% in skd_employer_set then "SKD"
    else "";

export %fd_employer_is_SAS% =
    %employer%  in default_employer_set or
    %employer% in ski_employer_set or
    %employer% in skn_employer_set or
    %employer% in sks_employer_set or
    %employer% in skd_employer_set;

export %cc_employer_is_SAS% =
    %employer% in default_employer_set or
    %employer% in ski_employer_set or
    %employer% in skn_employer_set or
    %employer% in sks_employer_set or
    %employer% in skd_employer_set;

/* Region of open time legs */
export %region_open_time% =
  /* For flight legs, region is determined based on employer, it is never based
     on homebase_region.
     Ground duties does not have an employer so region is determined based on
     the homebase region. */
     if %is_flight_duty% and not %is_deadhead% then
        default(%employer_region%, "")
     else %homebase_region%;

/* Overridden in leg_ccr, where crew is considered */
export %region% = %region_open_time%;

export %planning_group% = %planning_group_unassigned%;

%planning_group_unassigned% =
  if %is_flight_duty% and not %is_deadhead% then
    default(%employer_planning_group%, "")
  else %homebase_planning_group%;

/* Ac_region is region as determined by employer. Since the employer keywords
   are unavailable in Matador it will be set to None there. Never code CCR
   legality with ac_region, only use it in reports
   The conversion from BU to SKN is performed because
   service need lookups expects SKN and not BU */
export %ac_region% = default(%employer_region%, "");
export %ac_planning_group% = default(%employer_planning_group%, "");

/* Determines if a leg can be used to determine region on trip level */
export %determines_trip_region% = %is_on_duty% and not %is_deadhead%;
export %determines_trip_planning_group% = %is_on_duty% and not %is_deadhead%;

/* End new region definition, see CR352 */
/****************************************/

export %aircraft_owner% = aircraft_owner;
/* export %cockpit_crew_employer% = cockpit_crew_employer;*/


export %is_SKD% = %region% = "SKD" or %region% = "";
export %is_SKN% = %region% = "SKN" or %region% = "";
export %is_SKS% = %region% = "SKS" or %region% = "";
export %is_SKI% = %region% = "SKI" or %region% = "";
%is_SKJ% = %region% = "SKJ" or %region% = "";
%is_SKK% = %region% = "SKK" or %region% = "";
%is_SVS% = %region% = "SVS" or %region% = "";
%is_SZS% = %region% = "SZS" or %region% = "";
%is_asian% =
  %is_SKJ% or %is_SKK%;

export %homebase_region% = %homebase_planning_group%;

/* Default value for region used when data missing from flight_owner table.*/
export %homebase_planning_group% =
  if %aircraft_owner% = "SK" then
    if %trip_homecountry% = "DK" then
          "SKD"
    else if %trip_homecountry% = "NO" then
        "SKN"
    else if %trip_homecountry% = "SE" then
        "SKS"
    else if %trip_homecountry% = "JP" then
        "SKJ"
    else if %trip_homecountry% = "CN" then
        "SKK"
    else
        "" /* No specific region */
  else if %aircraft_owner% = "SVS" then
    "SVS"
  else if %aircraft_owner% = "SZS" then
    "SZS"
  else
    ""; /* No specific region */

table region_table(int leg_num, int weekday)  =
 %flight_id%,
 %start_station%,
 %end_station%,
 weekday,
 leg_num,
 %start_date_UTC% -> String %_flight_owner_region_lookup%;
    external %flight_owner_table_p%;
    fd, adep, ades, doop, legno, (validfrom, validto) -> region;
    - , -   , -   , -   , -    , -                    -> void_string;
end


/* The employer, for a flight, to be used with agreement related conditions when individual crew is not known (CCP, unsassigned CCR)
** It's based on IATA employer for flight legs, which may differ for FD and CC. For ground duties it may be not set, but when possible
** could be derived from crew or other sources. As id an invariant number is used, to make it possible to use it in tables lookups.
** This means that any new employers should be appended with higher numbers.
*/
export %ac_employer_code% =
  if %is_deadhead% then ""
  else if %employer%="SK" then "SKI"
  else %employer%; /* redefined */

export %ac_employer_id% =
  %ac_employer_id_from_code%(%ac_employer_code%);

export %ac_employer_id_from_code%(String code) =
  if code="" then 0

  else (locate(code,"SKS SKD SKN SKI SZS SVS ")+3)/4;

/* in tables the integer may be used (together with comment), as they don't allow for symbolic literals. The integer is invariant */
export %ac_employer_unknown% = 0;
export %ac_employer_sks%     = 1;
export %ac_employer_skd%     = 2;
export %ac_employer_skn%     = 3;
export %ac_employer_ski%     = 4;
export %ac_employer_szs%     = 5;
export %ac_employer_svs%     = 6;

export %is_ac_employer_sks% = %ac_employer_id% = %ac_employer_sks%;
export %is_ac_employer_skd% = %ac_employer_id% = %ac_employer_skd%;
export %is_ac_employer_skn% = %ac_employer_id% = %ac_employer_skn%;
export %is_ac_employer_szs% = %ac_employer_id% = %ac_employer_szs%;
export %is_ac_employer_ski% = %ac_employer_id% = %ac_employer_ski%;
export %is_ac_employer_sk% = %ac_employer_is_sk%(%ac_employer_id%);
export %is_ac_employer_sk_sh% = %ac_employer_is_sk_sh%(%ac_employer_id%);
export %is_ac_employer_svs% = %ac_employer_id% = %ac_employer_svs%;
export %is_ac_employer_svsn% = %is_ac_employer_svs% and leg.%trip_homebase% = "BGO";
export %is_ac_employer_svsd% = %is_ac_employer_svs% and leg.%trip_homebase% = "CPH";
export %is_ac_employer_szsd% = %is_ac_employer_szs% and leg.%trip_homebase% = "CPH";
export %is_ac_employer_szss% = %is_ac_employer_szs% and leg.%trip_homebase% = "STO";

table ac_employer_tbl(int ac_employer_id) =
  ac_employer_id -> export %ac_employer%, export %ac_employer_text%, export %ac_employer_is_sk%, export %ac_employer_is_sk_sh%;
  1 -> "SKS_AE", "SAS Sweden",  true, true;
  2 -> "SKD_AE", "SAS Denmark", true, true;
  3 -> "SKN_AE", "SAS Norway",  true, true;
  4 -> "SKI_AE", "SAS LH",      true, false;
  5 -> "SZS_AE", "SAS Connect", %szs_fd_or_cc%,%szs_fd_or_cc%;
  6 -> "SVS_AE", "SAS Link",    %svs_fd_or_cc%, %svs_fd_or_cc%;
  - -> "",    "Unknown",     false, false;
end
%svs_fd_or_cc% =
    if %flight_crew% then true
    else false;

%szs_fd_or_cc% =
    if %flight_crew% then true
    else false;

/* A zero as weekday means all weekdays */
%_flight_owner_region%(int leg_num) =
   default(%_flight_owner_region_lookup%(leg_num, %start_weekday%),
           %_flight_owner_region_lookup%(leg_num, 0));

/* We need buckles and belt so if we cannot find a valid entry for the actual
 * leg number, we will try 1 to 4 before giving up */
export %flight_owner_region% =
  if not void(%_flight_owner_region%(%leg_number%)) then
    %_flight_owner_region%(%leg_number%)
  else if not void(%_flight_owner_region%(1)) then
    %_flight_owner_region%(1)
  else if not void(%_flight_owner_region%(2)) then
    %_flight_owner_region%(2)
  else if not void(%_flight_owner_region%(3)) then
    %_flight_owner_region%(3)
  else
    %_flight_owner_region%(4);

/*******************************************************************
* Parameter for flight owner table
********************************************************************/
export %flight_owner_table_p% =
  parameter "meal_flight_owner"
  remark "flight_owner table, used to get sh open time region";

/*
** Long range
*/
export %is_long_range_aircraft% =
    default(locate("LR", base_utils.%uppercase%(%ac_version%)) > 0, false);

export %is_LH_with_NX_ac% =
    %is_long_haul% and %is_long_range_aircraft%;
    
/*
** Long / Short haul
*/
set long_haul_aircraft_families = "A330", "A340", "A350";

export %is_long_haul_aircraft% =
  %ac_family% in long_haul_aircraft_families;

export %is_short_haul% = %is_flight_duty% and not %is_long_haul%;
export %is_long_haul% =
  %is_flight_duty% and
  %_is_long_haul% and
  /* Some airports are excepted from the LH definition */
  not (%long_haul_airport_exception%(%end_station%) or
       %long_haul_airport_exception%(%start_station%));

export %is_active_long_haul% =
  %is_active_flight% and %is_long_haul%;
export %is_active_short_haul% =
  %is_active_flight% and %is_short_haul%;

/* check if short haul, if it's a flight leg. cheap as it's only leg dependendent (%is_short_haul% isn't */
export %flight_is_short_haul% =
  not %flight_is_long_haul%;

/* check if long haul, if it's a flight leg. cheap as it's only leg dependendent (%is_long_haul% isn't. i
   Assumes 4ExNG agreement (which is currently valid)  */
export %flight_is_long_haul% =
  %is_long_haul_4exng%;

set long_haul_airports = "DBX", "GRU";

%_is_long_haul% =
  if %cabin_crew%
     then if %is_asian%
          then true
     else %is_long_haul_4exng%
  else if %start_station% in long_haul_airports or %end_station% in long_haul_airports 
       then true
  else %is_long_haul_FC%;

/* Agreement: 4ExNG Definitions */
%is_long_haul_4exng% =
  (nmax(%start_time_zone%, %end_time_zone%) >3:00
  or nmin(%start_time_zone%, %end_time_zone%) <-1:00 /* for the basic CBA definition all trips starting or landing outside timezones -1 and +3 are longhaul */
  or %_block_time_scheduled% > 8:00) and
  not (%start_country% = "GL" or %end_country% = "GL");

/* Agreement 4ExNG defintions, usable for flight legs only (but there only leg dependendent) */
%flight_is_long_haul_4exng% =
  (abs(%start_time_zone% - 1:00) > 3:00 or
   abs(%end_time_zone% - 1:00) > 3:00 or
   %block_time_scheduled% > 8:00) and
  not (%start_country% = "GL" or %end_country% = "GL");
 
   /* Agreement: CAU A. Definitions */
export %is_long_haul_SKD% =
  (abs(%start_time_zone% - 1:00) > 2:00 or abs(%end_time_zone% - 1:00) > 2:00 or
  %start_latitude% < 60*34 or %end_latitude% < 60*34);

/* Agreement: NKF 15. Definitions */
%is_long_haul_SKN% =
  if parameters.%k11_skn_cc_sp10_7_valid%(%pp_start%) then
    ((%start_station% = "OSL" or %end_station% = "OSL") and
     %block_time_scheduled% > 6:00) or
    %block_time_scheduled% > 6:30
  else
    abs(%start_time_zone%) > 3:00 or abs(%end_time_zone%) > 3:00;

/* Agreement: SCCA A. Definitions */
%is_long_haul_SKS% =
  abs(%start_time_zone% - 1:00) > 3:00 or abs(%end_time_zone% - 1:00) > 3:00;

/* Agreement: FC 1:7 "Planerad tjänstgöring... Anm." */
%is_long_haul_FC% =
  /*abs(%start_time_zone%) > 3:00 or abs(%end_time_zone%) > 3:00;*/
  nmax(%start_time_zone%, %end_time_zone%) >3:00
  or nmin(%start_time_zone%, %end_time_zone%) <-1:00;

/* Airports excepted from the long haul definition */
%lh_apt_exceptions_table% = %etab_path%(%lh_apt_exceptions_table_p%);
%lh_apt_exceptions_table_p% =
  parameter "lh_apt_exceptions"
  remark "ETAB: Table defining airport excepted as long haul";

%long_haul_airport_exception%(String station) = not void(%_lh_apt_exc%(station));
table long_haul_apt_exceptions(String station) =
  fundamental.%main_cat%, %region%, station, %start_hb% ->
    String %_lh_apt_exc%;
  external %lh_apt_exceptions_table%;
  maincat, region, station, (validfrom, validto) ->
    station;
  -, -, -, - -> void_string;
end

export %with_short_haul_ac% = not %with_long_haul_ac%;
export %with_short_haul_ac_family% =
    %ac_family% = "B737" or
    %ac_family% = "A320" or
    %ac_family% = "EMJ";
    
export %with_long_haul_ac% =
  %ac_family% = "A330" or
  %ac_family% = "A340" or
  %ac_family% = "A350";

%is_deadhead_before_BKK% =
  %is_deadhead% and not is_last(leg(trip)) and next(leg(trip), %end_station% = "BKK");

export %is_west_bound% = %start_time_zone% - 4:00 > %end_time_zone%;
export %is_east_bound% = %start_time_zone% + 4:00 < %end_time_zone%;

/********************************************
*               Check in/out
********************************************/

/*
 * Variables for determining if a leg has a check-in or check-out
 * The first leg that requires a check-in in a duty and the last
 * leg that requires a cio in a duty are associated with cio-events.
 */

export %has_check_in% =
  %requires_cio%
  and is_first(leg(duty)) where(%requires_cio%);

export %has_check_out% =
  %requires_cio%
  and is_last(leg(duty)) where(%requires_cio%);

/*
 * %requires_cio% determines if a leg is of such a type that it requires
 * check-in. It does not mean that there is a cio rudob connected to it.
 * Only the first or last rudob in a duty pass has check in.
 *
 * [acosta:09/005@12:10] Removed requirement for SIM. According to SAS these
 * activities require C/I (when they are first in duty pass and at Scandinavian
 * base):
 *  - Flights
 *  - Standby at Airport
 *  - Ground Transport
 *  - "Passive Transfer"
 */
export %requires_cio% =
  %is_flight_duty%
  or %is_ground_transport%
  or %is_standby_at_airport%;


/* Check in and check out times can be overloaded in tracking.
 *  %check_in_default% and %check_out_default% are the default
 *  check in/out times
 *
 * NOTE! check_[in|out]_override can be negative! This needs to be handeled
 * wherever check_in is used, sometimes this is wanted, eg when the flight
 * is delayed and estimated times are used instead of scheduled.
 * check_[in|out] are always relative to scheduled times!
 */


/* If a frozen briefing is more than 08:00, then disregard it. BZ 34946 */
%max_briefing_diff% = 08:00;

/* N.B. check_in is calculated relative to the SCHEDULED activity start time */
export %check_in% =
  if %requires_cio% or %is_simulator%
  then default(/* Disregard overrides larger than 08:00 */
               if %briefing_override% <= %max_briefing_diff%
               then %briefing_override%
               else %check_in_default%,
           %check_in_default%)
  else 0:00;

export %checked_in% = void_bool;
export %checked_out% = void_bool;

export %check_out% =
  if %requires_cio% or %is_simulator%
  then default(%debriefing_override%, %check_out_scheduled%)
  else 0:00;

export %check_out_scheduled% =
  default(%check_out_default% + %check_out_training_exception%, 1:00);

export %check_out_training_exception% = 0:00;

/* These will be redefined in leg_cct: */
%briefing_override% = void_reltime;
%debriefing_override% = void_reltime;
%brief_assignment_override% = void_reltime;
%debrief_assignment_override% = void_reltime;

/*
 * Main tables for check-in/out times
 * Tables drill down to FC/CC-specific tables
 */

export %check_in_default% =
  default(%_check_in_default%, 2:00);

table check_in_times =
  fundamental.%flight_crew%,
  %is_simulator%,
  (%is_flight_duty% or %is_ground_transport%) -> Reltime %_check_in_default%;

  true, false, true -> %check_in_default_fc_flight%;
  true, false, false -> %check_in_default_fc_gd%;
  true, true, false -> %check_in_default_sim_gd%;
  false, false, true -> %check_in_default_cc_flight%;
  -, -, - -> 0:00;
end

%ci_exception_table% = %etab_path%(%ci_exception_table_p%);
%ci_exception_table_p% =
  parameter "ci_exception"
  remark "ETAB: Table with check in time exceptions";

%ci_except_position% =
  if %is_deadhead% then
    "DH"
  else if %cabin_crew% then
    "AP"
  else
    "FC";

%_check_in_exception% =
  let maincat = fundamental.%main_cat%,
      position = %ci_except_position%,
      region = %region%,
      airport = %start_station%,
      fd = concat(%flight_carrier%,
                  " ",
                  format_int(%flight_nr%, "%d")),
      start = %start_utc%;
  default(%__check_in_exception%(maincat, position, region, airport,  fd, start),
  default(%__check_in_exception%(maincat,      "*", region, airport,  fd, start),
  default(%__check_in_exception%(maincat, position, region, airport, "*", start),
          %__check_in_exception%(maincat,      "*", region, airport, "*", start))));

table ci_exception(String maincat,
                   String position,
                   String region,
                   String airport,
                   String fd,
                   Abstime start) =
  maincat, position, region, airport, fd, start
    -> Reltime %__check_in_exception%;

  external %ci_exception_table%;

  maincat, pos, region, airport, fd, (validfrom,validto)
    -> citime;
  -, -, -, -, -, - -> void_reltime;
end

export %check_out_default% =
  default(%_check_out_default%, 1:00);

table check_out_times =
  fundamental.%flight_crew%,
  %is_simulator%,
  %is_flight_duty% or %is_ground_transport% -> export Reltime %_check_out_default%;

  true, false, true -> %check_out_default_fc_flight%;
  true, false, false -> %check_out_default_fc_gd%;
  true, true, false -> %check_out_default_sim_gd%;
  false, false, true -> %check_out_default_cc_flight%;
  -, -, - -> 0:00;
end

/*
 * Check-in times
 */
%check_in_default_fc_flight% =
  default(%_check_in_exception%,
          %_check_in_default_fc_flight%);

export %deadhead_leg_ci% = 0:45;

/* redefined for lookback in leg_ccp_calibration_lookback */
%leg_ac_employer_id% = %ac_employer_id%;

table check_in_times_fc_flight =
  /* use leg ac employer with care in table since it can change between trip and crew e.g. from SKI to SKD*/
  %leg_ac_employer_id%, %is_long_haul%, %next_leg_is_lh%, %is_charter%, 
  %start_station%, %departs_from_homebase%, 
  %departs_from_scandinavian_base%, %is_deadhead%,not %arrival_is_schengen%

  -> Reltime %_check_in_default_fc_flight%;
   >4,    -,    -,    -,      -,    -,    -,   - ,    - -> 0:45; /* SAS Link/Connect */
  /* SK Flight crew - long haul */
  <=4, true,    -,    -,      -,    -, true,   - ,    - -> 1:20;
  <=4, true,    -,    -,      -,    -,false,   - ,    - -> 1:00;
  <=4,false, true,    -,      -,    -,    -, true,    - -> 0:45; /* DH before LH */
  &
  /* SK Flight crew - short haul */
  <=4,false,    -,    -,  "LHR",    -,false,   - ,    - -> 1:00;
  <=4,false,    -,    -,  "ARN",    -, true,   - ,true  -> if %extra_ci_sto_lh% then 0:55 else 0:50;
  <=4,false,    -,false,<>"LHR",false,false,   - ,    - -> 0:45; /* outstation that's non Scandinavian base and non-charter */
  &
  <=4,false,    -,    -,      -,    -,    -,   - ,    - -> 0:50; /* everything else should be 50 min for SH */
  &
   -, -, -, -, -, -, -, -, -  -> %error_check_in_time%; /* obvious error code */
end

export %error_check_in_time% =
    parameter 8:00
    remark "Error c/i time - in case leg not found in set-up scenarios";

/* Redefined in leg_ccr */
%check_in_region_fc% =
  %region%;

/*
 * Check-in times for CC
 *
 * The table is clustered so to check for times in the following order:
 * SKS SH, SE LH, SKD SH, DK LH, SKN SH, NO LH
 *
 * There are some redundancy in the table to allow for regionalization
 * without having to change structure.
 *
 */
export %check_in_default_cc_flight% =
    %common_check_in_default_cc_flight%;


export %common_check_in_default_cc_flight%=
  default(%_check_in_exception%,
          %_check_in_default_cc_flight%);

table check_in_times_cc_flight =
 /* use leg ac employer with care in table since it can change between trip and crew e.g. from SKI to SKD*/  
  %is_asian%,%leg_ac_employer_id%, %is_long_haul%, %next_leg_is_lh%, %is_charter%,
  %start_station%, %departs_from_homebase%, 
  %departs_from_scandinavian_base%, %is_deadhead%,not %arrival_is_schengen%

  -> Reltime %_check_in_default_cc_flight%;

  false,  >4,    -,    -,    -,      -,    -,    -,    -,    - -> 0:45; /* SAS Link/Connect */
    /* Cabin crew - long haul */
      -, <=4, true,    -,    -,  "NRT", true,false,    -,    - -> 1:15; /* SKJ from homebase NRT */
      -, <=4, true,    -,    -,  "PEK", true,false,    -,    - -> 1:00; /* SKK from homebase*/
      -, <=4, true,    -,    -,  "PVG", true,false,    -,    - -> 1:00; /* SKK from homebase*/
      -, <=4, true,    -,    -,  "ARN",    -, true,    -,    - -> if %extra_ci_sto_lh% then 1:25 else 1:20; /* LH from ARN, c/i outside airside */
      -, <=4, true,    -,    -,<>"ARN",    -, true,    -,    - -> 1:20; /* LH from scandinavian base */
      -, <=4, true,    -,    -,      -,false,false,    -,    - -> 1:00; /* LH from outstation, not scandinavian base */
      -, <=4,false, true,    -,      -,    -,    -, true,    - -> 0:50; /* DH before LH */
  &
   /* SK Cabin crew -  short haul */
  false, <=4,false,    -,    -,  "LHR",    -,    -,    -,    - -> 1:00;
  false, <=4,false,    -,    -,  "ARN",    -, true,    -, true -> if %extra_ci_sto_non_schengen% then 0:55 else 0:50;
  false, <=4,false,    -,false,<>"LHR",false,false,    -,    - -> 0:45; /* outstation that's non Scandinavian base and non charter */
  &
  false, <=4,false,    -,    -,      -,    -,    -,    -,    - -> 0:50; /* Everything else should be 50 min for SH, active or dh */
   true,   -,    -,    -,    -,      -,    -,    -,    -,    - -> 1:01; /* Default for asian crew */
  &
  -, -, -, -, -, -, -, -, -, -  -> %error_check_in_time%; /* Obvious error code */
end

%extra_ci_sto_lh% =
    system_db_parameters.%extra_ci_sto_lh_valid%(leg.%start_utc%);
%extra_ci_sto_non_schengen% =
    system_db_parameters.%extra_ci_sto_non_schengen_valid%(leg.%start_utc%);
/* Old comment: 
 * Update when training is being implemented. Alternatively move this to task_groups attributes
 * (briefing, debriefing, requires_cio) */

table check_in_times_fc_gd =
  %group_code%, %code%, %start_station%

  -> Reltime %check_in_default_fc_gd%;

  /* Before instructor simulators, update code */
  "SII", -, - -> 0:15;
  -, -, - -> 0:00;
end

/*
 * Check-out times
 *
 * During development the following error-codes are used:
 *  1:01, missing time, shall not happen
 *
 */
table check_out_times_fc_flight =
  %is_long_haul%,
  %ac_family%,
  %arrives_at_homebase% ->  Reltime %check_out_default_fc_flight%;
  /* Flight crew - short haul */
     false,    -, true -> 0:30;
     false,    -,false -> 0:15;
  /* Flight crew - long haul */
      true,    -,    - -> 0:30;
      -, -, - -> 1:01;
end

/* Special case for CC STO LH DH */
%_leg_is_dh_after_long_haul% =
  default(%is_deadhead% and
          %is_last_in_duty% and
          prev(leg(trip), %is_long_haul%),
          false);
  
table check_out_times_cc_flight =
  %region%, %is_long_haul%, %_leg_is_dh_after_long_haul%
  -> Reltime %check_out_default_cc_flight%;
  "SKN",     -,   true -> 0:15;
  "SVS",     -,    -   -> 0:15; /* SAS Link*/
  "SZS",     -,    -   -> 0:15; /* SAS Connect*/
  &
      -, false,  true -> 0:30; /* Passive after longhaul */
      -, false, false -> 0:15; /* Shorthaul */
      -,  true,     - -> 0:30; /* Longhaul */
      -,     -,     - -> 1:01;
end

/* Old comment: Update when coding training or move to task_groups
 * Put simulator check out times in this table
 */
table check_out_times_fc_gd =
  %group_code%, %code%, %start_station%

  -> Reltime %check_out_default_fc_gd%;

  /* After instructor simulators, update code */
  "SII", -, - -> 0:30;
  -, -, - -> 0:00;
end

/***********************************************************************************/

%simulator_set_table% = %etab_path%(%simulator_set_table_p%);
%simulator_set_table_p% =
  parameter "simulator_set"
  remark "ETAB: Table with simulator definitions";

%simulator_briefings_table% = %etab_path%(%simulator_briefings_table_p%);
%simulator_briefings_table_p% =
  parameter "simulator_briefings"
  remark "ETAB: Table with simulator briefing/debriefing times";

%pc_opc_composition_table% = %etab_path%(%pc_opc_composition_table_p%);
%pc_opc_composition_table_p% =
  parameter "pc_opc_composition"
  remark "ETAB: Table with PC/OPC composition definitions";

table simulator_type =
    %group_code%, %time% ->
    Bool %_sim_type_is_multi%,
    String %_sim_type_grp%,
    String %_sim_type_str%;
  external %simulator_set_table%;
  grp, legtime -> multisim, grp, simdesc;
  -, - -> false, void_string, void_string;
end

export %is_valid_sim% =
    not void(%_sim_type_grp%) and
    (not %sim_type_is_multi%
     or %ok_multi_sim%
     or %has_sim_exception%);

export %sim_type_is_multi% =
  if %has_sim_exception% then
    %sim_is_multi_exc%
  else
    %_sim_type_is_multi%;

%ok_multi_sim% =
  default(if %is_first_sim% then
            next(leg(chain), %is_second_sim%)
          else
            prev(leg(chain), %is_first_sim%),
          false);

export %has_sim_exception% = false;
export %sim_comp_exc%(Int pos) = 0;
%sim_brief_exc% = 0:00;
%sim_midbrief_exc% = 0:00;
%sim_debrief_exc% = 0:00;
%sim_is_multi_exc% = false;

%_sim_type_str_default% =
    concat(if %sim_type_is_multi% then "2x" else "",
           format_time(%time%, "%Hh%02M"),
           " ", %group_code%);

%sim_type_str% =
  if %has_sim_exception% then
    %_sim_type_str_default%
  else
    default(%_sim_type_str%, %_sim_type_str_default%);

export %sim_type% =
    if %is_valid_sim% then
        %sim_type_str%
    else void_string;

export %is_2x2h_opc% =
    %group_code% = "OPC" and %time% = 2:00;

%duty_has_multisim% = count(leg(duty)) where (%is_simulator%) = 2;

table pc_opc_composition(String qual) =
    %group_code%, %time%, qual, %start_utc% ->
    Bool %_two_fc_sim%,
    Bool %_pc_limit%,
    String %_fbr_req%;
    external %pc_opc_composition_table%;
    simtype_grp, simtype_legtime, qual, (validfrom, validto( -> twofcsim, pclimit, allowedlower;
    -, -, -, - -> void_bool, void_bool, void_string;
end

export %pc_opc_intended_for_two_fc% =
  %_pc_opc_intended_for_two_fc%;

/*
** NB! 2x2:00 simulator passes are now used for both FC+FP and FC+FC passes, but.
** 'twofcsim' is not set for them in table pc_opc_composition
** The FC+FC passes are assigned as simulator exceptions, with crew need
** showing FC = 2, so this variable is modified to check also for any exception
*/

%_pc_opc_intended_for_two_fc% =
  default(%_two_fc_sim%(%qual_new%),  default(%_two_fc_sim%("*"), false)) or
  (leg.%has_sim_exception% and
   leg.%sim_comp_exc%(1) = 2);

/*
** NB! 2x2:00 simulator passes are now used for both FC+FP and FC+FC passes, but
** 'pclimit' is not set for them in table pc_opc_composition
** FC+FC passes can only be PC+OPC or OPC+OPC, but FC+FP passes can be any
** combination of PC and OPC, so it is only FC+FC that has a requirement for
** minimum 1 pilot on OPC.
** This variable is therefore modified to check %_pc_opc_intended_for_two_fc%,
** instead of checking 'pclimit'.
*/

export %min_reqd_crew_on_opc% =
  if %pc_opc_intended_for_two_fc% then
    1
  else
    0;

export %lower_rank_allowed% =
    default(%_fbr_req%(%qual%),  default(%_fbr_req%("*"), "ALL"));

%prev_leg_same_sim_type% =
  let sim_type = %sim_type_str%;
  default(prev(leg(chain), sim_type = %sim_type_str%), false);

%next_leg_same_sim_type% =
  let sim_type = %sim_type_str%;
  default(next(leg(chain), sim_type = %sim_type_str%), false);

export %is_first_sim% =
  if %sim_type_is_multi% and %prev_leg_same_sim_type% then
    /* Only if this is a two-parted sim, and the previous leg is the same
       simtype can this be something other than the first sim */
    /* This sim must be odd, based on number of identical sims in trip */
    not %is_even_sim%
  else
    true;

%is_second_sim% =
  if %sim_type_is_multi% and %prev_leg_same_sim_type% then
    /* Only if this is a two-parted sim, and the previous leg is the same
       simtype can this be the second sim */
    %is_even_sim%
  else
    false;

%is_last_sim% =
  if %sim_type_is_multi% and %next_leg_same_sim_type% then
    /* Only if this is a two-parted sim, and the next leg is the same
       simtype can this be something other than the last sim */
    /* This sim must be even, based on number of identical sims in trip */
    %is_even_sim%
  else
    true;

export %check_in_default_sim_gd% =
    if %is_first_sim% then %sim_brief% + %ci_sim_supervis%
    else if %is_second_sim% then %sim_midbrief%
    else 0:00;

export %check_out_default_sim_gd% =
    if %is_last_sim% then %sim_debrief% + %co_sim_supervis%
    else 0:00;

/* To be redefined for crew */
%ci_sim_supervis% = 0:00;
%co_sim_supervis% = 0:00;

table simulator_briefings(String qual) =
    %group_code%, %time%, qual, %start_utc% ->
    reltime %_sim_brief%,
    reltime %_sim_midbrief%,
    reltime %_sim_debrief%;
    external %simulator_briefings_table%;
    simtype_grp, simtype_legtime, qual, (validfrom, validto( -> brief, midbrief, debrief;
    -, -, -, - -> void_reltime, void_reltime, void_reltime;
end
%sim_brief% =
  if %is_valid_sim% then
    if %has_sim_exception% then
      default(%sim_brief_exc%, default(%_sim_brief%(%qual%),  default(%_sim_brief%("*"), 0:00)))
    else
      default(%_sim_brief%(%qual%),  default(%_sim_brief%("*"), 0:00))
  else void_reltime;
%sim_midbrief% =
  if %is_valid_sim% then
    if %has_sim_exception% then
      default(%sim_midbrief_exc%, default(%_sim_midbrief%(%qual%),  default(%_sim_midbrief%("*"), 0:00)))
    else
      default(%_sim_midbrief%(%qual%),  default(%_sim_midbrief%("*"), 0:00))
  else void_reltime;
%sim_debrief% =
  if %is_valid_sim% then
    if %has_sim_exception% then
      default(%sim_debrief_exc%, default(%_sim_debrief%(%qual%),  default(%_sim_debrief%("*"), 0:00)))
    else
      default(%_sim_debrief%(%qual%),  default(%_sim_debrief%("*"), 0:00))
  else void_reltime;

/*******************************************************************************
*******************************************************************************/

/*
** Allowed as deadhead
*/
export %is_allowed_as_dh% =
  not %is_charter%;
/*  parameter true
  remark "Allow all legs as deadheads (mapped to map_leg_allowed_as_deadhead)";*/

export %is_assigned_to_crr% =
  booked_crew_position_1 > 0 or
  booked_crew_position_2 > 0 or
  booked_crew_position_3 > 0 or
  booked_crew_position_4 > 0 or
  booked_crew_position_5 > 0 or
  booked_crew_position_6 > 0 or
  booked_crew_position_7 > 0 or
  booked_crew_position_8 > 0 or
  booked_crew_position_9 > 0 or
  booked_crew_position_10 > 0 or
  booked_crew_position_11 > 0 or
  booked_crew_position_12 > 0;

/*
** Unregular production
** Flight carrier and flight number is void for ground tasks and PACTS.
*/
export %is_test_flight% =
  %is_flight_duty% and %test_flight%;
export %is_school_flight% =
  %is_flight_duty% and %school_flight%;
export %is_school_flight_not_homebase% =
  %is_school_flight% and not %arrives_at_homebase%;
export %is_charter% =
  %is_flight_duty% and
  (%is_charter_flight% or default(service_type, "") = "C");

export %is_charter_all% =
  %is_flight_duty% and
  (%is_charter_flight% or default(service_type, "") = "C" or
   default(service_type, "") = "P");

export %is_ferry_flight% =
  %is_flight_duty% and %ferry_flight%;

%test_flight% =
  service_type = "T";

table school_flight =
  %flight_carrier% = "SK" or
  %flight_carrier% = "OD",
  %flight_nr% -> bool %school_flight%;
  y, >= 9160 and <= 9169 -> true; /* Denmark */
  y, >= 9180 and <= 9189 -> true; /* Sweden  */
  y, >= 9260 and <= 9269 -> true; /* Norway  */
  y, >= 9280 and <= 9289 -> true; /* Int     */
  -, - -> false;
end

/*
** NB! Flight numbers in charter series but with service type = "P" are
** charter positioning flights, not charter passenger flights!
*/
table charter_flight =
  %flight_carrier% = "SK" or
  %flight_carrier% = "OD",
  %flight_nr%,
  %ferry_flight% -> %is_charter_flight%,
                    export %is_charter_ferry_flight%;
  y, >= 7001 and <= 7199, n -> true, false; /* charter adhoc  */
  y, >= 7001 and <= 7199, y -> false, true; /* charter adhoc ferry */
  y, >= 7300 and <= 7979, n -> true, false; /* charter series */
  y, >= 7300 and <= 7979, y -> false, true; /* charter series ferry */
  -, -, - -> false,false;
end

%ferry_flight% =
  service_type = "P" or service_type = "A"; 

/* Defined here as it is used in several modules, HenrikA 22mar07
 * Agreement: CAU K06 L. */
export %is_long_haul_charter_skd% =
  %is_charter% and
  %is_long_haul% and
  %block_time% < 6:00 and
  abs(%start_time_zone% - %end_time_zone%) < 4:00;

/****************************************************************
 * Section 1: Per Diem definitions & rules
 * Per Diem always reported in 1/4
 ***************************************************************/

/* Meal stop definition. Redefined for rostering and tracking in leg_ccr. */
export %meal_stop% = default(%connection_time% >= %meal_connection_time%, false);

%perdiem_entitled_meal% = %meal_stop%;

/* Used for pairing. Also defined in meal. */
table meal_stop_table =
  %cabin_crew%, %trip_homebase% ->
    %meal_connection_time%;
  false, - -> 1:45;
  true, "CPH" -> 1:30;
  true, "OSL" -> 1:30;
  true, "SVG" -> 1:20;
  true, "SVD" -> 1:20;
  true, "STO" -> 1:30;
  -, - -> void_reltime;
end

/* Meal stop start UTC. */
%meal_stop_start% = %end_od_utc%;

/* Total assigned crew. */
/* NB! Already defined in crew_pos, HenrikA 24-Feb-2006 */
export %assigned_crew_amount% =
  assigned_crew_position_1
  + assigned_crew_position_2
  + assigned_crew_position_3
  + assigned_crew_position_4
  + assigned_crew_position_5
  + assigned_crew_position_6
  + assigned_crew_position_7
  + assigned_crew_position_8
  + assigned_crew_position_9
  + assigned_crew_position_10
  + assigned_crew_position_11
  + assigned_crew_position_12;

/* Current stop city. */
export %stop_country% = arrival_airport_country;

/* Flight per diem defintion */
export %region_on_loan_to_at_date%(Abstime date) =
  if crew_contract.%is_on_long_term_loan_at_date%(date) then
    crew_contract.%region_at_date%(date)
  else
    %employer_region%;

%_flight_per_diem% = %is_flight_duty% or
      %is_ground_transport% or
      %_is_sby_entitled_to_per_diem% or
      %_is_waiting_entitled_to_per_diem% or
      default(%is_school_flight_not_homebase%, false) or
      %is_simulator_not_homebase%;

export %flight_per_diem% =
  if %is_deadhead% and %is_passive_plus% and is_first(leg(trip)) then
     fundamental.%region_at_base%(fundamental.%station2base%(%end_station%)) <>
     %region_on_loan_to_at_date%(%start_date%)
  else if %is_deadhead% and %is_passive_plus% and is_last(leg(trip)) then
     fundamental.%region_at_base%(fundamental.%station2base%(%start_station%)) <>
     %region_on_loan_to_at_date%(%end_date%)
  else
      %_flight_per_diem%;

/*count number of legs in a trip */
%num_of_leg_in_trip% = count(leg(trip));

/*Checking if there is only ASB in complete trip */
%is_single_sby_entitled_to_perdiem%=
  if %num_of_leg_in_trip% = 1 and %is_standby_at_airport% and
  %end_UTC% - %activity_scheduled_start_time_utc% > 04:00 then 
  true
  else 
  false;

/* Changed the condition for not including ASB if it is first activity of a trip followed by other production. It was requested in SKPROJ-524*/
%_is_sby_entitled_to_per_diem% =
  (%is_standby_at_airport% and not %is_first_in_duty% and 
  ((%is_SKN% or %is_SKS% or %is_SKD%) and (%flight_crew% or %cabin_crew%))) or %is_single_sby_entitled_to_perdiem%;

%_is_waiting_entitled_to_per_diem% =
  %is_waiting% and not %is_first_in_duty% and 
  ((%is_SKN% or %is_SKS% or %is_SKD%) and (%flight_crew% or %cabin_crew%));

/* Course per diem definition */
export %course_per_diem% =
  (task.%is_training%(%code%) or
   task.%is_recurrent%(%code%) or
   (task.%is_ground_activity%(%code%) and not (%code% = "GD"))) and
  %departure_airport_base% <> %homebase%;

export %course_per_diem_SVS% =
  (task.%is_training%(%code%) or
   task.%is_recurrent%(%code%) or
   (task.%is_ground_activity%(%code%))) and
  %departure_airport_base% <> %homebase%;

/* Any kind of per diem */
export %is_per_diem% =
if %is_SVS% then
  %flight_per_diem% or %course_per_diem_SVS%
    else
    %flight_per_diem% or %course_per_diem%;

%flight_per_diem_tax% =
    if %is_deadhead% and %is_passive_plus% and (is_first(leg(trip)) or is_last(leg(trip))) then
        True
    else
      %_flight_per_diem%;

export %is_per_diem_tax% = %flight_per_diem_tax% or %course_per_diem%;



/* Gives the meal reduction for the trip */
export %per_diem_meal_reduction% =
  %is_active_flight% and %is_long_haul% and %time% >= 5:00;

/* Is leg entitled per diem */
export %per_diem_entitled% =
  default(%perdiem_entitled_meal% and %_flight_is_not_SKI%, false) and %is_per_diem%;

%_flight_is_not_SKI% =
  let region = default(%flight_owner_region%, %homebase_region%);
  default(region <> "SKI", true);

/* Amount Per Diem in 1/4. redefined in leg_ccr*/
export %per_diem_assigned_crew_amount% = %assigned_crew_amount%;

export %per_diem_amount% =
  let
    per_diem_entitled = %per_diem_entitled%;
  if per_diem_entitled then
    %per_diem_meal_stop% * %per_diem_assigned_crew_amount%
  else
    0;

export %per_diem_start_UTC% = %_per_diem_start_time_UTC%(false);
export %per_diem_end_UTC% = %_per_diem_end_time_UTC%(false);
export %per_diem_start_UTC_tax% = %_per_diem_start_time_UTC%(true);
export %per_diem_end_UTC_tax% = %_per_diem_end_time_UTC%(true);

%_per_diem_start_time_UTC%(bool taxrules) =
    %activity_scheduled_start_time_utc% - %per_diem_check_in%;

%_per_diem_end_time_UTC%(bool taxrules) =
  %end_UTC% + %per_diem_check_out%;

export %per_diem_scheduled_end_UTC% =
  %activity_scheduled_end_time_utc% + %per_diem_check_out%;
export %per_diem_start_lt% =
  %activity_start_time_lt% - %per_diem_check_in%;
export %per_diem_end_lt% =
  %activity_end_time_lt% + %per_diem_check_out%;
export %per_diem_start_hb% =
  %activity_start_time_hb% - %per_diem_check_in%;

export %per_diem_check_in% =
/*Vazquez, Sep08, WP 458: if leg is standby at airport,
  then the per diem check in is not added*/
  if %is_standby_at_airport% or %is_waiting% then
    0:00
  else if %is_active_flight% and %is_passive_plus% then
    %check_in%
  else if %is_simulator% and %is_passive_plus% and
          prev(leg(trip), is_first(leg(trip)) and %is_deadhead%) then
    %check_in%
  else if %fdp__FD_NO_without_ASB% then
    %checkin_base_time_diff%
  else if %check_flight_LH_NO_CC_FD% then
    1:30
    else 1:00;

export %checkin_base_time_diff% = %activity_scheduled_start_time_utc% - %ci_start_utc%;
/*checking Flight duty for NO without standby Airport */
export %fdp__FD_NO_without_ASB% = 
if any(leg(trip), %is_standby_at_airport%) then 
false
else if %is_skn% and  fundamental.%main_cat% = "F" then
true
else
false;

/*checking longhaul Flight for NO for CC and FD */
export %check_flight_LH_NO_CC_FD% = 
if %is_skn% then
  if %is_long_haul% then
    true
  else
    false
else
false;   

export %per_diem_check_out% =
  if %is_standby_at_airport% or %is_waiting% then
    0:00
  else if %is_active_flight% and %is_passive_plus% then
    %check_out%
  else if %is_simulator% and %is_passive_plus% and
          next(leg(trip), is_last(leg(trip)) and %is_deadhead%) then
    %check_out%
  else
    0:30;

/* Per Diem calculation table. Per diem amount in percent */
table per_diem_meal_stop =
  %meal_stop_start% -> export int %per_diem_meal_stop%;

  >= 5:31 and <= 14:00  -> 1;
  >= 14:01 and <= 21:00 -> 2;
  -                     -> %per_diem_long_stop%;
end

/* For stops at night over 5h */
%per_diem_long_stop% =
  if %per_diem_connection_time% >= 5:00 then
    per_diem.%per_diem_amount%(default(%per_diem_connection_time%, 0:00), %cabin_crew%, %is_SKN%, %end_UTC%)
  else
    0;

export %is_nightstop% =
  %has_check_out% and (next(leg(trip), %ci_start_lt%) - %co_end_lt%) > 5:00 and
  scale_time(%co_end_lt%, next(leg(trip), %ci_start_lt%), 0,
             01:59, 2:01, 1) > 0:01;

/*
** Tasks
**
** A task can contribute to block/credit/duty by:
**   - a fixed value per day: > 0:00
**   - nothing: 0:00
**   - scaled according to length < 0:00
**
** For performance reasons should tasks (pacts) be as
** long as possible, but those with scaled contributions
** are not safe to split or merge.
*/

/* %is_flight_duty% is true for active flights, DH, OAG and ground transport */
export %category_code% = task.%category_code%;
export %group_code_description% =
  if %is_flight_duty% then "FLT - Flight duty"
  else task.%group_code_description%;
export %group_code% = task.%group_code%;
export %code% = task.%code%;
export %activity_allowed% =
  task.%activity_valid_at_date%(leg.%code%, leg.%start_hb%);

export %safe_to_split_merge% =
  %end_lt% - %start_lt% > 23:58;
/*  %task_block_time% >= 0:00 and
  %task_duty_time% >= 0:00 and
  %task_credit_time% >= 0:00; */

export %task_block_time% = task.%block_time%(%code%);
export %task_duty_time% = task.%duty_time%(%code%);

/*
** Duty pass definitions
**
** A Duty pass is almost its own level, it is currently modelled at leg level
** but might be moved to its own level.
**
*/

/* Leg dependant */
export %duty_start_utc% =
  if flight_duty or not flight_duty
  then first(leg(duty), %ci_start_utc%)
  else 1Jan1901;
export %duty_start_hb% = %duty_start_utc% + %homebase_tz_corrector%;
export %duty_start_lt% = %duty_start_utc% + %localtime_tz_corrector%;

export %duty_departure_utc% =
  if flight_duty or not flight_duty
  then first(leg(duty), %activity_scheduled_start_time_utc%)
  else 1Jan1901;

export %duty_end_block_utc% =
  if flight_duty or not flight_duty
  then last(leg(duty), %end_utc%)
  else 1Jan1901;

export %duty_arrival_utc% =
  if flight_duty or not flight_duty
  then last(leg(duty), %activity_scheduled_end_time_utc%)
  else 1Jan1901;

export %duty_end_utc% =
  if flight_duty or not flight_duty
  then last(leg(duty), %co_end_utc%)
  else 1Jan1901;
export %duty_end_hb% = %duty_end_utc% + %homebase_tz_corrector_end%;
export %duty_end_lt% = %duty_end_utc% + %localtime_tz_corrector_end%;

export %duty_end_scheduled_utc% =
  if flight_duty or not flight_duty
  then last(leg(duty), %co_end_scheduled_utc%)
  else 1Jan1901;
export %duty_end_scheduled_hb% = %duty_end_scheduled_utc% + %homebase_tz_corrector_end%;
export %duty_end_scheduled_lt% = %duty_end_scheduled_utc% + %localtime_tz_corrector_end%;

%duty_start_date% = round_down(%duty_start_hb%, 24:00);
%duty_end_date% = round_down(%duty_end_hb% - 00:01, 24:00);
export %duty_cross_midnight% =
  %duty_start_date% <> %duty_end_date%;

/*
 * Check-in/Check-out - Briefing/Debriefing
 * Freeze/Set times on the leg that *has* check-in/check-out.
 */
export %duty_brief_start_utc% =
  if flight_duty or not flight_duty
  then first(leg(duty), %ci_start_utc%) where(%has_check_in%)
  else void_abstime;
export %duty_brief_start_lt% = %duty_brief_start_utc% + %localtime_tz_corrector%;

export %duty_debrief_end_utc% =
  if flight_duty or not flight_duty
  then last(leg(duty), %co_end_utc%) where(%has_check_out%)
  else void_abstime;
export %duty_debrief_end_scheduled_lt% =
  if flight_duty or not flight_duty
  then last(leg(duty), %co_end_scheduled_lt%) where(%has_check_out%)
  else void_abstime;

/*
** These variables are valid for the first and last activity with check-in/out
** in a duty. They can, however, be evaluated for any leg. For all legs the
** check-in/out times are evaluated as if the leg had been first/last in the
** duty.
**
** According to the collective agreement definitions:
** <duty start> = <scheduled start> - <check_in time>.
** <duty end> = <actual (or most known) last landing> + <check_out time>.
*/
export %ci_start_utc% =
    if %_use_default_ci_start% then
        %ci_default_start_utc%
    else
        %activity_scheduled_start_time_utc% - %check_in%;

export %ci_default_start_utc% = %activity_updated_scheduled_start_time_utc% - %check_in_default%;
export %ci_orig_default_start_utc% = %activity_scheduled_start_time_utc% - %check_in_default%;
%_use_default_ci_start% = false;
export %ci_default_start_hb% = %ci_default_start_utc% + %homebase_tz_corrector%;
export %ci_start_hb% = %ci_start_utc% + %homebase_tz_corrector%;
export %ci_start_lt% = station_localtime(departure_airport_name, %ci_start_utc%);

export %ci_start_uptodate_utc% = %start_utc% - %check_in%;
export %ci_start_uptodate_hb% =
  %ci_start_uptodate_utc% + %homebase_tz_corrector%;
export %ci_start_uptodate_lt% =
  %ci_start_uptodate_utc% + %localtime_tz_corrector%;

export %co_end_utc% = %end_utc% + %check_out%;
export %co_end_hb% = %co_end_utc% + %homebase_tz_corrector_end%;
export %co_end_lt% = station_localtime(arrival_airport_name, %co_end_utc%);

export %co_end_scheduled_utc% =
  %activity_scheduled_end_time_utc% + %check_out_scheduled%;
export %co_end_scheduled_hb% =
  %co_end_scheduled_utc% + %homebase_tz_corrector_end%;
export %co_end_scheduled_lt% =
  %co_end_scheduled_utc% + %localtime_tz_corrector_end%;

/* Private Passive*/
export %ci_start_utc_private% =
  if %is_private_passive% then
    %activity_private_passive_original_start_utc% - %check_in%
  else
    %ci_start_utc%;

export %co_end_utc_private% =
  %activity_private_passive_original_actual_end_utc% + %check_out%;

export %co_end_scheduled_utc_private%  =
  %activity_private_passive_original_end_utc% + %check_out_scheduled%;
/*
** Rest time
*/
export %rest_start_utc% = %duty_end_utc%;
export %rest_end_utc% =
  next(leg(trip), %ci_start_utc%)
  where(%is_first_in_duty% and not %is_rest%);

%rest_end_UTC_incl_bought% =
  next(leg(trip), %ci_start_utc%)
  where(%is_first_in_duty% and not %is_rest% and not %is_bought%);

/* Default is set to 36:00 to avoid rest illegalities on single LH legs where
   very long rest can be required due to double slipping (2*block time + tz difference)
   JC 071127 */
export %rest_time% = default(%rest_end_UTC% - %rest_start_UTC%, 900:00);
export %rest_time_scheduled% = default(%rest_end_UTC% - %rest_start_UTC% + %end_delay%, 900:00);
export %rest_time_incl_bought% = default(%rest_end_UTC_incl_bought% - %rest_start_UTC%, 900:00);
export %rest_time_incl_bought_scheduled% = default(%rest_end_UTC_incl_bought% - %rest_start_UTC% + %end_delay%, 900:00);
export %rest_start_hb% = %duty_end_hb%;
export %rest_end_hb% = %rest_start_hb% + %rest_time%;
export %rest_start_lt% = %duty_end_lt%;
export %rest_end_lt% = %rest_start_lt% + %rest_time%;

export %is_rest% = task.%is_rest%(%group_code%) and not (%code% = "W");

/*
** Block time
*/
/* Should only be used for block time calculations ???, HenrikA 06-Dec-2005 */
export %days% = nmax(0, 1+ (%end_hb% - %start_hb% - 0:01) / 24:00);
%pp_days% = %days_in_period%(%pp_start%,%pp_end%);
export %days_in_period%(Abstime a1,Abstime a2) =
  let   start = nmax(a1 + %start_od%,%start_hb%),
        stop = nmin(a2 + %end_od%, %end_hb%);

  nmax(0, (stop - start + 23:59) / 24:00);

export %consider_calculated_sb_block_time% = parameter True remark "Consider SB block time";

export %block_time% =
  if  %is_flight_duty% or
      %is_ground_transport% or
      task.%block_time%(%code%) < 0:00 then
      %_block_time%
  else if %consider_calculated_sb_block_time% then
    %sb_block%
  else if parameters.%consider_sb_line_default_block_time% then
    %sb_line_block%
  else
    %days% * task.%block_time%(%code%);

%_block_time% =
  if not %is_deadhead% then
    %time%
  else
    0:00;

export %block_time_scheduled% =
  if  %is_flight_duty% or
      %is_ground_transport% or
      task.%block_time%(%code%) < 0:00 then
      %_block_time_scheduled%
/*  else if %has_sb_block_time_override% then
    %sb_block%*/
  else
    %days% * task.%block_time%(%code%);

%_block_time_scheduled% =
  if not %is_deadhead% then
    %activity_scheduled_end_time_UTC% - %activity_scheduled_start_time_UTC%
  else
    0:00;

export %block_time_in_period%(Abstime a1, Abstime a2) =
  if  %is_flight_duty% or
      %is_ground_transport% or
      task.%block_time%(%code%) < 0:00 then
    %_block_time_in_period%(a1, a2)
  else if %consider_calculated_sb_block_time% then
    %sb_block%
  else if parameters.%consider_sb_line_default_block_time% then
    %sb_line_block%
  else
    %days_in_period%(a1,a2) * task.%block_time%(%code%);

%_block_time_in_period%(Abstime a1, Abstime a2) =
  if not %is_deadhead% then
    overlap(a1,a2,%start_UTC%, %end_UTC%)
  else
    0:00;

export %time_in_period%(Abstime a1, Abstime a2) =
  overlap(a1,a2,%start_hb%,%end_hb%);
export %time_in_period_utc%(Abstime a1, Abstime a2) =
  overlap(a1,a2,%start_utc%,%end_utc%);

/*
** Duty time
*/
export %homebase_tz_corrector% = %start_hb% - %start_utc%;
export %homebase_tz_corrector_end% = %end_hb% - %end_utc%;
export %localtime_tz_corrector% = %start_lt% - %start_utc%;
export %localtime_tz_corrector_end% = %end_lt% - %end_utc%;
export %night_upg_factor% = 3;
export %night_upg_start% = 22:00 - %homebase_tz_corrector%;
/* Special case for FCLH flying european production */
export %night_upg_end% =
  (if  %flight_crew% and
      %with_long_haul_ac% and
      %is_european%
  then
    08:00
  else
    06:00) -
  %homebase_tz_corrector%;

export %preceded_by_minimum_rest% = %rest_time% >= 14:00;
export %preceded_by_minimum_rest_scheduled% = %preceded_by_minimum_rest%;

/* The difference in duty time for a standby, compared to "normal" duty time. This
   is used to correct duty time calculation */

export %duty_time_standby_rest_reduction%(Bool night_upg) =
  if %is_standby_with_rest% then
   %_standby_duty_time_replacement%(night_upg)
    -(100-%standby_reduced_factor%) * %standby_duty_time_before_factor% / 100
  else 0:00;

export %duty_time_standby_rest_reduction_scheduled%(Bool night_upg) =
  %duty_time_standby_rest_reduction%(night_upg);

export %duty_time_standby_rest_reduction_in_period%(AbsTime a1, AbsTime a2, Bool night_upg) =
  let st = leg.%start_utc%,
      et = leg.%end_utc% + (if %is_standby_callout% then %standby_legext% else 0:00);
  if a2 < st or a1 > et or a2 <= a1 or not %is_standby_with_rest% then
    0:00
  else if a1 <= st and a2 >= et then
    %duty_time_standby_rest_reduction%(night_upg)
  else /* Scale linearly with time */
    (%duty_time_standby_rest_reduction%(night_upg) / 0:01)
    * overlap(st,et,a1,a2) / (et-st)
    * 0:01;

export %duty_time_standby_rest_reduction_in_period_scheduled%(AbsTime a1, AbsTime a2, Bool night_upg) =
  %duty_time_standby_rest_reduction_in_period%(a1, a2, night_upg);

/* The time from start of standby to check-in of the first flight duty */
%_standby_end_to_ci% =
   (if %is_standby_callout% then %standby_legext% else 0:00);

%_standby_start_to_ci% =
  %time% + %_standby_end_to_ci%;

/* How much duty time to remove and replace with reduced duty time */
%_standby_duty_time_replacement%(Bool night_upg) =
  let st = leg.%start_utc%,
      et = leg.%end_utc% + (if %is_standby_callout% then %standby_legext% else 0:00);
  if night_upg then
    %reltime_round_off%(
      scale_time(st, et, %night_upg_factor%,%night_upg_start%, %night_upg_end%, %night_upg_factor% +1),
      %night_upg_factor%)
  else
    et - st;

%standby_legext% =
  if %is_last_in_duty%
  then 0:00
  else %_connection_to_check_in%;

/* Time to check in of next activity. */
%_connection_to_check_in% =
  default(next(leg(duty), %ci_start_utc%) - %end_utc%, 0:00);
%_connection_to_block_off% =
  default(next(leg(duty), %activity_scheduled_start_time_utc%) - %end_utc% , 0:00);

/* 5h connection time gives no duty time from callout */
%_standby_callout_connection_time% = if %is_skd% then %_connection_to_block_off% else %_connection_to_check_in%;

/* How and when to calculate duty time for a standby. If zero, no duty time
   at all is given. This is multiplied by the appropriate standby reduction
   factor later. */
table standby_duty_time =
  %is_standby_callout%, fundamental.%main_cat%, %_standby_callout_connection_time%>5:00, %region%
    -> %standby_duty_time_before_factor%;
  /*CallOut   Cat    Conn>5h  Region  ->

  /* No callout -- count entire standby (FC -4:00) */
  false,      "F"  , -     , -     -> nmax(%time%-4:00, 0:00);
  false,      "C"  , -     , -     -> %time%;
  /* If >5:00 between callout and blockoff. Only count until callout */
  true ,      "F"  , true  , -     -> nmax(%time%-4:00, 0:00);
  true ,      "C"  , true  , -     -> %time%;
  /* Standby callout with <= 5:00 between callout and blockoff */
  true ,      "F"  , false , -     -> nmax(%_standby_start_to_ci%-4:00, 0:00);
  true ,      "C"  , false , "SKD" -> if %_standby_start_to_ci% > 4:00 then %_standby_start_to_ci% else 0:00;
  true ,      "C"  , false , "SKS" -> if %time% > 4:00 then %_standby_start_to_ci% else %_standby_end_to_ci%;
  true ,      "C"  , false , "SKN" -> %_standby_start_to_ci%;
  true ,      "C"  , false , "SVS" -> %_standby_start_to_ci%;
  true ,      "C"  , false , "SKJ" -> %time%;
  true ,      "C"  , false , "SKK" -> %time%;
 -    ,      -    , -     , -     -> 0:00;
end

/* Sep08, Vazquez_H: agreement CC CAU C.1.1.e, FC K04/05 page 1:16 2.2.d.1
   Diferent standby reducing times depending on the type of standby */
table standby_reduced_factor =
  %cabin_crew%, %region%, %is_standby_at_home%, %is_standby_at_hotel%,
  %is_standby_line%
    -> %standby_reduced_factor%;
  /* Standby lines (long-haul) */
  true,      -,     -,    -,   true -> 75;
  false,     -,     -,    -,   true -> 50;
  /* Standby (home) */
  false,     -,  true, false, false -> 50;
   true, "SKD",  true, false, false -> 30;
   true, "SKN",  true, false, false -> 30;
   true, "SKS",  true, false, false -> 30;
   true, "SKJ",  true, false, false ->  0;
   true, "SKK",  true, false, false ->  0;

  /* Standby (hotel) */
  true,  "SKD", false,  true, false -> 70;
  true,  "SKS", false,  true, false -> 50;
  true,  "SKN", false,  true, false -> 75;
  true,  "SKJ", false,  true, false ->  0;
  true,  "SKK", false,  true, false ->  0;
  false,     -, false,  true, false -> 50;

     -,     -,     -,    -,  - -> 30;
end

/*
 * These definitions below are probably not needed in SAS CMS
 */

/*
** Deadhead time
*/
/* Is this needed, HenrikA 06-Dec-2005 */
export %deadhead_time% =
  if %is_deadhead% then
    %end_hb% - %start_hb%
  else
  0:00;


/*
 * Tail ID (defined in leg_cct).
 */
export %tail_id% = void_string;
export %ac_reg% = void_string;

/*********************************************************************
 * 6. Publish/rescheduling
 *********************************************************************/

export %published_time% = void_abstime;


/*********************************************************************
 * Mappings from code to ac qual
 ********************************************************************/

export %sim_leg_qual% =
    if %standby_code_with_qualification% or %is_simulator% then
        %ac_qual_map%(%code%, %departure_airport_base%)
    else "";

export %gd_leg_fam% =
    if %standby_code_with_qualification% or %is_simulator% then
        %ac_fam_map%(%code%)
    else "";

export %ac_fam_map%(String code) =
    %_ac_fam_map%(code, "");

table ground_duty_code_acqual_map(String code, String location) =
  %map_code%(code) -> %_ac_fam_map%, export %ac_qual_map%;
  "0" -> "MD90", "M0";
  "1" -> "EMJ", "EJ";
  "2" -> "A320", "A2";
  "3" -> "B737", "38";
  "4" -> "A340", "A4";
  "5" -> "A350", "A5";
  "6" -> "A330", "A3";
  "7" -> "CRJ", "CJ"; /* Used to be Q400 */
  "8" -> "MD80", "M8";
  "9" -> "B737", "37";

  "10"-> "EMJ", "EJ";
  - -> "", ""; /* Nr 1 not used */
end

table ground_duty_acqual_code_map(String acqual) =
    acqual  ->  export %qual_code_map%;
    "36"    ->  "3";
    "37"    ->  "9";
    "38"    ->  "3";
    "A2"    ->  "2";
    "A3"    ->  "6";
    "A4"    ->  "4";
    "A5"    ->  "5";
    "CJ"    ->  "7";
    "F5"    ->  "5";
    "M8"    ->  "8";
    "M0"    ->  "0";/* Not used */
    "EJ"    ->  "1";
    /* "Q4"    ->  "7"; */ /* Not used */
    -       ->  "";
end

export %map_code%(String code) =
  substr(code, %first_nr_start_ix%(code), 1);

/* Start of the first number, e.g. Y3, CH4 etc.
   We need to handle S4, S44, CH4 and CH44.
   5 characters might happen, but the actype number should be in pos 2 or 3
   /EA */
export %first_nr_start_ix%(String code) =
  if substr(code, 2, 1) in numbers then 2
  else 3;

set numbers = "0", "1", "2", "3", "4", "5", "6", "7", "8", "9";

/* Used to identify the CMS standby codes, they are the only ones that might have
   qualification requirement encoded. Only CMS standby codes are 2 characters long
   and when they are 3 characters long the last character is always an 'S'.
   Thus R83 is a legacy code and should not be checked.
   R8S however, or R8 should be checked.
   Input will usually be leg.%code%, duty.%code% or trip.%code%. */
table sby_code_with_qualification =
  %is_standby% and not %is_standby_line%,
  length(%code%),
  locate("S", %code%) -> export %standby_code_with_qualification%;

  false, -, - -> false; /* All codes not being valid standby are caught here */

  true,  2, 2 -> false; /* Will catch 'RS', scattered standby without qualification,
                           the only case where a CMS standby code (not including
                           standby lines) is 2 characters but does not require a
                           qualification */
  &
  true,  2, - -> true;  /* All 2 character codes left when execution arrives here
                           are CMS standby codes with qualification */

  true,  3, 3 -> true;  /* All 3 character codes with the 3:rd character being 'S'
                           left when execution arrives here are CMS
                           scattered standby codes with qualification */

  -,     -, - -> false; /* Default */
end

/* Variables needed in both CCP and CCR */
export %is_ilc% = false;
export %is_lc% = false;
export %is_new_hire_follow_up% = false;        /* SKCMS-36 */
export %is_new_hire_follow_up_student% = false;        /* SKCMS-36 */
export %is_new_hire_follow_up_mentor% = false; /* SKCMS-36 */

export %is_recurrent% =
  task.%is_recurrent%(%code%);
export %is_illness% = false;
export %is_longterm_illness% = false;
export %is_loa_la12% = false;
export %is_unfit_for_flight_star% = false;

export %is_even% =
    (%leg_index% mod 2 = 0);

%leg_index% =
  let stop = %start_hb%;
  count(leg(trip))
  where (%is_active_flight%)
  while (%start_hb% <= stop);

%sim_index% =
  let stop = %start_utc%,
      start = %last_non_multisim%;
  count(leg(chain))
  where (%is_simulator% and %sim_type_is_multi% and %start_utc% > start)
  while (%start_utc% <= stop);

export %is_even_sim% =
    (%sim_index% mod 2 = 0);

%last_non_multisim% =
  default(prev(leg(chain), %end_utc%)
          where (not default(%sim_type_is_multi%, false)),
          fundamental.%plan_start%);

/*
** CR 174: Crew delayed at home
** The variable %frozen_estimated_block_off_time% contains a special
** frozen estimated block-off time that can be set from the Tracking
** GUI. If this variable voids, the default behavior will be used.
*/
export %frozen_estimated_block_off_time% = void_abstime;
export %has_frozen_estimated_block_off% = false;
export %activity_updated_scheduled_start_time_UTC% =
  %activity_scheduled_start_time_UTC%;

/*
** Private passive
** These variables are overridden in leg_ccr to consider
** private passive legs. Used for duty time calculation
** w.r.t salary.
*/

export %activity_private_passive_original_start_utc% =
  %activity_updated_scheduled_start_time_UTC%;
export %activity_private_passive_original_end_utc% =
  %activity_scheduled_end_time_UTC%;

export %activity_private_passive_original_actual_start_utc% =
  %start_UTC%;
export %activity_private_passive_original_actual_end_utc% =
  %end_UTC%;

/* Correct planned activity, should start and end at 00:00 HB time
** and be inside the the planing period.
*/
export %correct_planed_activity% =
    (not %is_rest% or
    (%start_utc% <> %start_date% or
     %end_utc% <> %end_date%)) or
    not %in_pp%;

/*
** Agreement validity
*/

export %k4exng_cc_sp5_1_valid%(Abstime start) =
  %agreement_valid%("K4ExNG_cc_sp5.1",start) and
  default(%cabin_crew%, true);




export %has_sb_block_time_override% =
    %consider_calculated_sb_block_time% and
    not void(%_sb_block%);

%_sb_block% =
    if void(%sb_qual_attr%) then
        fundamental.%_sb_block_no_qual%(%homeairport%, %code%, %start_utc%, %end_utc%, %sb_int_attr%)
    else
        fundamental.%_sb_block%(%homeairport%, %code%, %start_utc%, %end_utc%, %sb_qual_attr%, %sb_int_attr%);

export %sb_block% = 0:00;
export %sb_line_block% = 0:00;

export %sb_duty% =
    if void(%sb_qual_attr%) then
        fundamental.%_sb_duty_no_qual%(%homeairport%, %code%, %start_utc%, %end_utc%, %sb_int_attr%)
    else
        fundamental.%_sb_duty%(%homeairport%, %code%, %start_utc%, %end_utc%, %sb_qual_attr%, %sb_int_attr%);
export %sb_lookup_check% =
    if void(%sb_qual_attr%) then
        not void(fundamental.%sb_lookup_check_base_no_qual%(%homeairport%, %code%, %start_utc%, %end_utc%, %sb_int_attr%))
    else
        not void(fundamental.%sb_lookup_check_base%(%homeairport%, %code%, %start_utc%, %end_utc%, %sb_qual_attr%, %sb_int_attr%));
export %sb_special_station% =
    if void(%sb_qual_attr%) then
        fundamental.%_sb_special_station_no_qual%(%homeairport%, %code%, %start_utc%, %end_utc%, %sb_int_attr%)
    else
        fundamental.%_sb_special_station%(%homeairport%, %code%, %start_utc%, %end_utc%, %sb_qual_attr%, %sb_int_attr%);
export %sb_lookup_check_old% = not void(fundamental.%sb_lookup_check_base_old%(%homeairport%, %code%, %start_utc%, %end_utc%));

export %is_training% =
    task.%is_training%(%code%);

export %is_fdp_training% =
    task.%is_fdp_training%(%code%);


/* ground_uuid is only defined for gpc, and only returns the correct answer in
   database (at least in some cases).
   At export to file we save a mapping based on the activity values
   (code, start, end, etc.).
   In Sp6 and earlier, the mapping was based on crew, which wont work for ground
   tasks. To keep older fileplans working the old mapping is kept as
   %map_uuid_old%. /EA 100104
   */

/* Should be used in all new code. Will not work correctly for old fileplans, it
   will never use the old mapping */
export %uuid% = default(%map_uuid_new%,keywords.%ground_uuid%);

%ground_task_mappings% = "gnd_key_mappings";

table leg_uuid_from_mapping =
    %code%, %start_utc%, %end_utc%, %start_station% ->
      string %map_uuid_new%;
    external %ground_task_mappings%;
    code, st, et, adep -> uuid;
    -, -, -, -  -> void_string;
end

export %sb_qual_attr% =
  %ground_task_str%("QualType");

export %sb_int_attr% =
    1;

%ground_table_p% =
  parameter "ground_task_attr"
  remark "ETAB: Ground task attributes";

table ground_task_attr(String attr) =
  leg.%udor%, leg.%uuid%, attr  ->
    export String %ground_task_attr%,
    export RelTime %ground_task_rel%,
    export AbsTime %ground_task_abs%,
    export Int %ground_task_int%,
    export String %ground_task_str%,
    export String %ground_task_si%;
  external %ground_table_p%;
  task_udor, task_id, attr ->
    attr, value_rel, value_abs, value_int, value_str, si;
  -,-,- ->
    "", void_RelTime, void_AbsTime, void_Int, void_String, void_String;
end
/* end of file */
