/* -*- crc -*- 
 *
 * 
 *
 * Purpose:
 *   This module contains common training definitions for flight and cabin crew 
 *   used in Carmen Crew Rostering and as studio only Carmen Crew Tracking.
 *
 * Sections:
 * 1. Cabin ground training
 * 2. Recurrent training
 * 3. Initial/Conversion/Transition training
 * 4. Training log table lookups and variables
 * 5. Composition check
 * 6. Selects and Sorts
 * 7. Redefinitions of codes to display
 * 8. Logic for automatic PC/OPC assignment
 *
 *
 * Created by:
 *   Henrik Albertson, 13-Jun-2006
 *
 * Major changes:
 *
 */
root module training

import fundamental;
import base_product;
import base_utils;
import levels;
import crew_pos;
import model_crew;
import model_training;
import task;
import leg;
import trip;
import crew;
import accumulators;
import calendar;
import attributes;
import duty;
import recency;
import system_db_parameters;
import parameters;
import wop;
import pp;
import time_utils;
import keywords;


/****************************************************************
 * Section 1: Cabin ground training
 ***************************************************************/
%cabin_training_table% = %etab_path%(%cabin_training_table_p%);
%cabin_training_table_p% =
  parameter "cabin_training"
  remark "ETAB: Table defining training task types and valid ac quals";
  
%cabin_recurrent_table% = %etab_path%(%cabin_recurrent_table_p%);
%cabin_recurrent_table_p% =
  parameter "cabin_recurrent"
  remark "ETAB: Table defining recurrent code for ac qual combinations";

table cabin_recurrent_qual_table(String code) =
  leg.%departure_airport_base%, leg.%start_date%, code ->
    String %_rec_quals_by_code%;
  external %cabin_recurrent_table%;
  base, (validfrom, validto(, reccode -> acquals;
  -, -, - -> void_string;
end

table cabin_recurrent_code_table(String quals) =
  leg.%departure_airport_base%, leg.%start_date%, quals ->
    String %_rec_code_by_quals%;
  external %cabin_recurrent_table%;
  base, (validfrom, validto(, acquals -> reccode;
  -, -, - -> void_string;
end

%_leg_code_suffix% =
  substr(leg.%code%, 3, 2);
  
%_rec_code% =
  if length(leg.%code%) = 2 then
    %_rec_code_by_quals%(crew.%ac_qln_string_leg_start%)
  else %_leg_code_suffix%;
  
%rec_code% =
  default(%_rec_code%, "XX");
  
%_rec_quals% =
  if length(leg.%code%) = 2 then
    crew.%ac_qln_string_leg_start%
  else 
    %_rec_quals_by_code%(%_leg_code_suffix%);

export %rec_quals% =
  default(%_rec_quals%, "-");

table training_type_table(String taskcode, Abstime date) =
  taskcode, date ->
    String %_training_is_of_type%,
    String %_training_is_for_quals%;
  external %cabin_training_table%;
  taskcode, (validfrom, validto( -> typ, qualgroup;
  -, - -> void_string, void_string;
end

export %leg_is_for_quals% =
    let quals = default(%_training_is_for_quals%(leg.%code%, leg.%start_lt%), "N/A");
    if quals = "ANY" then "" else quals;

%leg_is_of_type_for_qual%(String typ, String qual) =
    let quals = default(%_training_is_for_quals%(leg.%code%, leg.%start_lt%), "-");
    (qual = "" or quals = "ANY" or locate(qual, quals) > 0) and
    default(%_training_is_of_type%(leg.%code%, leg.%start_lt%) = typ, false);
    
export %leg_is_cabin_training% =
    not void(%_training_is_of_type%(leg.%code%, leg.%start_utc%));
export %leg_is_cra% =
    %leg_is_of_type_for_qual%("CRA", "");
export %leg_is_crb% =
    %leg_is_of_type_for_qual%("CRB", "");
export %leg_is_recref% =
    %leg_is_of_type_for_qual%("REC REF", "");
export %leg_is_conv% =
    %leg_is_of_type_for_qual%("CONV", "");
export %leg_is_ref% =
    %leg_is_of_type_for_qual%("REF", "");
    
export %trip_is_cabin_training% =
    any(leg(trip), %leg_is_cabin_training%);
    
/* Some activities are valid as recurrent doc creators /EKG 090115 */
export %leg_creates_rec% =
    %leg_is_cra% or %leg_is_crb% or %leg_is_recref% or (%leg_is_conv% and not crew.%has_valid_doc%("REC","REC",leg.%start_utc%));
    
%trip_creates_rec% =
    any(leg(trip), %leg_creates_rec%);

%trip_creates_crmc% =
    any(leg(trip), leg.%is_crmc%);

export %leg_is_requal% =
  %leg_is_ref% or
  %leg_is_crb% or
  %leg_is_cra%;

export %trip_is_requal% =
  any(duty(trip), %duty_is_requal%);
export %duty_is_requal% =
  any(leg(duty), %leg_is_requal%); 

%trip_is_recref% =
    any(duty(trip), %duty_is_recref%);
%trip_is_cra% =
    any(duty(trip), %duty_is_cra%);
%trip_is_crb% =
    any(duty(trip), %duty_is_crb%);
%trip_is_conv% =
    any(duty(trip), %duty_is_conv%);
    
%duty_is_recref% =
    any(leg(duty), %leg_is_recref%) or %duty_is_cra%;
%duty_is_cra% =
    any(leg(duty), %leg_is_cra%) or %duty_is_crb%;
%duty_is_crb% =
    any(leg(duty), %leg_is_crb%);
%duty_is_conv% =
    any(leg(duty), %leg_is_conv%);


    /* Specific training type variables */

/* Courses without acqual requirement */
export %scc_course% =
    any(leg(trip), %leg_is_of_type_for_qual%("SCC", ""));
export %as_course% =
    any(leg(trip), %leg_is_of_type_for_qual%("AS", ""));
export %ap_course% =
    any(leg(trip), %leg_is_of_type_for_qual%("AP", ""));
    
export %initial%(String qual) =
  any(leg(trip), %leg_is_of_type_for_qual%("INIT", qual));

export %conversion%(String qual) =
  %leg_is_of_type_for_qual%("CONV", qual);

/* A CRA includes all training in a REF */
export %refresher%(String qual) =
  %leg_is_of_type_for_qual%("REF", qual) or
  %conv_refrA%(qual);

/* A CRB includes all training in a CRA */
export %conv_refrA%(String qual) =
  %leg_is_of_type_for_qual%("CRA", qual) or
  %conv_refrB%(qual);
  
export %conv_refrB%(String qual) =
  %leg_is_of_type_for_qual%("CRB", qual);

/*
** Flight crew
*/

export %last_skill_test_date%(Abstime date) = 
    default(accumulators.%last_skill_test%(date), 01Jan1986);

export %last_simulator_date_leg_start% = %last_simulator_date%(leg.%start_UTC%);
export %last_simulator_date%(Abstime date) =
  default(accumulators.%last_simulator%(date), 01jan1986);

export %last_zftt_simulator_date%(Abstime date) =
  default(accumulators.%last_zftt_simulator%(date), 01jan1986);

export %last_simulator_date_of_type%(String type, Abstime date, String ac_qual) =
    %last_perf_date_for_act_of_type_for_ac_qual%(type, ac_qual, date);

/* Simulators in general are not logged as their group code.
   In most cases this is ok, we will not find various INSTR duties, but since
   no legality is based on that it will be fine.
   The exception is PC, which is calculated dynamically, and SIM ASSIST LANDINGS, 
   which is any OPC/FFS/ASF tagged with attribute. /EKG 090225 */
set sims_logged_different = "PC", "OPC", "ASF", "FFS";
export %last_perf_date_for_act_of_type_for_ac_qual%(String type, String ac_qual, Abstime date) =
    let checktype = if type = "PC" then "OPC" else type,
        log_check_date = nmin(date,%pp_start%);
  default(%last_roster_date%(date, ac_qual, type, checktype),
          default(%last_log_date%(log_check_date, ac_qual, type),
                  01jan1986)
          );

export %first_perf_date_for_act_of_type_for_ac_qual%(String type, String ac_qual, Abstime date) =
    let checktype = if type = "PC" then "OPC" else type,
        log_check_date = nmin(date,%pp_start%);
  default(%first_log_date%(log_check_date, ac_qual, type),
          default(%first_roster_date%(date, ac_qual, type, checktype),
                  %abstimemax%)
          );

export %last_perf_date_for_act_of_type_for_ac_qual_as_student%(String type, String ac_qual, Abstime date) =
    let checktype = if type = "PC" then "OPC" else type,
        log_check_date = nmin(date,%pp_start%);
  default(%last_roster_date_as_student%(date, ac_qual, type, checktype),
          default(%last_log_date_as_student%(log_check_date, ac_qual, type),
                  01jan1986)
          );

%match_roster_date_and_type%(abstime date, string ac_qual, string type, string checktype) =
  leg.%start_hb% < date and
  leg.%start_hb% >= %pp_start% and
  not %simulator_instructor% and
  leg.%is_ground_duty% and
  (ac_qual = "" or ac_qual = leg.%qual%) and
  (if type = "FMST" then
     leg.%is_fmst%
   else
     if type="SIM ASSIST LANDINGS" then
       leg.%is_sim_assist_landings%
     else if type="PC SKILL TEST" then
       leg.%is_skill_test%
     else
       if checktype in sims_logged_different then
         
         leg.%group_code% = checktype and %leg_is_own_sim%
       else
         leg.%group_code% = type);


%last_roster_date%(abstime date, string ac_qual, string type, string checktype) =
   last(leg(roster), leg.%end_date%)
     where (%match_roster_date_and_type%(date, ac_qual, type, checktype));

%first_roster_date%(abstime date, string ac_qual, string type, string checktype) =
   first(leg(roster), leg.%end_date%)
     where (%match_roster_date_and_type%(date, ac_qual, type, checktype));

%last_roster_date_as_student%(abstime date, string ac_qual, string type, string checktype) =
   last(leg(roster), leg.%end_date%)
     where (%match_roster_date_and_type%(date, ac_qual, type, checktype) and
            %assigned_as_student_on_leg%);

%last_roster_date_for_code%(Abstime date, String code) =
   last(leg(roster), leg.%start_utc%)
   where (leg.%start_utc% < date and
          leg.%start_hb% >= %pp_start% and
          leg.%code% = code);

%last_log_date%(abstime log_check_date, string ac_qual, string type) =
  let location = if ac_qual = "38" then "OSL" else "";
	max(times(%training_log_count%(1Jan1901, log_check_date, type))
	    where (%log_entry_valid%(log_check_date, ac_qual, type, location, %times_index_0%)), 
	  model_training.%training_log_time%(crew.%id%, 1Jan1901, log_check_date, type, %times_index_0%));

%first_log_date%(abstime log_check_date, string ac_qual, string type) =
  let location = if ac_qual = "38" then "OSL" else "";
	min(times(%training_log_count%(1Jan1901, log_check_date, type)) 
	    where (%log_entry_valid%(log_check_date, ac_qual, type, location, %times_index_0%)), 
	  model_training.%training_log_time%(crew.%id%, 1Jan1901, log_check_date, type, %times_index_0%));

%last_log_date_as_student%(abstime log_check_date, string ac_qual, string type) =
  let location = if ac_qual = "38" then "OSL" else "";
	max(times(%training_log_count_as_student%(1Jan1901, log_check_date, type))
	    where (%log_entry_valid%(log_check_date, ac_qual, type, location, %times_index_0%)),
	  model_training.%training_log_time%(crew.%id%, 1Jan1901, log_check_date, type, %times_index_0%));

%log_entry_valid%(Abstime log_check_date, String ac_qual, String type, String location, Int idx) =
  if ac_qual = "" then
    if type = "AST" then
      %qual_in_ast_qual_group_of_crew%(leg.%ac_qual_map%(model_training.%training_log_code%(crew.%id%, 1Jan1901, log_check_date, type, idx), location))
    else
      true
  else
    ac_qual = leg.%ac_qual_map%(model_training.%training_log_code%(crew.%id%, 1Jan1901, log_check_date, type, idx), location);

table training_log_count(Abstime st, Abstime et, String type) =
	crew.%id%, st, et, type -> Int %training_log_count%;
	external "crew_training_log";
	crew, <=tim, >=tim, typ -> count(row_number);
end

table training_log_count_as_student(Abstime st, Abstime et, String type) =
	crew.%id%, st, et, type, "" -> Int %training_log_count_as_student%;
	external "crew_training_log";
	crew, <=tim, >=tim, typ, <>attr -> count(row_number);
end

/* Count number of attended lifus + zftt lifus in training log */
export %training_log_any_lifus_count%(Abstime st, Abstime et) =
  if st>et then 0
  else %training_log_count%(st, et, "LIFUS") + %training_log_count%(st, et, "ZFTT LIFUS") + %training_log_count%(st, et, "X LIFUS");

/* Count number of attended (flying) lifus in training log */
export %training_log_non_zftt_lifus_count%(Abstime st, Abstime et) =
  if st>et then 0
  else %training_log_count%(st, et, "LIFUS") + %training_log_count%(st, et, "X LIFUS");

/* this calculates number of LIFUS legs since TRAINING restriction started ongoing at "until", until
   given "until" date, using crew_training_log. This is valid also outside planning period, but not after current
   date as training log has not been updated */
export %training_log_lifus_in_restr%(Abstime until) =
  default(
    %training_log_any_lifus_count%(crew.%restriction_type_startdate%("TRAINING",until), until),
    0);

export %training_log_non_zftt_lifus_in_restr%(Abstime until) =
  default(
    %training_log_non_zftt_lifus_count%(crew.%restriction_type_startdate%("TRAINING",until), until),
    0);

export %is_nth_any_lifus%(Int num) =
    if leg.%is_any_lifus% then
      if %nth_any_lifus% >= num then false
      else %nth_any_lifus% + %training_log_lifus_in_restr%(%pp_start%) < num
    else false;

export %is_nth_non_zftt_lifus%(Int num) =
    if leg.%is_non_zftt_lifus% then
      if %nth_non_zftt_lifus% >= num then false
      else %nth_non_zftt_lifus% + %training_log_non_zftt_lifus_in_restr%(%pp_start%) < num
    else false;

%nth_any_lifus% =
    let start = leg.%start_utc%;
    count(leg(roster))
    where (leg.%start_utc% < start and
           leg.%start_utc% >= %pp_start% and /* earlier lifus counted in training log */
           leg.%is_any_lifus%);

%nth_non_zftt_lifus% =
    let start = leg.%start_utc%;
    count(leg(roster))
    where (leg.%start_utc% < start and
           leg.%start_utc% >= %pp_start% and /* earlier lifus counted in training log */
           leg.%is_non_zftt_lifus%);

/* Count number of attended ETOPS LIFUS/LC in training log */
export %training_log_ETOPS_lifus_count%(Abstime st, Abstime et) =
  if st>et then 0
  else (%training_log_count%(st, et, "ETOPS LIFUS/LC") +
        %training_log_count%(st, et, "ETOPS LIFUS") +
        %training_log_count%(st, et, "ETOPS LC"));

/****************************************************************
 * Section 2: Recurrent training
 ***************************************************************/
/* Table: crew_recurrent_set */
%recurrent_set_table% = %etab_path%(%recurrent_set_table_p%);
%recurrent_set_table_p% =
  parameter "crew_recurrent_set"
  remark "ETAB: Table defining recurrent activities";

table recurrent_activity_by_match(Int ix, Abstime date) =
  fundamental.%main_cat%, date, ix ->
    export String %_recurrent_activity_%,
    String %_valid_ac_quals%,
    Bool %_aoc_sk%,
    Bool %_aoc_bu%;
  external %recurrent_set_table%;
  maincat, (validfrom, validto), match_number ->
    typ, acquals, aoc_sk, aoc_bu;
  -, -, - -> "", void_string, false, false;
end

%_recurrent_group%(Int ix, Abstime date) = 
  task.%recurrent_group_by_type%(%_recurrent_activity_%(ix, date));

%nr_recurrent_types% =
    count(times(50))
    while(%_recurrent_activity_%(%times_index_0%, %pp_start%) <> "");

table recurrent_activity_fundamentals(String type, Abstime date) =
  type, date ->
    String %rec_crew_category%,
    String %ac_qual_recurrent%,
    Bool %valid_aoc_sk%,
    Bool %valid_aoc_bu%,
    export Int %validity%,
    Int %season1_start_month%,
    Int %season2_start_month%,
    Int %assignment_interval%;
  external %recurrent_set_table%;
  typ, (validfrom, validto) ->
    maincat, acquals, aoc_sk, aoc_bu, validity,
    season1_start, season2_start, assignment_ival;
  -, - -> void_string, void_string, false, false, 0, 0, 0, 0;
end

set recurrent_emg_training_set = "REC", "PGT";
set recurrent_sim_training_set = "PC", "PCA3", "PCA3A5", "PCA4","PCA5","OPC", "OPCA3", "OPCA3A5", "OPCA4","OPCA5";
set recurrent_crm_training_set = "CRM";
set recurrent_flight_training_set = "LC","LCC";
set recurrent_crmc_training_set = "CRMC";

/* Table: pgt_need */
export %pgt_need_table% = %etab_path%(%pgt_need_table_p%);
%pgt_need_table_p% =
  parameter "pgt_need"
  remark "ETAB: Table defining min and max crew on PGT";

table pgt_tab(String qual) = 
  trip.%homebase%, qual, trip.%start_utc% ->
    Int %_min_crew_on_pgt%,
    Int %_max_crew_on_pgt%;
  external %pgt_need_table%;
  "base", "qual", ("validfrom", "validto"( -> "minval", "maxval";
  -, -, - -> 0, 0;                                    
end

export %min_crew_on_pgt% = %_min_crew_on_pgt%("*");
export %max_crew_on_pgt% = %_max_crew_on_pgt%("*");
export %max_crew_on_pgt_with_qual% = %_max_crew_on_pgt%(%trip_pgt_qual%);

%_trip_pgt_qual% =
  let location = if %trip_pgt_base_number% = "3" then "OSL" else "";
  leg.%ac_qual_map%(substr(%trip_pgt_code_full%, 4, 1), location);
%trip_pgt_qual% = 
  if %_trip_pgt_qual% = "37" or %_trip_pgt_qual% = "38" then "3738"
  else if %_trip_pgt_qual% = "A3" or %_trip_pgt_qual% = "A4" then "A3A4"
  else if %_trip_pgt_qual% = "A3" or %_trip_pgt_qual% = "A5" then "A3A5"
  else %_trip_pgt_qual%;
%_trip_pgt_acfam% = 
  /* ACFam is the same for 36 and 38, no need to check location */
  leg.%ac_fam_map%(substr(%trip_pgt_code_full%, 3, 2));

/*
** Variables based on index, used for data validation, i.e. all dates are registered
*/
/* For rule qln_all_required_recurrent_dates_registered_ALL */
export %all_required_recurrent_dates_registered_pp_start% = 
   %all_required_recurrent_dates_registered%(%pp_start%);

export %all_required_recurrent_dates_registered%(Abstime date) =
  all(times(%nr_recurrent_types%), %recurrent_type_registered_ix%(%times_index_0%, date))
  where (%valid_aoc_ix%(%times_index_0%, date) and
         %valid_ac_qual_ix%(%times_index_0%, date)
         /*and %valid_employment_ix%(%times_index_0%, date)*/);
export %current_acqual_required_recurrent_dates_registered%(Abstime date,String acqual) =
  all(times(%nr_recurrent_types%), %current_acqual_recurrent_type_registered_ix%(%times_index_0%, date, acqual))
  where (%valid_aoc_ix%(%times_index_0%, date) and
         %valid_matching_ac_qual_ix%(%times_index_0%, date)
         /*and %valid_employment_ix%(%times_index_0%, date)*/);

export %recurrent_type_registered%(Int ix, Abstime date) =
    let rec_type = %_recurrent_group%(ix, date);

    if rec_type in rec_doc_per_qual and
       not (rec_type = "LC" and (crew.%is_double_qualified% or crew.%is_a3a5_qualified%)) /* A3/A4/A5 LC recurrent document is handled as one */
    then
      all(times(crew.%max_iter%("ACQUAL", date)),
                %_recurrent_type_registered%(rec_type, crew.%qln%("ACQUAL", date, %times_index_0%), date))
      where (%recurrent_type_valid_for_ac_qual%(ix, date, crew.%qln%("ACQUAL", date, %times_index_0%)))
    else
      %_recurrent_type_registered%(rec_type, %any_ac_qual%, date);

export %current_acqual_recurrent_type_registered%(Int ix, Abstime date, String acqual) =
    let rec_type = %_recurrent_group%(ix, date);

    if rec_type in rec_doc_per_qual and
       not (rec_type = "LC" and (crew.%is_double_qualified% or crew.%is_a3a5_qualified%)) /* A3/A4/A5 LC recurrent document is handled as one */
    then
      all(times(crew.%max_iter%("ACQUAL", date)),
                %_recurrent_type_registered%(rec_type, crew.%qln%("ACQUAL", date, %times_index_0%), date))
      where (%recurrent_type_valid_for_ac_qual%(ix, date, crew.%qln%("ACQUAL", date, %times_index_0%)) and 
      crew.%qln%("ACQUAL", date, %times_index_0%) = acqual)
    else
      %_recurrent_type_registered%(rec_type, %any_ac_qual%, date);


export %_recurrent_type_registered%(String rec_type, String ac_qual, Abstime date) = 
    let doc_expiry = 
    if rec_type = "OPCA5" or rec_type = "OPCA3" then
        default(default((crew.%document_expiry_date_subtype%("REC", "OPCA3A5", ac_qual, date)), (crew.%document_expiry_date_subtype%("REC", rec_type, ac_qual, date))), 1Jan1986)
        
    else if rec_type = "PCA5" or rec_type = "PCA3" then
        default(default((crew.%document_expiry_date_subtype%("REC", "OPCA3A5", ac_qual, date)), (crew.%document_expiry_date_subtype%("REC", rec_type, ac_qual, date))), 1Jan1986)
        
    else
        default(crew.%document_expiry_date_subtype%("REC", rec_type, ac_qual, date), 1Jan1986),
    doc_acqual = default(crew.%expiry_doc_alternating_ac_qual%("REC", rec_type, ac_qual, date), "-");
    (doc_expiry > 1Jan1986
     and 
    (not (rec_type in rec_types_with_acqual) or
     /* Handles the case where upcoming lc qual is "A3 or A4" */
     (doc_acqual = "A3 or A4 or A5" and
       (%has_qual%("A3", doc_expiry) or %_has_qual%("A3", date) and
       %has_qual%("A4", doc_expiry) or %_has_qual%("A4", date) and 
       %has_qual%("A5", doc_expiry) or %_has_qual%("A5", date))
     ) or
     %has_qual%(doc_acqual, doc_expiry) or %_has_qual%(doc_acqual, date) or
     /* Handles the cases where 36 and 38 alternates */
     (doc_acqual = "36" and
      (%has_qual%("38", doc_expiry) or %_has_qual%("38", date))) or
     (doc_acqual = "38" and
      (%has_qual%("36", doc_expiry) or %_has_qual%("36", date)))))
     or
    %planned_rec_doc_creator%(rec_type, %any_ac_qual%, date);
    
/* LC is not generally a rec doc creator, but this variable is only called when
   crew lacks LC registration on current qual, and in that case it is.
   /EKG 081219
   The same is true for PC CHANGE /EKG 090303 */
   
%planned_rec_doc_creator%(String type, String ac_qual, Abstime date) =
    let last_trip_start_day = default(last(trip(roster), trip.%start_day%)
                                      where(trip.%start_day% <= date), date);
    any(trip(roster), (type = "REC" and %trip_creates_rec%) or
                      (type = "PGT" and %trip_is_pgt_ref%) or
                      (type = "LC" and (trip.%is_ilc% or trip.%is_lc%) and (ac_qual = %any_ac_qual% or ac_qual = trip.%qual%)) or
                      (type = "CRMC" and %trip_creates_crmc%) or
                      ((trip.%is_skill_test% or trip.%is_pc_change_month%) and
                       type in recurrent_sim_training_set))
    where (trip.%start_day% < last_trip_start_day)
    or
    (%planned_rec_doc_creator_by_training_log%(type, ac_qual)) or
    (type = "LC" and (%program_has_ilc%(last_trip_start_day) or
                      %program_has_lc%(last_trip_start_day, ac_qual) or
                      %unplanned_training_of_type_on_qual_before%("LC", last_trip_start_day, "") or
                      %unplanned_training_of_type_on_qual_before%("ILC", last_trip_start_day, "")));

%planned_rec_doc_creator_MFF%(String type, String ac_qual, Abstime date) =
    let last_trip_start_day = default(last(trip(roster), trip.%start_day%)
                                      where(trip.%start_day% <= date), date);
    any(trip(roster), (type = "LC" and (trip.%is_ilc% or trip.%is_lc%) and ac_qual = trip.%qual%) or
                      ((trip.%is_skill_test% or trip.%is_pc_change_month%) and ac_qual = trip.%qual% and 
                       type in recurrent_sim_training_set))
    where (trip.%start_day% < last_trip_start_day)
    or
    (%planned_rec_doc_creator_by_training_log%(type, ac_qual)) or
    (type = "LC" and (%program_has_ilc_MFF%(last_trip_start_day, ac_qual) or
                      %program_has_lc_MFF%(last_trip_start_day, ac_qual) or
                      %unplanned_training_of_type_on_qual_before%("LC", last_trip_start_day, "") or
                      %unplanned_training_of_type_on_qual_before%("ILC", last_trip_start_day, "")));

%planned_rec_doc_creator_by_training_log%(String type, String ac_qual) =
  not void(%last_recurrent_creator_in_training_log%(type, ac_qual));

export %program_has_ilc%(Abstime date) =
    %program_has_training%(date, "ILC", %any_ac_qual%);
export %program_has_lc%(Abstime date, String ac_qual) =  
    %program_has_training%(date, "LC", ac_qual);
export %program_has_new_on_trip% =
    %program_has_training%(trip.%start_hb%, "NEW", %any_ac_qual%);
%program_has_training%(Abstime date, String type, String ac_qual) =
  any(times(%training_activities%(date)), 
      %course_attribute%(date, %times_index_0%) = type) or
  /* Handling the case where the training need end date is passed, but a
     planned LC/ILC hasn't been performed */
  type = "LC" and 
  %last_recurrent_performed_of_type%("LC", ac_qual, date) > fundamental.%now_date% - 7*24:00;

%program_has_training_MFF%(Abstime date, String type, String ac_qual) =
  any(times(%training_activities%(date)),
      %course_attribute%(date, %times_index_0%) = type) or
  /* Handling the case where the training need end date is passed, but a
     planned LC/ILC hasn't been performed */
  type = "LC" and
  %last_recurrent_performed_of_type_MFF%("LC", ac_qual, date) > fundamental.%now_date% - 7*24:00;

export %program_has_ilc_MFF%(Abstime date, String ac_qual) =
    %program_has_training_MFF%(date, "ILC", ac_qual);
export %program_has_lc_MFF%(Abstime date, String ac_qual) =
    %program_has_training_MFF%(date, "LC", ac_qual);

export %has_A2_leg_in_trip% = any(leg(trip),leg.%qual% = "A2");
export %has_A3_leg_in_trip% = any(leg(trip),leg.%qual% = "A3");
export %has_A5_leg_in_trip% = any(leg(trip),leg.%qual% = "A5");

export %has_PC_renewal_qual_A2%(Abstime date) =
    let last_trip_start_day = default(last(trip(roster), trip.%start_day%)
                                      where((trip.%start_day%) <= date), date);
    any(trip(roster),(trip.%is_skill_test% or trip.%is_pc_change_month%) and (trip.%start_day% < last_trip_start_day) and %has_A2_leg_in_trip%);

export %has_PC_renewal_qual_A3%(Abstime date) =
    let last_trip_start_day = default(last(trip(roster), trip.%start_day%)
                                      where((trip.%start_day%) <= date), date);
    any(trip(roster),(trip.%is_skill_test% or trip.%is_pc_change_month%) and (trip.%start_day% < last_trip_start_day) and %has_A3_leg_in_trip%);

export %has_PC_renewal_qual_A5%(Abstime date) =
    let last_trip_start_day = default(last(trip(roster), trip.%start_day%)
                                      where((trip.%start_day%) <= date), date);
    any(trip(roster),(trip.%is_skill_test% or trip.%is_pc_change_month%) and (trip.%start_day% < last_trip_start_day) and %has_A5_leg_in_trip%);

export %last_leg_qual%(Abstime date) =
    last(trip(roster), trip.%qual%) where((trip.%start_day%) <= date);

export %has_matching_qual_pc%(Abstime date) =
    if %last_leg_qual%(date) = "A2" then %has_PC_renewal_qual_A2%(date)
    else if %last_leg_qual%(date) = "A3" then %has_PC_renewal_qual_A3%(date)
    else if %last_leg_qual%(date) = "A5" then %has_PC_renewal_qual_A5%(date)
    else false;

%crew_contract_group_safe_pp_start% =
    default(model_crew.%congrouptype_find%(crew.%id%, fundamental.%pp_start%), "NA");

table check_matching_qual_table(String type, Abstime date) =
  %crew_contract_group_safe_pp_start%, %last_leg_qual%(date),%has_PC_renewal_qual_A2%(date),%has_PC_renewal_qual_A3%(date), %has_PC_renewal_qual_A5%(date) -> export %check_matching_pc_leg_qual%;
  "MFF-A2A3","A2", False, True, -   ->  (concat("PC","A3") = default(type,"")) or (concat("OPC","A3") = default(type,"")) or (concat("PC","A5") = default
(type,"")) or (concat("OPC","A5") = default(type,""));
  "MFF-A2A3","A3", True, False, -   ->  ("PC" = default(type,"")) or ("OPC" = default(type,"")) or (concat("PC","A5") = default(type,"")) or (concat("OPC","A5") = default(type,""));
  "MFF-A2A5","A2", False, - , True  ->  (concat("PC","A3") = default(type,"")) or (concat("OPC","A3") = default(type,"")) or (concat("PC","A5") = default
(type,"")) or (concat("OPC","A5") = default(type,""));
  "MFF-A2A5","A5", True, - ,  False ->  ("PC" = default(type,"")) or ("OPC" = default(type,"")) or (concat("PC","A3") = default(type,"")) or (concat("OPC","A3") = default(type,""));
   - ,  - ,  -,  -, -               ->  False;
end

table recurrent_performed_qual_table(String type) =
  %crew_contract_group_safe_pp_start%, trip.%qual%  -> export %recurrent_performed_qual_match%;
  "MFF-A2A3","A2"  -> (concat("PC","A3") = default(type,"")) or (concat("OPC","A3") = default(type,"")) or (concat("PC","A5") = default(type,"")) or (concat("OPC","A5") = default(type,""));
  "MFF-A2A3","A3"  -> ("PC" = default(type,"")) or ("OPC" = default(type,"")) or (concat("PC","A5") = default(type,"")) or (concat("OPC","A5") = default(type,""));
  "MFF-A2A5","A2"  -> (concat("PC","A3") = default(type,"")) or (concat("OPC","A3") = default(type,"")) or (concat("PC","A5") = default(type,"")) or (concat("OPC","A5") = default(type,""));
  "MFF-A2A5","A5"  -> ("PC" = default(type,"")) or ("OPC" = default(type,"")) or (concat("PC","A3") = default(type,"")) or (concat("OPC","A3") = default(type,""));
   - ,  -          -> False;
end

table failtext_qual_table(String type, Abstime date) =
  %crew_contract_group_safe_pp_start%, %recurrent_performed_check_failtext%(type, "A2", date) , %recurrent_performed_check_failtext%(type, "A3", date) , %recurrent_performed_check_failtext%(type, "A5", date) -> export %failtext_qual_match%;
  "MFF-A2A3", False, False, -   -> "A2A3";
  "MFF-A2A3", True,  False, -   ->  "A3";
  "MFF-A2A3", False, True , -   ->  "A2";
  "MFF-A2A5", False, - , False  -> "A2A5";
  "MFF-A2A5", True,  - , False  ->  "A5";
  "MFF-A2A5", False, -, True    ->  "A2";
   - ,  -  , - , -              ->  void_string;
end

%recurrent_performed_check_failtext%(String type, String qual, Abstime date) =
      default(date < %recurrent_type_expiry_date%(type, qual , date), false) or
      default(date < %recurrent_type_expiry_date_incl_performed_MFF%(type, qual , date, false), false);

export %recurrent_type_registered_ix%(Int ix, Abstime date) =
  %recurrent_type_registered%(ix, date);
export %current_acqual_recurrent_type_registered_ix%(Int ix, Abstime date, String acqual) =
  %current_acqual_recurrent_type_registered%(ix, date, acqual);  
/* Used in failtext and crew warnings */
export %unregistered_recurrent_types%(Abstime date) =
  cat(times(%nr_recurrent_types%), %recurrent_desc%(%recurrent_activity_ix%(%times_index_0%, date), date), ", ")
  where (not %recurrent_type_registered_ix%(%times_index_0%, date) and
         %valid_aoc_ix%(%times_index_0%, date) and
         %valid_ac_qual_ix%(%times_index_0%, date));

/* This definition will include the acqual for recurrent types that are not
   acqual independent. This is only true for single qual flight crew, so 
   checking only acqual 1 is ok. /EKG */
%recurrent_desc%(String rec_type, Abstime date) =
   if rec_type in rec_types_with_acqual then
     if rec_type = "LC" and not (crew.%is_double_qualified% or crew.%is_a3a5_qualified%) /* A3/A4/A5 LC recurrent document is handled as one */
       then
         cat(times(crew.%max_iter%("ACQUAL", date))
             where(not %_recurrent_type_registered%(rec_type, crew.%ac_qln%(date, %times_index_0%), date)),
             concat(rec_type, " (",crew.%ac_qln%(date, %times_index_0%),")"),
             ", ")
       else
         concat(rec_type, " (",crew.%ac_qln%(date, 1),")")
     else rec_type;
        
/* For rule qln_recurrent_training_performed_ALL */

/* This should be a fast definition for use in valid statement.
   Defined at trip end. */
export %nr_expired_recurrent_docs%(Abstime date) =
    if date >= %pp_start% and date <= %pp_end% and
       %nr_expired_recurrent_docs_pp_start% = 0 and
       %first_recurrent_doc_expiry_date_pp_start% >= %pp_end% and not crew.%is_MFF%
    then 0
    else %_nr_expired_recurrent_docs%(date);

%_nr_expired_recurrent_docs%(Abstime date) =
    count(times(%nr_recurrent_types%))
    where(%rec_doc_ix_expired_at_date%(%times_index_0%, date)
          and
          %rec_type_required%(%_recurrent_group%(%times_index_0%, date), 
                              date));

export %nr_expired_recurrent_docs_trip_end% = 
    %nr_expired_recurrent_docs%(trip.%end_hb%);
export %nr_expired_recurrent_docs_duty_end% =
    %nr_expired_recurrent_docs%(duty.%end_hb%);
export %nr_expired_recurrent_docs_duty_start% =
    %nr_expired_recurrent_docs%(duty.%start_hb%);
export %nr_expired_recurrent_docs_pp_start% =
    %_nr_expired_recurrent_docs%(%pp_start%);
export %nr_expired_recurrent_docs_pp_end% =
    count(times(%nr_recurrent_types%))
    where(%rec_doc_ix_expired_at_date%(%times_index_0%, %pp_end%));
export %first_recurrent_doc_expiry_date% =
  let end_date = round_up(duty.%start_hb%, 24:00);

  %first_recurrent_doc_expiry_date_at_date%(end_date);

%first_recurrent_doc_expiry_date_pp_start% =
  %first_recurrent_doc_expiry_date_at_date%(%pp_start%);

set rec_doc_per_qual = "LC", "PC", "OPC";
set pcopc_doc_per_qual = "PCA3" ,"OPCA3" ,"PCA5" ,"OPCA5";

%first_recurrent_doc_expiry_date_at_date%(Abstime end_date) =
  default(
    min(times(%nr_recurrent_types%),
          if %_recurrent_group%(%times_index_0%, end_date) in rec_doc_per_qual then
            min(times(crew.%max_iter%("ACQUAL", end_date)),
              default(%recurrent_type_expiry_date%(
                 %_recurrent_group%(%times_index_1%, end_date), crew.%qln%("ACQUAL", end_date, %times_index_0%), end_date), 31dec2035))
          else
            default(%recurrent_type_expiry_date%(
               %_recurrent_group%(%times_index_0%, end_date), %any_ac_qual%, end_date), 31dec2035))
    where(%rec_type_required%(
             %_recurrent_group%(%times_index_0%, end_date), end_date))
  , 1Jan1986);

export %_recurrent_doc_expiry_date% =
  let end_date = round_up(trip.%start_hb%, 24:00);
  default(
    max(times(%nr_recurrent_types%),
          default(%recurrent_type_expiry_date%(
             %_recurrent_group%(%times_index_0%, end_date), %any_ac_qual%, end_date), 31dec2035))
    where(%rec_type_required%(
             %_recurrent_group%(%times_index_0%, end_date), end_date))
  , 1Jan1986);


%rec_doc_ix_expired_at_date%(Int ix, Abstime date) =
    let recurrent_group = %_recurrent_group%(ix, date);

    if recurrent_group in rec_doc_per_qual or recurrent_group in pcopc_doc_per_qual then
      if crew.%is_MFF% then
        date > default(%recurrent_type_expiry_date_incl_performed_MFF%(
                         recurrent_group, trip.%qual%, date, false), 31dec2035)
      else
        any(times(crew.%max_iter%("ACQUAL", date)),
          date > default(%recurrent_type_expiry_date_incl_performed%(
                         recurrent_group, crew.%qln%("ACQUAL", date, %times_index_0%), date, false), 31dec2035))
    else
      date > %recurrent_type_expiry_date_incl_performed%(recurrent_group, %any_ac_qual%,
                                          date, false);
    
export %all_required_recurrent_performed_pp_start% = 
   %all_required_recurrent_performed%(%pp_start%);
   
export %all_required_recurrent_performed_trip_end% = 
   %all_required_recurrent_performed%(trip.%end_hb%);
export %all_required_recurrent_performed_duty_end% =
   %all_required_recurrent_performed%(duty.%end_hb%);
export %all_required_recurrent_performed_duty_start% =
   %all_required_recurrent_performed%(duty.%start_hb%);
export %all_required_recurrent_performed%(Abstime date) =
  all(times(%nr_recurrent_types%), %recurrent_type_performed_ix%(%times_index_0%, date))
  where (%valid_aoc_ix%(%times_index_0%, date) and
         %valid_ac_qual_ix%(%times_index_0%, date));

export %recurrent_type_performed%(Int ix, Abstime date) =
    let rec_type = %_recurrent_group%(ix, date);

    /* First we do a quick check against table. 
       If that fails we do the more complex roster lookup that includes rec doc
       creators. */
    if rec_type in rec_doc_per_qual and
       not (rec_type = "LC" and (crew.%is_double_qualified% or crew.%is_a3a5_qualified%)) /* A3/A4/A5 LC recurrent document is handled as one */
    then
      all(times(crew.%max_iter%("ACQUAL", date)),
         default(date < %recurrent_type_expiry_date%(rec_type, crew.%qln%("ACQUAL", date, %times_index_0%), date), false) or
         default(date < %recurrent_type_expiry_date_incl_performed%(rec_type, crew.%qln%("ACQUAL", date, %times_index_0%), date, false), false))
      where (%recurrent_type_valid_for_ac_qual%(ix, date, crew.%qln%("ACQUAL", date, %times_index_0%)))
    else
      default(date < %recurrent_type_expiry_date%(rec_type, %any_ac_qual%, date), false) or
      default(date < %recurrent_type_expiry_date_incl_performed%(rec_type, %any_ac_qual%, date, false), false);

export %recurrent_type_performed_MFF%(Int ix, Abstime date) =
    let rec_type = %_recurrent_group%(ix, date),
        trip_qual = if trip.%qual% = "---" then %any_ac_qual% else trip.%qual%;

    /* First we do a quick check against table.
       If that fails we do the more complex roster lookup that includes rec doc
       creators. */
    if (rec_type in rec_doc_per_qual or rec_type in pcopc_doc_per_qual) then
      default(date < %recurrent_type_expiry_date%(rec_type, trip_qual, date), false) or
      default(date < %recurrent_type_expiry_date_incl_performed_MFF%(rec_type, trip_qual , date, false), false)
    else
      default(date < %recurrent_type_expiry_date%(rec_type, %any_ac_qual%, date), false) or
      default(date < %recurrent_type_expiry_date_incl_performed%(rec_type, %any_ac_qual%, date, false), false);

export %recurrent_type_performed_ix%(Int ix, Abstime date) =
  if crew.%is_MFF% then
    default(%recurrent_type_performed_MFF%(ix, date), false)
  else
    default(%recurrent_type_performed%(ix, date), false);
  
/* Used in failtext and crew warnings */
export %unperformed_recurrent_types%(Abstime date) =
  cat(times(%nr_recurrent_types%), %reqd_rec_desc%(%recurrent_activity_ix%(%times_index_0%,date), date), ", ")
  where (%is_unperformed_ix%(date) and
         not %index_is_OPC_and_PC_required%(date));

export %unperformed_recurrent_types_with_matching_ac_qual_str%(Abstime date) =
  cat(times(%nr_recurrent_types%),  %reqd_rec_desc%(%recurrent_activity_ix%(%times_index_0%,date), date), ",")
  where (%is_unperformed_ix%(date) and %check_matching_duty_qual%(%times_index_0%,date) and 
         not %index_is_OPC_and_PC_required%(date));

export %unperformed_recurrent_types_with_matching_qual%(Abstime date) =
  any(times(%nr_recurrent_types%), %check_matching_qual%(%times_index_0%,date))
  where (%is_unperformed_ix%(date) and
         not %index_is_OPC_and_PC_required%(date));

%check_matching_qual%(int ix, Abstime date) =
     let missed_trining = %reqd_rec_desc%(%recurrent_activity_ix%(ix,date), date);
    if ( missed_trining in rec_doc_per_qual) then
         concat("LC (", leg.%qual%, ")") = missed_trining or
                concat("PC (", leg.%qual%, ")") = default(missed_trining,"") or
                concat("OPC (", leg.%qual%, ")") = default(missed_trining,"")
     else
          true;
          
%check_matching_duty_qual%(int ix, Abstime date) =
    let missed_trining = %reqd_rec_desc%(%recurrent_activity_ix%(ix,date), date);
    any(leg(trip),locate(leg.%qual%, missed_trining) > 0);
    
    /*
    concat("LC (", cat(leg(trip) where (locate(leg.%qual%, missed_trining) > 0), leg.%qual%), ")") = missed_trining or
    concat("PC (", cat(leg(trip) where (locate(leg.%qual%, missed_trining) > 0), leg.%qual%), ")") = default(missed_trining,"") or
    concat("OPC (", cat(leg(trip) where (locate(leg.%qual%, missed_trining) > 0), leg.%qual%), ")") = default(missed_trining,"") or 
    concat("OPC", cat(leg(trip) where (locate(leg.%qual%, missed_trining) > 0), leg.%qual%)) = default(missed_trining,"") or
    concat("PC", cat(leg(trip) where (locate(leg.%qual%, missed_trining) > 0), leg.%qual%)) = default(missed_trining,"");
    */
%index_is_OPC_and_PC_required%(Abstime date) =
    if %_recurrent_group%(%times_index_0%, date) = "OPC" then
        first(times(%nr_recurrent_types%), 
              %is_unperformed_ix%(date))
        where(%_recurrent_group%(%times_index_0%, date) = "PC")
    else
        false;

%is_unperformed_ix%(Abstime date) =
    not %recurrent_type_performed_ix%(%times_index_0%, date) and
    %valid_aoc_ix%(%times_index_0%, date) and
    %valid_ac_qual_ix%(%times_index_0%, date);

%reqd_rec_desc%(String rec_type, Abstime date) =
    
    let ac_qual =
        if rec_type = "LC" then
          if crew.%is_MFF% then
            if length(trip.%qual%) = 2 then
              trip.%qual%
            else
              %failtext_qual_match%(rec_type, date)
          else
            %recurrent_type_expiry_ac_qual%(rec_type, %active_ac_qual%, date)
        else if crew.%is_MFF% and rec_type in doc_per_qual then
          if length(trip.%qual%) = 2 then
            trip.%qual%
          else
            %failtext_qual_match%(rec_type, date)
        else 
           %recurrent_type_expiry_ac_qual%(rec_type, %any_ac_qual%, date);
    concat(rec_type,
           if length(ac_qual) >= 2 then concat(" (", ac_qual, ")")
           else "",
           if %recurrent_refresher_reqd%(rec_type, date) then " (REF)"
           else "");
                
%valid_req_aoc%(String activityCode, Abstime date) =
  if %crew_is_cabin% and %crmc_except_crew%(activityCode, date) then
    false
  else
    %valid_req_aoc_raw%(activityCode, date);

%crmc_except_crew%(String activityCode, Abstime date) =
  activityCode = "CRMC" and
  system_db_parameters.%crmc_first_3_year_cycle_valid%(date) and
  %crew_employment_date% < system_db_parameters.%crmc_first_3_year_cycle_validfrom%(date) and
  not %recurrent_document_exists%("CRMC", date);

export %crmc_except_crew_pp_start%(String activityCode) = %crmc_except_crew%(activityCode, %pp_start%);

%valid_req_aoc_raw%(String activityCode, Abstime date) =
    if crew.%is_SKN_at_date%(date) then
        %valid_aoc_bu%(activityCode, date) or 
        %valid_aoc_sk%(activityCode, date) and crew.%is_long_haul%(date)
    else %valid_aoc_sk%(activityCode, date);

export %rec_type_required%(String type, Abstime date) =
    let quals = default(%ac_qual_recurrent%(type, date), "");
    %rec_crew_category%(type, date) = crew.%main_func% and
    %valid_req_aoc%(type, date) and
    %_valid_ac_qual%(quals, date);

export %valid_aoc%(Int ix, Abstime date) =
    %valid_req_aoc%(%_recurrent_group%(ix, date), date);
  
export %valid_ac_qual%(Int ix, Abstime date) =
  let valid_ac_qual = default(%_valid_ac_quals%(ix, date), "");
  %_valid_ac_qual%(valid_ac_qual, date);
  
export %valid_matching_ac_qual%(Int ix, Abstime date) =
  let valid_ac_qual = default(%_valid_ac_quals%(ix, date), "");
  if valid_ac_qual <> "" and valid_ac_qual <> leg.%qual% then
    false
  else
    %_valid_ac_qual%(valid_ac_qual, date);
  
%_valid_ac_qual%(String quals, Abstime date) =
  quals = "" or
  (if substr(quals, 1, 1) = "!" then
    not %crew_has_ac_qual%(quals, date)
  else if quals = "A3&!A5" then
    %crew_has_ac_qual%("A3", date) and  not (%crew_has_ac_qual%("A5", date) and %crew_has_A3A5_rec_doc%(date))
  else if quals = "A3&A5" then
    %crew_has_ac_qual%("A3", date) and  %crew_has_ac_qual%("A5", date) and %crew_has_A3A5_rec_doc%(date)
  else if quals = "A5&!A3" then
    %crew_has_ac_qual%("A5", date) and not (%crew_has_ac_qual%("A3", date) and %crew_has_A3A5_rec_doc%(date))
  else
    %crew_has_ac_qual%(quals, date));
           
%crew_has_ac_qual%(String ac_qual, Abstime date) =
  any(times(crew.%ac_qln_max_iter_at_date%(date)),
    locate(crew.%ac_qln_at_date_ix%(date, %times_index_0%), ac_qual) > 0);
    
%recurrent_type_valid_for_ac_qual%(Int ix, Abstime date, String ac_qual) =
  let valid_ac_quals = default(%_valid_ac_quals%(ix, date), "");

  if valid_ac_quals = "" then
    true
  else
    if substr(valid_ac_quals, 1, 1) = "!" then
      locate(ac_qual, valid_ac_quals) <= 0
    else
      if valid_ac_quals = "A3&!A5" or valid_ac_quals = "A3&A5" then
        true /* This should not happen with current implementation */
      else
        locate(ac_qual, valid_ac_quals) > 0;
        
%crew_has_A5_extras%(Abstime date) =
  %fam_flt_performed_twice%("A5") and
   ((%latest_fam_flt_date%("A5") < %pp_start%) or
    %crew_has_A3A5_rec_doc%(date));

%crew_has_A3A5_rec_doc%(Abstime date) =
  %recurrent_document_exists%("OPCA3A5", date) or
  %recurrent_document_exists%("PCA3A5", date);

/*Changed definition of variable for SKCMS-2696, 
as there could be other ways to acquire A5 qualification*/
/* Currently crew had CTR courses to acquire A5 qualification in addition to their A3 qualification.
 Now crew are also getting A5 qualifications through other courses ant thus will not always have CTR course and FAM FLT */
 /*Revert the definition if issues are reported due this change*/

 
export %crew_qualified_for_A5_leg_start% =
  crew.%has_qln%("ACQUAL", leg.%qual%, leg.%start_date%);
  /*
  * crew.%has_qln%("ACQUAL", "A5", leg.%start_date%) and
  * (%leg_training_code_safe% = "FAM FLT" or
  * %fam_flt_performed_twice%("A5") or
  * %crew_has_A3A5_rec_doc%(leg.%start_date%));
  */

export %crew_qualified_for_AL_A350_leg_start% =
  crew.%has_qln%("ACQUAL", "AL", leg.%start_date%) and
  (%last_perf_date_for_act_of_type_and_code%("COURSE WEB", "TW99", leg.%start_utc%) > %abstimemin%);

%A2NX_course_code% = if crew.%is_cabin% then "Q2LR" else "LRP2";

/*value 60 because if rostering coming month a check for course activity is needed into present month (that hasn't passed yet and given crew their qual), 
if no qualifying A2NX flight is made within 60 days after course, a new course is needed*/
%a2nx_course_last_60_days% =
    %days_since%(leg.%start_date%, %last_perf_date_for_act_of_type_and_code%("COURSE", %A2NX_course_code%, leg.%start_date%)) < 60;

export %crew_qualified_for_A2NX_leg_start% =
  crew.%has_qln%("ACQUAL", "A2", leg.%start_utc%) and
  %crew_has_A2NX_position_leg_start%;

export %crew_has_A2NX_position_leg_start% =
  crew.%has_qln%("POSITION", "A2NX", leg.%start_date%) or
  (leg.%is_short_haul% and crew.%is_pilot% and crew.%has_qln%("POSITION", "A2_OW", leg.%start_date%)) or
  %a2nx_course_last_60_days%;

%recurrent_document_exists%(String doc, Abstime date) =
    default(1JAN1986 < %recurrent_type_expiry_date%(doc, %any_ac_qual%, date), false);

/* Cache variables */
%valid_aoc_ix%(Int ix, Abstime date) =
  %valid_aoc%(ix, date);
export %valid_aoc_pp_start_ix%(Int ix) =
  %valid_aoc_ix%(ix, %pp_start%);
%valid_ac_qual_ix%(Int ix, Abstime date) = 
  training.%valid_ac_qual%(ix, date);

  
%valid_matching_ac_qual_ix%(Int ix, Abstime date) = 
  training.%valid_matching_ac_qual%(ix, date);
  
/*export %valid_employment_ix%(Int ix, Abstime date) =
    if %_recurrent_activity_%(ix, date) = "CRMC" then
        crew.%employment_date% >= 1JAN2020
    else
        true;

        */
export %valid_ac_qual_pp_start_ix%(Int ix) =
  %valid_ac_qual_ix%(ix, %pp_start%);
%recurrent_activity_ix%(Int ix, Abstime date) =
  %_recurrent_group%(ix, date);
export %recurrent_activity_pp_start_ix%(Int ix) =
  %recurrent_activity_ix%(ix, %pp_start%);
export %recurrent_activity_wrapped_ix%(Int ix) =
    if %valid_aoc_pp_start_ix%(ix) and %valid_ac_qual_pp_start_ix%(ix) then
        %recurrent_activity_pp_start_ix%(ix)
    else
        void_string;

/* Cache variables */
export %all_required_recurrent_dates_registered_trip_start% =
  %all_required_recurrent_dates_registered%(trip.%start_hb%);

export %current_acqual_required_recurrent_dates_registered_trip_start% =
  %current_acqual_required_recurrent_dates_registered%(trip.%start_hb%,leg.%qual%);

export %all_required_recurrent_dates_registered_pp_end% =
  %all_required_recurrent_dates_registered%(%pp_end%);
  
%all_required_recurrent_activities_debug% =
  cat(times(10), %recurrent_activity_pp_start_ix%(%times_index_0%), ", ")
  where (%valid_aoc_pp_start_ix%(%times_index_0%) and
         %valid_ac_qual_pp_start_ix%(%times_index_0%));

export %recurrent_type_registered_trip_start%(Int ix) =
  %recurrent_type_registered%(ix, trip.%start_hb%);

export %unregistered_recurrent_types_trip_start% =
  %unregistered_recurrent_types%(trip.%start_hb%);
export %unregistered_recurrent_types_pp_start% =
  %unregistered_recurrent_types%(%pp_start%);
export %unregistered_recurrent_types_pp_end% =
  %unregistered_recurrent_types%(%pp_end%);

/*
** Variables based on type, used for rule checks, selects and crew warnings
*/
export %recurrent_season_start%(String type, Abstime date) =
  if %season1_start_month%(type, date) > 0 then
    if %season2_start_month%(type, date) > 0 then
      nmax(%recurrent_season1_start%(type, date),
           %recurrent_season2_start%(type, date))
    else
      %recurrent_season1_start%(type, date)
  else
    01jan1986;

%recurrent_season1_start%(String type, Abstime date) =
  %_recurrent_season_start%(type, date, 1);

%recurrent_season2_start%(String type, Abstime date) =
  %_recurrent_season_start%(type, date, 2);

%_recurrent_season_start%(String type, Abstime date, Int ix) =
    let start_month = %_season_start_month%(type, date, ix) - 1;
    add_months(round_down_year(add_months(date, -start_month)), start_month);
   
%_season_start_month%(String type, Abstime date, Int ix) =
    if ix = 1 then 
        %season1_start_month%(type, date)
    else 
        %season2_start_month%(type, date);

%rec_season_start% =
    %recurrent_season_start%(%rec_type%, trip.%start_hb%);
    
/*
** Required recurrent training type
*/
/* Recurrent training of type performed 
   This will check up to the date, non-inclusive.
   It will be wrong of a lot of historical data is loaded, and it will also miss
   planner, not performed, activities before planstart. 
   Solution: Check CTL between %now% and planstart */
export %recurrent_performed%(String type, String ac_qual, Abstime date) =
  /* 1. Recurrent emergency training */
  if type in recurrent_emg_training_set then
    %recurrent_emg_performed%(type, date)
  /* 2. Recurrent simulator training */
  else if type in recurrent_sim_training_set then
    %recurrent_sim_performed%(type, date)
  /* 3. Recurrent CRM training */
  else if type in recurrent_crm_training_set then
    %recurrent_crm_performed%(type, date)
  /* 4. Recurrent flight training */
  else if type in recurrent_flight_training_set then
    %recurrent_flight_training_performed%(type, ac_qual, date)
  /* 5. Recurrent CRMC training */
  else if type in recurrent_crmc_training_set then
    %recurrent_crmc_performed%(type, date)
  else
    false;

export %recurrent_performed_MFF%(String type, String ac_qual, Abstime date) =
  /* 1. Recurrent emergency training */
  if type in recurrent_emg_training_set then
    %recurrent_emg_performed%(type, date)
  /* 2. Recurrent simulator training */
  else if type in recurrent_sim_training_set then
    %recurrent_sim_performed_MFF%(type, date)
  /* 3. Recurrent CRM training */
  else if type in recurrent_crm_training_set then
    %recurrent_crm_performed%(type, date)
  /* 4. Recurrent flight training */
  else if type in recurrent_flight_training_set then
    %recurrent_flight_training_performed_MFF%(type, ac_qual, date)
  /* 5. Recurrent CRMC training */
  else if type in recurrent_crmc_training_set then
    %recurrent_crmc_performed%(type, date)
  else
    false;
    
export %recurrent_not_performed_in_pp_ix%(Int ix) =
  %recurrent_type_expiry_date_pp_start_ix%(ix) <= %pp_end% and
  not %recurrent_performed%(%recurrent_activity_pp_start_ix%(ix), %any_ac_qual%, %pp_end%);

/*
 * 1. Recurrent emergency training
 */

/* Special case for PGT (FC) and REC (CC): If not previous
 * season's training performed a refresher must be planned. 
 * An existing document is needed, otherwise we require more. */
export %recurrent_refresher_reqd%(String type, Abstime date) =
  default(%recurrent_type_expiry_date%(type, %any_ac_qual%, date) <=
          %recurrent_season_start%(type, date), false);

%recurrent_emg_performed%(String type, Abstime date) =
  if %cabin_crew% then
    %recurrent_emg_performed_CC%(type, date)
  else
    any(duty(roster), %reqd_recurrent_pgt%)
    where (duty.%start_hb% < date and
    	   duty.%start_hb% >= %now_round_up% and
           trip.%is_ground_duty%)
    or %recurrent_performed_by_training_log%(type,date,"");
    
/* CR 381: Recurrent training CC is considered legally performed if:
 *	CX7 assigned in the recurrent period, or before first production after recurrent expiry.
 *  N* assigned before CX7 but after start of recurrent period.
 *  Recurrent period is from the date recurrent expires and 3 months back
 * Reference: N281
 */ 
%recurrent_emg_performed_CC%(String type, Abstime date) =
  let earliest_assign = %earliest_rec_assignment%(type, %any_ac_qual%, date),
      utc_time = crew.%utc_time%(date),
      last_cx7 = %last_perf_date_for_cc_rec_cx7%(utc_time),
      last_web = %last_perf_date_for_cc_rec_web%(utc_time);
  last_cx7 < utc_time and
  last_web < last_cx7 and
  last_web >= earliest_assign;
  
table reqd_recurrent_pgt =
  %recurrent_refresher_reqd%("PGT", duty.%start_hb%) -> 
    Bool %reqd_recurrent_pgt%;
  false   -> duty.%is_pgt%;
  true    -> %duty_is_pgt_ref%;
end

export %trip_is_pgt_ref% =
  trip.%is_pgt% and locate(%valid_pgt_ref_code_1%, %trip_pgt_code_full%) > 0
    or locate(%valid_pgt_ref_code_2%, %trip_pgt_code_full%) > 0;
export %duty_is_pgt_ref% =
  duty.%is_pgt% and locate(%valid_pgt_ref_code_1%, %trip_pgt_code_full%) > 0 
    or locate(%valid_pgt_ref_code_2%, %trip_pgt_code_full%) > 0;
/* This variable should catch if the web training is valid.*/
export %leg_is_cc_rec_web% =
  leg.%is_cc_rec_web% and
  length(%rec_code_full%) = 4 and
  substr(%rec_code_full%,1,2) = %rec_pgt_season_code% and
  substr(%rec_code_full%,3,2) <> "XX";
    
export %leg_is_rehearsal% =
    %crew_allowed_for_rehearsal_training% and
    (leg.%is_cc_rec_web% or leg.%is_pgt%);
    
%valid_pgt_ref_code_1% = "EX";
%valid_pgt_ref_code_2% = "EM";
%valid_rec_ref_code% = "NX";
table valid_pgt_and_rec_code(Abstime date) =
  %recurrent_cycle_year%(date) ->
    export %valid_pgt_code%, %valid_rec_code%;
  0 -> "EH", "NW";
  1 -> "EJ", "NP";
  2 -> "EK", "NS";
 
  - -> "EX", "NX"; /* Refresher codes */
end

/* Cycle start 01jan2007 ("EJ" and "NP"), 3 years cycle */
%recurrent_cycle_year%(Abstime date) =
  first(times(100), %times_index_0%)
    where (add_years(01jan2007, %times_index_0%) > date)
  mod 3;

%rec_code_full% =
    if leg.%is_cc_rec_web% and length(leg.%code%) = 2 then
        concat(%rec_pgt_season_code%, %rec_code%)
    else
        leg.%code%;
  
/* This variable will disregard season and ac family */
%pgt_code_compact% =
  if leg.%is_pgt% then
    /* leg.%code% will always include "E"
       The rest is to handle the hardcoded 2 or 4 character codes */
    concat("E", %pgt_base_number_leg%)
  else
    leg.%code%;
    
%pgt_code_ext% =
  default(if leg.%is_pgt% then
            concat(%rec_pgt_season_code%, %pgt_base_number_leg%)
          else
            leg.%code%, leg.%code%);

export %valid_new_pgt_code% = leg.%start_utc% >= 01May2013 00:00;
%pgt_code_full% =
  /* We allow hardcoded complete codes to override */
  if leg.%is_pgt% then
    if not %valid_new_pgt_code% and %leg_is_valid_pgt_refresher% then
        concat(substr(leg.%code%, 1, 3), %pgt_qual_code%)
    else if not %crew_needs_pgt_refresher% and length(leg.%code%) = 2 then
        concat(%pgt_code_ext%, %pgt_qual_code%)
    else
        leg.%code%
  else
    leg.%code%;

export %valid_ac_demo% =
    leg.%is_ac_demo% and
    substr(leg.%code%,3,1) = leg.%qual_code_map%(crew.%ac_qln%(leg.%start_utc%, 1));

export %leg_is_valid_pgt_refresher% =
    %leg_is_valid_untyped_pgt_refresher% or
    %leg_is_valid_typed_pgt_refresher%;
%leg_is_valid_untyped_pgt_refresher% =
    let code = leg.%code%;
    length(code) = 3 and
    (substr(code, 1, 2) = %valid_pgt_ref_code_1% or 
    substr(code, 1, 2) = %valid_pgt_ref_code_2%);
%leg_is_valid_typed_pgt_refresher% =
    let code = leg.%code%;
    length(code) = 4 and
    (substr(code, 1, 2) = %valid_pgt_ref_code_1% or 
    substr(code, 1, 2) = %valid_pgt_ref_code_2%) and
    substr(code, 4, 1) = %pgt_qual_code%;
export %any_type_specific_pgt_before_leg_start% =
    let start = leg.%start_utc%;
    any(leg(roster), %leg_is_valid_typed_pgt_refresher%)
    where(leg.%start_utc% < start);
export %crew_needs_pgt_refresher% = %recurrent_refresher_reqd%("PGT", leg.%start_date%);

export %trip_is_valid_pgt_refresher% =
  first(leg(trip), %leg_is_valid_pgt_refresher%)
  where (leg.%is_pgt%);

/* Historical data indicates that longhaul PGT are always E**4 */
%pgt_qual_code% =
    if not %valid_new_pgt_code% and length(leg.%code%) = 4 then substr(leg.%code%, 4,1)
    else if crew.%is_a3a4_qualified_at_date%(leg.%start_utc%) then "4"
    else if crew.%is_a3a5_qualified_at_date%(leg.%start_utc%) then "4"
    else leg.%qual_code_map%(crew.%ac_qln%(leg.%start_utc%, 1));
 
export %trip_pgt_code_full% =
  first(leg(trip), %pgt_code_full%)
  where (leg.%is_pgt%); /*ok for duty as well*/

%trip_pgt_code_ext% =
  first(leg(trip), %pgt_code_ext%)
  where (leg.%is_pgt%); /*ok for duty as well*/
  
%trip_pgt_code_compact% =
  first(leg(trip), %pgt_code_compact%)
  where (leg.%is_pgt%);  /*ok for duty as well*/

%rec_pgt_season_code% =
  /* Only flight crew can have recurrent refresher assigned automatically /EKG 090213 */
  if crew.%is_pilot% and %recurrent_refresher_reqd%("PGT", leg.%start_utc%) then 
    %valid_pgt_ref_code_1%
  else
    %valid_rec_pgt_code%(leg.%start_utc%);

%valid_rec_pgt_code%(Abstime date) =
    let checkdate = if calendar.%month_number%(date) = 12 and %crew_allowed_for_rehearsal_training% then
                        add_months(date,1)
                    else date;
    if crew.%is_pilot% then %valid_pgt_code%(checkdate)
    else %valid_rec_code%(checkdate);

%pgt_base_number_leg% = %pgt_base_number%(leg.%departure_airport_base%);
    
table pgt_table(String base) =
  base -> export %pgt_base_number%;
  "STO" -> "1";
  "CPH" -> "2";
  "OSL" -> "3";
  -     -> void_string;
end  

%trip_pgt_base_number% = 
  first(leg(trip), %pgt_base_number_leg%)
  where (leg.%is_pgt%);    /*ok for duty as well */
  
%pgt_trip_start_day% =
  first(leg(trip), round_down(leg.%start_lt%,24:00))
  where (leg.%is_pgt%);    /*ok for duty as well */
  
/*
 * 2. Recurrent simulator training
 */
%recurrent_sim_performed%(String type, Abstime date) =
  let rec_ac_qual = if type in rec_types_with_acqual
                    then %active_ac_qual%
                    else %any_ac_qual%,
      earliest_assignment_def = default(%earliest_rec_assignment%(type, rec_ac_qual, date), %pp_start% - 45 * 24:00);
  any(duty(roster), %reqd_recurrent_sim%(type))
  where (duty.%start_hb% < date and
         duty.%start_hb% >= earliest_assignment_def and
	 duty.%start_hb% >= %now_round_up% and
         %duty_is_own_sim%)
  or %_recurrent_performed_by_training_log%(type,date,"", earliest_assignment_def);    /*ok for duty as well */

%recurrent_sim_performed_MFF%(String type, Abstime date) =
  let rec_ac_qual = trip.%qual%,
      earliest_assignment_def = default(%earliest_rec_assignment%(type, rec_ac_qual, date), %pp_start% - 45 * 24:00);
  any(duty(roster), %reqd_recurrent_sim%(type))
  where (duty.%start_hb% < date and
         duty.%start_hb% >= earliest_assignment_def and
         %duty_is_own_sim%)
  or %_recurrent_performed_by_training_log%(type,date,"", earliest_assignment_def);

/* earliest_date, if supplied, should be used to only check assignment in 
   "may have" interval. Only of use for PC/OPC. 1Jan1986 can be supplied to
   disable. */
%_recurrent_performed_by_training_log%(String type,Abstime date, String code, Abstime earliest_date)=
    let rec_date = default(%last_recurrent_date_in_training_log%(type,code),1jan1986);
    if rec_date < earliest_date then
      false
    else if rec_date <> 1jan1986 then
      default(date <= add_months(rec_date,%validity%(type,rec_date)),false)
    else 
      false;
      
%recurrent_performed_by_training_log%(String type,Abstime date, String code) =
  %_recurrent_performed_by_training_log%(type, date, code, 1Jan1986);
    

/* A PC always includes an OPC, and if crew is double qualified
 * (i.e. A3A4/3738) a PC on one type includes an OPC on all other types. */
%reqd_recurrent_sim%(String type) =
  any(leg(duty), leg.%is_valid_sim% and leg.%is_pc_or_opc%) and
  %_correct_recurrent_sim%(type);

export %other_ac_qual%(String qual) =
    if qual = "A3" then "A4" else "A3";
    
table correct_recurrent_sim(String type) =
    %duty_is_pc%, %duty_sim_type%, type -> %_correct_recurrent_sim%;
    /* A PC on A3/A4 includes PC on same type and OPC on all others */
    -, "PCA3", "PCA3" -> true;
    -, "PCA3", "PCA3A5" -> true;
    -, "PCA3", "OPCA3" -> true;
    -, "PCA3", "OPCA3A5" -> true;
    -, "PCA3", "OPCA4" -> true;
    -, "PCA4", "PCA4" -> true;
    -, "PCA4", "OPCA3" -> true;
    -, "PCA4", "OPCA3A5" -> true;
    -, "PCA4", "OPCA4" -> true;
    -, "PCA5", "PCA3" -> true; /* Not sure if this is needed */
    -, "PCA5", "PCA3A5" -> true;
    -, "PCA5", "OPCA3" -> true; /* Not sure if this is needed */
    -, "PCA5", "OPCA3A5" -> true;
    -, "PCA5", "OPCA4" -> true;
    -, "PCA5", "PCA5" -> true;
    /* An OPC on A3/A4 includes an OPC on other type */
    -, "OPCA3", "OPCA3" -> true;
    -, "OPCA3", "OPCA3A5" -> true;
    -, "OPCA3", "OPCA4" -> true;
    -, "OPCA4", "OPCA3" -> true;
    -, "OPCA4", "OPCA3A5" -> true;
    -, "OPCA4", "OPCA4" -> true;
    -, "OPCA5", "OPCA3" -> true; /* Not sure if this is needed */
    -, "OPCA5", "OPCA3A5" -> true;
    -, "OPCA5", "OPCA4" -> true;
    -, "OPCA5", "OPCA5" -> true;
    /* A PC includes an OPC */
    true, -, "PC" -> %check_qual%(type);
    true, -, "OPC" -> true;
    /* An OPC is nothing more */
    false, -, "OPC" -> %check_qual%(type);
    -, -, - -> false;
end

%check_qual%(string type) =
    let doc_qual = %recurrent_type_expiry_ac_qual%(type, %any_ac_qual%, duty.%end_hb%),
        sim_qual = duty.%first_sim_leg_qual%;
    /* A Skill or PC change covers any PC/OPC need */
    duty.%is_pc_change_month% or duty.%is_skill_test%
    or
    /* In general the sim should have the qual as specified in document */
    (if parameters.%sim_pass_classic_req%(duty.%end_hb%) or
        (doc_qual <> "37" and doc_qual <> "38")
     then
       sim_qual = doc_qual
     else
       true);

%duty_sim_type% =
  concat(if %duty_is_pc% 
         then "PC" 
         else if %duty_is_opc% then "OPC"
         else duty.%group_code%, 
         duty.%first_sim_leg_qual%);
  
export %sim_type% =
  concat(if %trip_is_pc% 
         then "PC" 
         else if %trip_is_opc% then "OPC"
         else trip.%group_code%, 
         trip.%first_sim_leg_qual%);

/* PC/OPC trips will have an S*-code (OPC).
   Assigned to crew in need of PC they should be converted to PC (Y*-code) */
export %trip_is_pc% =
    any(leg(trip), %leg_is_pc%);
export %trip_is_opc% =
    trip.%is_opc% and not %trip_is_pc%;

export %duty_is_pc% =
    any(leg(duty), %leg_is_pc%);
export %duty_is_opc% =
    duty.%is_opc% and not %duty_is_pc%;
    
export %leg_is_pc% =
  leg.%is_pc_or_opc% and %leg_is_own_sim% and
  (not (leg.%is_forced_opc% or %assigned_as_assist_for_ac_qual%(leg.%qual%))) and
  (leg.%is_pc% or
   leg.%is_pc_change_month% or
   leg.%is_forced_pc% or
   leg.%is_skill_test% or
   leg.%is_performed_pc% or
   %leg_is_opc_fulfilling_pc%);

export %leg_is_opc% = 
  leg.%is_pc_or_opc% and not %leg_is_pc%;

export %leg_is_pc_opc_not_Z% =
  (%leg_is_pc% and not leg.%is_skill_test%) or %leg_is_opc_not_Z%;

export %leg_is_opc_not_Z% =
  leg.%is_pc_or_opc% and not (%leg_is_pc% or leg.%is_skill_test%);

%has_pc_in_interval%(Abstime s, Abstime e) =
  any(leg(roster), %leg_is_pc%)
  where (leg.%start_hb%>=s and leg.%start_hb% < e);

%has_pc_opc_not_Z_in_interval%(Abstime s, AbsTime e) =
  any(leg(roster), %leg_is_pc_opc_not_Z%)
  where (leg.%start_hb%>=s and leg.%start_hb% < e);

/* These should not be exported. Valid is_pc/is_opc should include 
   "assigned_as_assist", but due to a circularity that can't be done directly.
   /EKG 080117 */
%leg_is_opc_fulfilling_pc% =
  default(leg.%is_opc% and
          %crew_is_in_pc_period_leg%,
          false);

%crew_is_in_pc_period_leg% =
  let date = leg.%start_hb%,
      qual = leg.%qual%,
      pc_month = if crew.%is_a3a4_qualified_at_date%(date) then
                    /* This variable was built for assist calculation, but can
                       be used here too since it's always a PC month for A3/A4
                       crew. */
                    %pc_opc_expiry_month_this_season%(date)
                 else
                    %pc_month_for_ac_qual%(qual),
      pc_expiry = %rec_expiry_fixed%(add_months(round_down_year(date), pc_month), date),
      earliest_assignment = add_months(pc_expiry, -3);
  /* First we make sure the leg has the correct qual to ever be considered PC */
  %correct_qual_for_pc%(date, qual) and
  /* Next we check that the leg is in the PC-period this season.
     We need some magic to handle the case where the document already is 
     extended */
  date < pc_expiry and 
  date >= nmax(earliest_assignment, %recurrent_season_start%("PC", date));
  
%correct_qual_for_pc%(Abstime date, String qual) =
  /* SKN double qualified: We check that the PC doc is on this qual */
  if crew.%is_skn_double_qualified_at_date%(date)
  then (if parameters.%sim_pass_classic_req%(date) then
         %recurrent_type_expiry_ac_qual%("PC", %any_ac_qual%, date) = qual
       else
         %recurrent_type_expiry_ac_qual%("PC", %any_ac_qual%, date) = "37" or
         %recurrent_type_expiry_ac_qual%("PC", %any_ac_qual%, date) = "38")
  /* SKI double qualified: We check that this seasons PC doc is on this qual */
  else if crew.%is_a3a4_qualified_at_date%(date) then
    locate(qual, %ski_pc_qual_this_season%(date)) > 0
  /* If crew is single qual it's assumed ok */
  else
    true;
    
%ski_pc_qual_this_season%(Abstime date) =
  let month = %pc_opc_expiry_month_this_season%(date);
  if month = %pc_month_1% then
    %pc_qual_1%
  else
    %pc_qual_2%;
  
/*
 * 3. Recurrent CRM training
 */
%recurrent_crm_performed%(String type, Abstime date) =
  any(duty(roster), duty.%is_crm%)
  where (duty.%start_hb% < date and
  	duty.%start_hb% >= %now_round_up% and
         trip.%is_crm%)
  or %recurrent_performed_by_training_log%(type,date,"");

 /*
 * 4. Recurrent CRMC training
 */
export %recurrent_crmc_performed%(String type, Abstime date) =
  any(duty(roster), duty.%is_crmc%)
  where (duty.%start_hb% < date and
  	duty.%start_hb% >= %now_round_up% and
         trip.%is_crmc%)
  or %recurrent_performed_by_training_log%(type,date,"");

/*
 * 5. Recurrent flight training
 */

%recurrent_flight_training_performed%(String type, String doc_ac_qual, Abstime date) =
  let ac_qual = %recurrent_type_expiry_ac_qual%(type, doc_ac_qual, date),
      expiry_date = default(%recurrent_type_expiry_date%(type, %any_ac_qual%, date),1jan1986);
  if ac_qual = "A3 or A4 or A5" then /* Handles the case where upcoming lc qual is "A3 or A5" */
    %_recurrent_flight_training_performed%(type, date, "A3", expiry_date)
    or %_recurrent_flight_training_performed%(type, date, "A4", expiry_date)
    or %_recurrent_flight_training_performed%(type, date, "A5", expiry_date)
  else
    %_recurrent_flight_training_performed%(type, date, ac_qual, expiry_date);

%_recurrent_flight_training_performed%(String type, Abstime date, String ac_qual, Abstime expiry_date) =
any(trip(roster), %reqd_recurrent_flight_training%(type, ac_qual))
where (trip.%has_active_flight% and
        (expiry_date > trip.%end_hb% or
              (trip.%start_hb% <= date and any(leg(trip),leg.%is_active_flight%)
              where (leg.%start_hb% > expiry_date and
                      %is_lc_or_preceded_by_lc%))))
or %recurrent_performed_by_training_log%(type,date,ac_qual);

%recurrent_flight_training_performed_MFF%(String type, String doc_ac_qual, Abstime date) =
  let ac_qual = %recurrent_type_expiry_ac_qual%(type, doc_ac_qual, date),
      expiry_date = default(%recurrent_type_expiry_date%(type, trip.%qual%, date),1jan1986);
  %_recurrent_flight_training_performed_MFF%(type, date, ac_qual, expiry_date);

%_recurrent_flight_training_performed_MFF%(String type, Abstime date, String ac_qual, Abstime expiry_date) =
any(trip(roster), %reqd_recurrent_flight_training_MFF%(type, ac_qual))
where (trip.%has_active_flight% and
        (expiry_date > trip.%end_hb% or
              (trip.%start_hb% <= date and any(leg(trip),leg.%is_active_flight%)
              where (leg.%start_hb% > expiry_date and
                      %is_lc_or_preceded_by_lc%))))
or %recurrent_performed_by_training_log%(type,date,ac_qual);

%_recurrent_flight_training_performed_after_expiry%(String type, Abstime date, String ac_qual, Abstime expiry_date) =
  any(trip(roster), %reqd_recurrent_flight_training%(type, ac_qual))
  where (not any(leg(trip),leg.%is_active_flight%)
                where (leg.%start_hb% > expiry_date and
                       not %is_lc_or_preceded_by_lc%));

%is_lc_or_preceded_by_lc% =
  any(leg(trip),leg.%is_lc%)
    from (current) backwards
    while (leg.%is_lc% or
           not leg.%is_lc%);

%reqd_recurrent_flight_training%(String type, String ac_qual) =
   /* LC only needs to checkqual for a3 and a4 */
  if type ="LC" and not (ac_qual = "A3" or ac_qual = "A4" or ac_qual = "A5")
  then
      %nr_recurrent_flight_training_legs%(type, "") >=
      %min_recurrent_flight_training_legs%
  else
  %nr_recurrent_flight_training_legs%(type, ac_qual) >=
    %min_recurrent_flight_training_legs%;

%reqd_recurrent_flight_training_MFF%(String type, String ac_qual) =
  %nr_recurrent_flight_training_legs%(type, ac_qual) >=
    %min_recurrent_flight_training_legs%;

/* LC must include at least 2 legs */
%min_recurrent_flight_training_legs% = 2;
/* To handle the case where trips for some reason are split, we check previous 
   trip when the current trip only had one LC leg */
%nr_recurrent_flight_training_legs%(String type, String ac_qual) =
    let rec_flights_this_trip = %_nr_recurrent_flight_training_legs%(type, ac_qual);
    if rec_flights_this_trip >= %min_recurrent_flight_training_legs% then
        rec_flights_this_trip
    else if rec_flights_this_trip = 1 then
        rec_flights_this_trip + 
        default(prev(trip(roster), %_nr_recurrent_flight_training_legs%(type, ac_qual)), 0)
    else 0;
    
%_nr_recurrent_flight_training_legs%(String type, String ac_qual) =
  count(leg(trip))
  where ((%leg_training_code_safe% = type or type = "LC" and %leg_training_code_safe% = "ILC")  and
         (ac_qual = "" or leg.%qual% = ac_qual));

%last_performed_time_of_types_before_date%(string type1, string type2,
                                           abstime date,string acqual) =
       default(max(times(%ctl_rows%),%current_ctl_time%)
               where (%current_ctl_time% <= date and
                      (%current_ctl_type% = type1 or %current_ctl_type% = type2) and
                      %ctl_code%(%times_index_0%) = acqual)
               ,1jan1986);      

/*
** Allowed recurrent training assignment interval
*/
export %recurrent_must_not_be_planned_too_early% =
  %assignment_interval%(%leg_rec_type%, leg.%start_hb%) > 0;

export %earliest_date_for_planned_recurrent% =
  if %leg_rec_type% = "LC" and (crew.%is_a2a3_qualified% or crew.%is_a2a5_qualified% or leg.%qual% = "A3" or leg.%qual% = "A2") then
    %earliest_rec_assignment_incl_perf%(%leg_rec_type%, leg.%qual%, leg.%start_date%, false)
  else if crew.%is_MFF% then
    %earliest_rec_assignment_incl_perf_MFF%(%leg_rec_type%, %any_ac_qual%, leg.%start_date%, false)
  else
    %earliest_rec_assignment_incl_perf%(%leg_rec_type%, %any_ac_qual%, leg.%start_date%, false);

/* Earliest date is assignment_interval months from due date.
 * For some of the activities it must not cross the recurrent season .
 * Recurrent expiry date might void, but recurrent season start will never void 
 */
export %earliest_rec_assignment_incl_perf%(String type, String ac_qual, Abstime date, bool check_expiry) =
    if(type = "LC") then
     %_earliest_rec_assignment%(type, date, %recurrent_type_performed_expiry_date_matching_type%(type, ac_qual, date,
                                                                           check_expiry))
    else
     %_earliest_rec_assignment%(type, date, 
                               %recurrent_type_expiry_date_incl_performed%(type, ac_qual, date,
                                                                           check_expiry));
export %earliest_rec_assignment_incl_perf_MFF%(String type, String ac_qual, Abstime date, bool check_expiry) =
    if(type = "LC") then
     %_earliest_rec_assignment%(type, date, %recurrent_type_performed_expiry_date_matching_type%(type, ac_qual, date,
                                                                           check_expiry))
    else
     %_earliest_rec_assignment%(type, date,
                               %recurrent_type_expiry_date_incl_performed_MFF%(type, ac_qual, date,
                                                                           check_expiry));

export %earliest_rec_assignment%(String type, String ac_qual, Abstime date) =
    %_earliest_rec_assignment%(type, date,
                               %recurrent_type_expiry_date%(type, ac_qual, date));
    
%earliest_rec_assign_trip% = 
    %earliest_rec_assignment%(%rec_type%, %any_ac_qual%, trip.%start_hb%);
    
%_earliest_rec_assignment%(String type, Abstime date, Abstime expiry_date) =
  let earliest_date = %earliest_rec_default%(type, date, expiry_date);
  if type in recurrent_emg_training_set and
     %crew_allowed_for_rehearsal_training%
  then
    earliest_date
  else
    nmax(earliest_date, %recurrent_season_start%(type, expiry_date - 0:01));
    
%earliest_rec_default%(String type, Abstime date, abstime expiry_date) =
    default(add_months(expiry_date, -%assignment_interval%(type, date)),
            1Jan1986);

/* Table: crew_rehearsal_recurrent */
%crew_rehearsal_recurrent_table% = %etab_path%(%crew_rehearsal_recurrent_table_p%);
%crew_rehearsal_recurrent_table_p% =
  parameter "crew_rehearsal_rec"
  remark "ETAB: Table defining crew allowed for rehearsal recurrent activities";

table crew_allowed_for_rehearsal_training =
  crew.%id% ->
    String %_crew_allowed_for_rehearsal_training%;
  external %crew_rehearsal_recurrent_table%;
  crew -> crew;
  - -> void_string;
end

export %crew_allowed_for_rehearsal_training% =
  not void(%_crew_allowed_for_rehearsal_training%);

/* Earliest date based on assignment_ival */
%earliest_assignment_date%(String type, Abstime date) =
  add_months(%recurrent_type_expiry_date%(type, %any_ac_qual%, date),
             -%assignment_interval%(type, date));

export %recurrent_type_has_expired% = duty.%start_hb% > %rec_type_expiry_date_incl_performed%;
export %rec_type_expiry_date_incl_performed% =
  %recurrent_type_expiry_date_incl_performed%(%rec_type%, %any_ac_qual%, duty.%start_hb%, false);

/* Recurrent is typically a ground duty. LC (Linecheck) is the only flight duty
   recurrent activity. It is defined by leg.%training_code%.
   Special case for double qualified A3A4-crew, LC should be performed on 
   alternating ac-types.
   For CC recurrent we return "REC" on both web training and course, to be used
   in legality as well as updates. */
export %rec_type% =
    if any(leg(duty), leg.%is_any_lc%) then "LC"
    else if duty.%is_pgt% then "PGT"
    else if duty.%has_cc_rec% or any(leg(duty), %leg_creates_rec%) then "REC"
    else if duty.%is_pc_or_opc% and %duty_is_own_sim% then
        concat(if %duty_is_pc% then "PC" else "OPC",
               if crew.%is_long_haul_trip_start% and trip.%first_sim_leg_qual% in pc_opc_doc_quals then /* FIXME: This needs to be properly fixed for PC/OPC|A3/A3A5/A4 */
                    trip.%first_sim_leg_qual%
               else "")
    else if duty.%is_crm% then "CRM"
    else if duty.%is_crmc% then "CRMC"
    else "";
    
set pc_opc_doc_quals = "A3", "A4","A5";

export %leg_rec_type% =
    if leg.%is_any_lc% then "LC"
    else if leg.%is_pgt% then "PGT"
    else if leg.%is_cc_rec% then "REC"
    else if leg.%is_pc_or_opc% and %leg_is_own_sim% then
        concat(if %leg_is_pc% then "PC" else "OPC",
               if crew.%is_long_haul_leg_start% and leg.%qual% in pc_opc_doc_quals then /* FIXME: This needs to be properly fixed for PC/OPC|A3/A3A5/A4 */
                    leg.%qual%
               else "")
    else if leg.%is_crm% then "CRM"
    else if leg.%is_crmc% then "CRMC"
    else "";
    
export %trip_has_any_rectype% = %trip_has_rectype%("ANY_TYPE");

export %trip_has_rectype%(string rectype) =
    default(first(times(%nr_rec_types%),%trip_has_rec_type_ix%)
             where(rectype = "ANY_TYPE" or 
                   %trip_rec_type_ix% = rectype), false);

%nr_rec_types% = 
    count(times(100)) while (not void(%trip_has_rec_type_ix%));  
    
table trip_rec_types_lookup=
    %times_index_0% -> %trip_has_rec_type_ix%, %trip_rec_type_ix%;
    1 ->  any(leg(trip), leg.%is_any_lc%), "LC";
    2 ->  trip.%is_pgt% ,"PGT";
    3 ->  trip.%has_cc_rec%, "REC";
    4 ->  %trip_is_pc_or_opc%  , %trip_pc_or_opc_rec_type% ;/* PC,PCA*, OPC, OPCA* */
    5 ->  trip.%is_crm% , "CRM";
    6 ->  trip.%is_crmc% , "CRMC";
    - -> void_bool, void_string;
end
    
%trip_is_pc_or_opc% = 
    trip.%is_pc_or_opc% and 
    not (trip.%is_sim_instr% or trip.%is_sim_instr_supervis% or trip.%is_sim_instr_ol% or trip.%is_sim_instr_supol%);
 
export %trip_is_own_pc_opc% =
    trip.%is_pc_or_opc% and 
    not (trip.%is_sim_instr% or trip.%is_sim_instr_supervis% or trip.%is_sim_instr_ol% or trip.%is_sim_instr_supol%) and
    not %trip_is_sim_assist%;

export %duty_is_own_pc_opc% =
    duty.%is_pc_or_opc% and
    not (duty.%is_sim_instr% or duty.%is_sim_instr_supervis% or duty.%is_sim_instr_ol% or duty.%is_sim_instr_supol%) and
    not %duty_is_sim_assist%;

%trip_pc_or_opc_rec_type% = 
    concat(if %trip_is_pc% then "PC" else "OPC",
           if crew.%is_long_haul_trip_start%
           then trip.%first_sim_leg_qual%
           else "");

export %recurrent_type_expiry_date%(String type, String ac_qual, Abstime date) =
  let rec_qual = if type in rec_types_with_acqual
                 then crew.%expiry_doc_alternating_ac_qual%("REC", type, ac_qual, date)
                 else "",
      expiry_ac_qual = if crew.%is_a3a4_qualified_at_date%(date)
                          or crew.%is_a3a5_qualified_at_date%(date)
                       then ac_qual
                       else rec_qual,
      doc_ac_qual = if (not (type in rec_types_with_acqual)) and expiry_ac_qual = %active_ac_qual%
                    then %any_ac_qual%
                    else expiry_ac_qual,
      doc_expiry = 
      if type = "OPCA5" or type = "OPCA3" then
         if not void(crew.%document_expiry_date_subtype%("REC", "OPCA3A5", doc_ac_qual, date)) and not void(crew.%document_expiry_date_subtype%("REC", type, doc_ac_qual, date)) then
             nmax(crew.%document_expiry_date_subtype%("REC", type, doc_ac_qual, date),crew.%document_expiry_date_subtype%("REC", "OPCA3A5", doc_ac_qual, date))
         else
             default(crew.%document_expiry_date_subtype%("REC", "OPCA3A5", doc_ac_qual, date), crew.%document_expiry_date_subtype%("REC", type, doc_ac_qual, date))
      else if type = "PCA5" or type = "PCA3" then
         if not void(crew.%document_expiry_date_subtype%("REC", "PCA3A5", doc_ac_qual, date)) and not void(crew.%document_expiry_date_subtype%("REC", type, doc_ac_qual, date)) then
             nmax(crew.%document_expiry_date_subtype%("REC", type, doc_ac_qual, date),crew.%document_expiry_date_subtype%("REC", "PCA3A5", doc_ac_qual, date))
         else
             default(crew.%document_expiry_date_subtype%("REC", "PCA3A5", doc_ac_qual, date), crew.%document_expiry_date_subtype%("REC", type, doc_ac_qual, date))
      else
        crew.%document_expiry_date_subtype%("REC", type, doc_ac_qual, date);
  if rec_qual = ""
  /* Handles the case where upcoming lc qual is "A3 or A4" */
  or rec_qual = "A3 or A5"
  or %_has_qual%(rec_qual, date)
  or %_has_qual%("FF", date)
  or %_has_qual%(rec_qual, doc_expiry - 0:01) /* for better performance! */
  or (rec_qual = "36" and %_has_qual%("38", date)) 
  or (rec_qual = "38" and %_has_qual%("36", date))
  then doc_expiry
  else void_abstime;
  
export %recurrent_type_expiry_date_for_acqual%(String type, String acqual, Abstime date) =
      crew.%document_expiry_date_subtype%("REC", type, acqual, date);

export %recurrent_type_expiry_date_pp_start_ix%(Int ix) =
  %recurrent_type_expiry_date%(%recurrent_activity_pp_start_ix%(ix), %any_ac_qual%, %pp_start%);
export %recurrent_type_expiry_date_incl_performed_ix%(Int ix) =
  %recurrent_type_expiry_date_incl_performed%(%recurrent_activity_pp_start_ix%(ix), %any_ac_qual%, %pp_start%, true);

/* For selects and crew warnings we need to check performed activities up to 
   expiry date or pp_end to cover for refreshers.
   But for legality, we need to evaluate only until the supplied date.
   The variable is always called with a hb time, and this is ok for crew_document
   lookup. But crew_training_log is in utc.
   */

export %recurrent_type_expiry_date_incl_performed%(String type, String ac_qual, Abstime date, bool check_expiry) =
  let expiry_date = default(%recurrent_type_expiry_date%(type, ac_qual, date), %abstimemin%),
      stop_date = nmax(expiry_date, %pp_end%),
      check_date = if check_expiry then stop_date else date,
      validity = %validity%(type, date),
      recurrent_performed = default(%recurrent_performed%(type, ac_qual, check_date), false);
  if %planned_rec_doc_creator%(type, ac_qual, date) then
    add_months(round_up_month(date), validity)
  else if recurrent_performed  then
    add_months((if expiry_date = %abstimemin% then %pp_start% else nmax(expiry_date,%pp_start%)), validity)
  else
    expiry_date;

export %recurrent_type_expiry_date_incl_performed_MFF%(String type, String ac_qual, Abstime date, bool check_expiry) =
  let expiry_date = default(%recurrent_type_expiry_date%(type, ac_qual, date), %abstimemin%),
      stop_date = nmax(expiry_date, %pp_end%),
      check_date = if check_expiry then stop_date else date,
      validity = %validity%(type, date),
      recurrent_performed = default(%recurrent_performed_MFF%(type, ac_qual, check_date), false);
  if %planned_rec_doc_creator_MFF%(type, ac_qual, date) then
   if type in doc_per_qual and not %has_matching_qual_pc%(date) then
     if %check_matching_pc_leg_qual%(type, date) then
      add_months(round_up_month(date), validity)
     else if recurrent_performed  then
      add_months((if expiry_date = %abstimemin% then %pp_start% else expiry_date), validity)
     else if %recurrent_performed_qual_match%(type) then
      add_months((if expiry_date = %abstimemin% then %pp_start% else expiry_date), validity)
     else
      expiry_date
   else add_months(round_up_month(date), validity)
  else if recurrent_performed  then
     add_months((if expiry_date = %abstimemin% then %pp_start% else expiry_date), validity)
  else if %recurrent_performed_qual_match%(type) then
     add_months((if expiry_date = %abstimemin% then %pp_start% else expiry_date), validity)
  else
     expiry_date;

set doc_per_qual = "PC","OPC","PCA3","OPCA3","PCA5","OPCA5";
    
export %recurrent_type_performed_expiry_date_matching_type%(String type, String ac_qual, Abstime date, bool check_expiry) =
  let expiry_date = default(%recurrent_type_expiry_date%(type, ac_qual, date), %abstimemin%),
      stop_date = nmax(expiry_date, %pp_end%),
      check_date = if check_expiry then stop_date else date,
      validity = %validity%(type, date),
      recurrent_performed = default(%recurrent_performed%(type, ac_qual, check_date), false),
      recurrent_performed_after_expiry = %_recurrent_flight_training_performed_after_expiry%( type, check_date,  ac_qual,  expiry_date);
  if %planned_rec_doc_creator%(type, ac_qual, date) then
    add_months(round_up_month(date), validity)
  else if recurrent_performed and not recurrent_performed_after_expiry then
    add_months((if expiry_date = %abstimemin% then %pp_start% else expiry_date), validity)
  else
    expiry_date;
    

export %rec_expiry_fixed%(Abstime expiry, Abstime date)=
  %_rec_fixed%(true, expiry, date);

export %earliest_rec_fixed%(Abstime earliest_def, Abstime date) =
  %_rec_fixed%(false, earliest_def, date);

%_rec_fixed%(Bool expiry, Abstime def, Abstime date) =
  /* We want the smallest expiry that is still larger than this date,
     but the largest earliest assignment that is still smaller than this date.
     We only care to make this work for the last 10 years. I.e. legality will
     be wrong for older dates than that.*/
  let year_offset = if expiry then 1 else 0;
  if date < def then
    first(times(10), add_years(def, year_offset - %times_index_0%))
    where(add_years(def, -%times_index_0%) <= date)
  else
    def;

/* Type can be any of OPC, OPCA3, OPCA3A5, OPCA4, PC, PCA3, PCA3A5, PCA4, PGT, CRM, CRMC, LC, REC */
export %last_recurrent_performed_of_type%(String type, String ac_qual, Abstime date) =
  default(last(trip(roster), round_up_month(trip.%start_utc%))
          where ((trip.%is_ground_duty% or type = "LC") and
                 trip.%start_hb% < date and
                 (%trip_has_rectype%(type) or 
                 %_opc_fullfilled_by_pc%(type)) and
                 not %trip_is_sim_assist%
                 ), 
          default(%last_recurrent_date_in_training_log%(type, ac_qual), 1jan1986));

export %last_recurrent_performed_of_type_MFF%(String type, String ac_qual, Abstime date) =
  default(last(trip(roster), round_up_month(trip.%start_utc%))
          where (((trip.%is_ground_duty% or type = "LC") and ac_qual = trip.%qual% ) and
                 trip.%start_hb% < date and
                 (%trip_has_rectype%(type) or
                 %_opc_fullfilled_by_pc%(type)) and
                 not %trip_is_sim_assist%
                 ),
          default(%last_recurrent_date_in_training_log%(type, ac_qual), 1jan1986));

/* This is a simplification. If there is a PC or OPC (A3/A4) of the wrong type
   we wont catch this. I don't think it will happen. /EKG 081009 
   Initial linechecks are logged as ILC but creates an LC document, so we need
   to handle that too. /EKG 081211 
   This variable only checks for activities in planned, not performed time, and
   is used when a roster lookup has failed. It doesn't need a date. /EKG 100409*/
%last_recurrent_date_in_training_log%(string type, string code) =
    let type_fixed = %_rec_type_fixed%(type);
    max(times(%ctl_rows%),%current_ctl_time%)
    where (%_time_in_planned_rec_period%(%current_ctl_time%) and
           %_rec_type_match%(%ctl_type%(%times_index_0%), type_fixed) and
           %_rec_code_match%(type_fixed, code, %ctl_code%(%times_index_0%)));
    
%last_recurrent_creator_in_training_log%(String type, String ac_qual) =
  max(times(%ctl_rows%),%current_ctl_time%)
  where (%_time_in_planned_rec_period%(%current_ctl_time%) and
         %_rec_creator_type_match%(%ctl_type%(%times_index_0%), type) and
         %_rec_creator_code_match%(type, ac_qual));

%_rec_creator_type_match%(String logtype, String type) =
  if type in recurrent_sim_training_set then
    /* Look for skill test. PC CHANGE isn't logged, we need to look for all PC
       This is not entirely correct, but will only generate faults in displayed
       future expiry dates */
    logtype = "PC"
  else if type = "LC" then
    /* Look for LC/ILC */
    logtype = "ILC" or logtype = "LC"
  else if type = "REC" then
    /* Look for CRA, CRB, or RECREF */
    logtype in rec_creating_courses
  else if type = "PGT" then
    /* Look for PGT REF */
    logtype = "PGT"
  else
    false;

%_rec_creator_code_match%(String type, String ac_qual) =
  if type = "PGT" then
    substr(%ctl_code%(%times_index_0%),1,2) = "EX"
  else
    if type = "LC" and ac_qual <> %any_ac_qual% then
      %ctl_code%(%times_index_0%) = ac_qual
    else
      true;


%_rec_code_match%(String rectype, String lookup, String logcode) =
    /* Lookup is empty string, any code is fine */
    lookup = "" or
    /* Lookup matches exactly */
    lookup = logcode or
    /* For LC we need to handle 37/38 */
    rectype = "LC" and 
    (lookup = "37" and logcode = "38" or lookup = "38" and logcode = "37") or
    /* For LC/PC/OPC we need to handle 36/38 */
    (rectype = "LC" or rectype = "PC" or rectype = "OPC") and 
    (lookup = "36" and logcode = "38" or lookup = "38" and logcode = "36");
   
/* We check the log for activities not on the roster, but still not performed.
   We have a "grace" period of seven days since "now" to handle if the nightjob 
   hasn't worked. /EKG 090406 */
%_time_in_planned_rec_period%(Abstime ctl_time) =
    ctl_time >= fundamental.%now_date%-7*24:00 and
    ctl_time <= fundamental.%plan_start%;
           
set rec_creating_courses = "CONVERSION REFRESHER B", "CONVERSION REFRESHER A", "RECURRENT REFRESHER";

%_rec_type_match%(String logtype, String lookup) =
    /* Special cases where some log types will be valid for other lookups */
    (lookup = "OPC" and logtype = "PC") or
    (lookup = "REC" and logtype in rec_creating_courses) or
    (lookup = "LC" and logtype = "ILC") or
    /* Standard case, regular matching */
    lookup = logtype;
    
/* We need to do this since we log PC/OPC without the A3/A4 /EKG 081009 */
%_rec_type_fixed%(String type) =
    if substr(type, 1, 2) = "PC" then "PC"
    else if substr(type, 1, 3) = "OPC" then "OPC"
    else if substr(type, 1, 3) = "PGT" then "PGT"
    else type;
    
%_opc_fullfilled_by_pc%(string opc_type) = 
    if substr(opc_type,1,3) <> "OPC" then false
    else if opc_type = "OPC" then %trip_has_rectype%("PC")
    else if opc_type = "OPCA3" or opc_type = "OPCA3A5" or opc_type = "OPCA4" or opc_type = "OPCA5"
    then %trip_has_rectype%("PCA3") or %trip_has_rectype%("PCA4") or %trip_has_rectype%("PCA5")
    else (trip.%is_pc_change_month% or 
          trip.%is_skill_test% or 
          trip.%is_forced_pc%) ;
    
/* Double qualified SKI crew should alternate LC on A3/A4.
   Double qualified SKN crew should alternate PC/OPC on 37/38.
   In general we make sure that crew performs recurrent on a valid acqual */
export %recurrent_type_expiry_ac_qual%(String type, String doc_ac_qual, Abstime date) =
    if type in rec_types_with_acqual then
        default(crew.%expiry_doc_alternating_ac_qual%("REC", type, doc_ac_qual, date), "")
    else "";

set rec_types_with_acqual = "LC", "PC", "OPC";

/****************************************************************
 * Section 3: Initial/Conversion/Transition training
 ***************************************************************/
export %need_table% = %etab_path%(%need_table_p%);
%need_table_p% =
  parameter "crew_training_need"
  remark "ETAB: Table defining crew on training and their flight training";
  
%use_flight_buffer_p% =
  parameter false
  remark "[Script] Use buffer when assigning flights. Should always be off";

table crew_training_need(Abstime date, int ix) =
  crew.%id%, date, ix ->
    String %_course_name%,
    Abstime %_course_start%,
    Abstime %_course_end%,
    Int %course_index%,
    export String %course_attribute%,
    String %_course_acqual%,
    Int %_course_flights%,
    Int %_course_days%,
    Abstime %_course_completion%,
    export String %course_descr%,
    String %_course_subtype%;
  external %need_table%;
  crew, (validfrom, validto(, part ->
    course, validfrom, validto, part, attribute, acqual, flights, maxdays, completion, si, course_subtype;
  -, -, - ->
    void_string, void_abstime, void_abstime, void_int,
    void_string, void_string, void_int, void_int, void_abstime, void_string, void_string;
end

/* Course name, start, and end is the same for all course parts */
export %course_name%(Abstime date) =
    %_course_name%(date, 1);
export %course_subtype%(Abstime date) =
    default(%_course_subtype%(date, 1), "NONE");
export %course_start%(Abstime date) =
    %_course_start%(date, 1);
export %course_start_leg_start% =
    %course_start%(leg.%start_hb%);
export %course_end%(Abstime date) =
    %_course_end%(date, 1);
export %course_completion%(Abstime date) =
    %_course_completion%(date, 1);

/* These might be void */
export %course_acqual_1%(Abstime date) = default(%_course_acqual%(date, 1), "");

export %course_acqual%(Abstime date, Int ix) = 
    let qual = default(%_course_acqual%(date, ix), "");
    if crew.%has_ac_qln%(date, qual) then qual
    else "";
%course_has_bad_acqual%(Abstime date, Int ix) =
  let qual = default(%_course_acqual%(date, ix), "");
  qual <> "" and not crew.%has_ac_qln%(date, qual);
  
export %course_has_acqual_req%(Abstime date, Int ix) =
    %course_acqual%(date, ix) <> "";
export %course_acqual_voidy%(Abstime date) =
    if %course_has_acqual_req%(date, 1) then %course_acqual%(date, 1)
    else void_string;

export %course_days%(Abstime date, Int ix) = 
    default(%_course_days%(date, ix), 0);

export %course_flights%(Abstime date, int ix) =
  if %use_flight_buffer_p% then 
    (%_course_flights%(date, ix) * 
    %course_flight_buffer%(%course_attribute%(date, ix))) / 100
  else
    %_course_flights%(date, ix);
  
table course_flights_buffer(String attr) =
  attr      -> Int %course_flight_buffer%;
  "LIFUS"   -> 100+%extra_lifus_legs_p%;
  -         -> 100;
end

%course_participants_table% = "course_participant";

/* Get number of courses active for crew at date */
table select_crew_courses_count_at_date(Abstime date) =
  crew.%id%, date, date ->
    export int %count_crew_course_at_date%;
  external %course_participants_table%;
  crew, >=startofcourse, <=endofcourse -> count(row_number);
end
/* Get course name and category for crew at date and index */
table select_crew_courses_match_at_date(Abstime date, int match_id) =
  match_id, crew.%id%, date, date ->
    String %course_name_at_date_ix%, String %course_cat_at_date_ix%;
  external %course_participants_table%;
  match_number, crew, >=startofcourse, <=endofcourse -> c_name, c_cat;
  -, -, -, - -> void_string, void_string;
end

%course_table% = "course";

/* Get the qualification that a crew obtains after course */
table course_qualobt(string coursename, string category) = 
  coursename, category ->
    string %course_qual_obtained_type%, 
    string %course_qual_obtained_subtype%;
  external %course_table%;
  name, "cat" -> qualobt_typ, qualobt_subtype;
  -, - -> void_string, void_string;	
end

export %crew_has_program%(Abstime date) =
    not void(%course_name%(date));
export %crew_has_program_on_leg% =
    %crew_has_program%(leg.%start_hb%);

%activity_is_planned%(Abstime date, Int ix) =
  not void(%course_completion%(date)) or
  %planned_flights%(date, ix) >= %course_flights%(date, ix);

%planned_flights%(Abstime date, Int ix) =
  /* qual will be "" if no req on training. The lookup handles this. */
  let start = %course_start%(date),
      stop = nmin(%course_end%(date), date),
      attr = %course_attribute%(date, ix),
      qual = %course_acqual%(date, ix);
  if attr <> "FAM FLT" and substr(attr,1,7) <> "ETOPS L" then
      %nr_acts_of_type_and_code_in_ival%(attr, qual, start, stop)
  else if substr(attr,1,7) = "ETOPS L" then  
     if %first_a2nx_is_training_flight_after_date%(qual, start) then
        /* Ugly fix for ETOPS LIFUS/LC: allow activities to be performed after course end */
        %nr_acts_of_type_and_code_in_ival%("ETOPS LIFUS/LC", qual, start, %pp_end%) +
        %nr_acts_of_type_and_code_in_ival%("ETOPS LIFUS", qual, start, %pp_end%) +
        %nr_acts_of_type_and_code_in_ival%("ETOPS LC", qual, start, %pp_end%)
        /*%nr_acts_of_type_and_code_in_ival%(attr, qual, start, stop + %max_days_between_lrp2_and_etops_lifus_lc% * 24:00)*/
     else 0
  else /* Ugly fix for FAM FLT: allow activities to be performed after course end */
    %nr_acts_of_type_and_code_in_ival%(attr, qual, start, stop + %max_days_between_sim_and_fam_flt% * 24:00);

/* 1st A2NX LH flight has any training attribute in pp */
%first_a2nx_is_training_flight_after_date%(String qual, Abstime start) =
  default(first(leg(roster), leg.%training_code_safe% <> "NONE")
                 where (leg.%is_LH_with_NX_ac% and
                        leg.%start_utc% >= start and
                        leg.%start_utc% <= %pp_end% and
                        leg.%is_active_flight% and
                        leg.%qual% = qual), false);
  
/* This is for getting all rows touching an interval.
   The previous lookup can't be used since two courses can share index 
   (the ix column). /EkG */
table crew_training_need_by_match(Abstime st, Abstime et, int match) =
  crew.%id%, st, et, match ->
    export String %course_type_by_match%,
    export Abstime %course_start_by_match%,
    export Abstime %course_end_by_match%,
    export Int %course_index_by_match%,
    export String %course_attribute_by_match%,
    export String %_course_acqual_by_match%,
    Int %course_flights_by_match%,
    Int %course_days_by_match%,
    Abstime %course_completion_by_match%,
    String %course_descr_by_match%;
  external %need_table%;
  crew, <validto, >validfrom, match_number ->
    course, validfrom, validto, part, attribute, acqual, flights, maxdays, completion, si;
  -, -, -, - ->
    void_string, void_abstime, void_abstime, void_int,
    void_string, void_string, void_int, void_int, void_abstime, void_string;
end

/* These might be void */
export %course_acqual_by_match%(Abstime st, abstime et, Int match) = 
    let qual = default(%_course_acqual_by_match%(st, et, match), "");
    if crew.%has_ac_qln%(et, qual) then qual
    else "";

export %training_activities_in_period%(abstime start, abstime stop)=
  count(times(100))
  while (not void(%course_index_by_match%(start, stop, %times_index_0%)));

export %long_course_training_activities_in_period%(abstime start, abstime stop)=
  count(times(100))
  while (not void(%course_index_by_match%(start, stop, %times_index_0%)))
  where (%course_end_by_match%(start, stop, %times_index_0%) -
         %course_start_by_match%(start, stop, %times_index_0%) >
           %_long_course_period_min_days% * 24:00);

export %training_activities_in_pp% = 
  %training_activities_in_period%(%pp_start%,%pp_end%);
  
/* Get the maximum number of different flight training types */
%training_activities%(Abstime date) =
  count(times(20))
  where (not void(%course_attribute%(date, %times_index_0%)));
  
%activity_is_planned_by_match%(Abstime start, Abstime stop, Int match) =
  %activity_is_planned%(nmin(%course_end_by_match%(start, stop, match), stop) - 0:01,
                          %course_index_by_match%(start, stop, match));
  
/* We check last year for unperformed training */
export %unperformed_training%(Abstime date) =
    let start = date - 365*24:00;
    any(times(100), 
        void(%course_completion_by_match%(start, date, %times_index_0%)))
    while (not void(%course_start_by_match%(start, date, %times_index_0%)));
export %unperformed_training_in_pp% =
    %unperformed_training%(%pp_end%);
export %unperformed_training_leg_start% =
    %unperformed_training%(leg.%start_hb%);

export %unplanned_training_before%(Abstime date) =
    %unplanned_training_on_qual_before%(date, "");

export %unplanned_training_in_pp% =
    %unplanned_training_before%(%pp_end%);

export %unplanned_training_on_qual_before%(Abstime date, String qual) =
  %unplanned_training_of_type_on_qual_before%("", date, qual);
  
export %unplanned_training_on_leg% =
  %unplanned_training_on_qual_before%(leg.%start_hb%, leg.%qual%);
    
export %unplanned_training_of_type_on_qual_before%(String type, Abstime date, String qual) =
  let start = date - 365*24:00;
  %unperformed_training_in_pp% and
  any(times(100), (%_training_type_and_qual_match%(start, date, %times_index_0%, qual, type)
                   and
                   not %activity_is_planned_by_match%(start, date, %times_index_0%)))
  while (not void(%course_start_by_match%(start, date, %times_index_0%)));

%validfrom_of_last_training_before%(String attr, Abstime stop) =
  let start = stop - 365*24:00;
  max(times(100), %course_start_by_match%(start, stop, %times_index_0%))
  where (%course_attribute_by_match%(start, stop, %times_index_0%) = attr);

%ac_qual_of_last_training_before%(String attr, Abstime stop) =
  let start = stop - 365*24:00,
      validfrom = %validfrom_of_last_training_before%(attr, stop);
  first(times(100), %course_acqual_by_match%(start, stop, %times_index_0%))
  where ((%course_attribute_by_match%(start, stop, %times_index_0%) = attr) and
         (%course_start_by_match%(start, stop, %times_index_0%) = validfrom));

%course_type_of_last_training_before%(String attr, Abstime stop) =
  let start = stop - 365*24:00,
      validfrom = %validfrom_of_last_training_before%(attr, stop);
  first(times(100), %course_type_by_match%(start, stop, %times_index_0%))
  where ((%course_attribute_by_match%(start, stop, %times_index_0%) = attr) and
         (%course_start_by_match%(start, stop, %times_index_0%) = validfrom));

export %course_requires_zftt_lifus% =
      any(times(100), (%course_attribute%(leg.%start_utc%, %times_index_0%)="ZFTT LIFUS"))
  while (not void(%course_start%(leg.%start_utc%)));

%_training_type_and_qual_match%(Abstime st, Abstime et, Int match, String qual, String type) =
  let course_qual = %course_acqual_by_match%(st, et, match),
      course_type = %course_attribute_by_match%(st, et, match);
  (qual = "" or course_qual = qual or course_qual = "")
  and
  (type = "" or type = course_type);
    
%_training_type_match_ac_qual%(Abstime st, Abstime et, Int match, String type) =
  if type = %course_attribute_by_match%(st, et, match) then
    %course_acqual_by_match%(st, et, match)
  else
    void_string;
    
%first_unplanned_training_magic_before%(Abstime date) =
  if %unperformed_training%(date) then
    %_first_unplanned_training_magic_ival%(date - 365*24:00, date)
  else
    1jan1986;

%_first_unplanned_training_magic_ival%(Abstime st, Abstime et) =
  min(times(100), %course_start_by_match%(st, et, %times_index_0%) + 
                  %course_index_by_match%(st, et, %times_index_0%)*0:01)
  where (not %activity_is_planned_by_match%(st, et, %times_index_0%))
  while (not void(%course_start_by_match%(st, et, %times_index_0%)));
  
%first_unplanned_course_name%(Abstime date) =
  %course_name%(%first_unplanned_training_magic_before%(date));
%first_unplanned_course_start%(Abstime date) =
  %course_start%(%first_unplanned_training_magic_before%(date));
%first_unplanned_course_end%(Abstime date) =
  %course_end%(%first_unplanned_training_magic_before%(date));
  
%first_unplanned_course_index%(Abstime date) =
  let magic = %first_unplanned_training_magic_before%(date),
      start = round_down(magic, 24:00);
  (magic-start)/0:01;
  
%first_unplanned_course_attribute%(Abstime date) =
  %course_attribute%(%first_unplanned_course_start%(date),
                     %first_unplanned_course_index%(date));

%first_unplanned_course_acqual%(Abstime date) =
  %course_acqual%(%first_unplanned_course_start%(date),
                  %first_unplanned_course_index%(date));

%first_unplanned_course_acqual_descr%(Abstime date) =
  let start = %first_unplanned_course_start%(date),
      ix = %first_unplanned_course_index%(date),
      qual = default(%_course_acqual%(start, ix), "");
  if %course_has_bad_acqual%(start, ix) then
    concat("Invalid:",qual)
  else
    qual;
  
%first_unplanned_course_req_flights%(Abstime date) =
  %course_flights%(%first_unplanned_course_start%(date),
                   %first_unplanned_course_index%(date));

%first_unplanned_course_planned_flights%(Abstime date) =
  %planned_flights%(nmin(%first_unplanned_course_end%(date), date) - 0:01,
                        %first_unplanned_course_index%(date));
  
export %first_unplanned_course_name_pp% =
  %first_unplanned_course_name%(%pp_end%);
export %first_unplanned_course_name_leg% =
  %first_unplanned_course_name%(leg.%start_utc%);
export %first_unplanned_course_name_trip% =
  %first_unplanned_course_name%(trip.%end_utc%);
export %first_unplanned_course_start_pp% =
  %first_unplanned_course_start%(%pp_end%);
export %first_unplanned_course_start_leg% =
  %first_unplanned_course_start%(leg.%start_utc%);
export %first_unplanned_course_end_pp% =
  %first_unplanned_course_end%(%pp_end%);
export %first_unplanned_course_end_leg% =
  %first_unplanned_course_end%(leg.%start_utc%);
export %first_unplanned_course_index_leg% =
  %first_unplanned_course_index%(leg.%start_utc%);
export %first_unplanned_course_attribute_pp% =
  %first_unplanned_course_attribute%(%pp_end%);
export %first_unplanned_course_attribute_leg% =
  %first_unplanned_course_attribute%(leg.%start_utc%);
export %first_unplanned_course_acqual_descr_pp% =
  %first_unplanned_course_acqual_descr%(%pp_end%);
export %first_unplanned_course_acqual_descr_leg% =
  %first_unplanned_course_acqual_descr%(leg.%start_utc%);
export %first_unplanned_course_req_flights_leg% =
  %first_unplanned_course_req_flights%(leg.%start_utc%);
export %first_unplanned_course_planned_flights_leg% =
  %first_unplanned_course_planned_flights%(leg.%start_utc%);
export %first_unplanned_course_req_flights_pp% =
  %first_unplanned_course_req_flights%(%pp_end%);
export %first_unplanned_course_planned_flights_pp% =
  %first_unplanned_course_planned_flights%(%pp_end%);

export %required_type_on_leg% =
  %first_unplanned_course_attribute%(leg.%start_utc%);
  
export %previous_required_type_on_leg% =
  default(%course_attribute%(%first_unplanned_course_start_leg%,
                             %first_unplanned_course_index_leg% - 1),
          "");
    
%course_var_of_type%(String var, String type, String qual, Abstime date) =
    first(times(%training_activities%(date)), %course_var%(var, date, %times_index_0%))
    where (%_type_and_qual_check%(date, %times_index_0%, type, qual));
    
%_type_and_qual_check%(Abstime date, Int ix, String type, String qual) =
    let course_qual = %course_acqual%(date, ix);
    %course_attribute%(date, ix) = type and
    (qual = "" or course_qual = "" or qual = course_qual);

%course_var%(String var, Abstime date, Int ix) =
    if var = "index" then ix
    else if var = "maxdays" then %course_days%(date, ix)
    else if var = "flights" then %course_flights%(date, ix)
    else void_int;
    
export %index_of_type%(String type, String qual, Abstime date) =
    default(%course_var_of_type%("index", type, qual, date), 0);

export %maxdays_of_type%(String type, String qual, Abstime date) =
    default(%course_var_of_type%("maxdays", type, qual, date), 0);
export %maxdays_for_leg% =
    %maxdays_of_type%(%leg_training_code_safe%, leg.%qual%, leg.%start_hb%);
    
export %flights_of_type%(String type, String qual, Abstime date) =
    default(%course_var_of_type%("flights", type, qual, date), 0);
    
export %reqd_training_attribute_in_pp% = 
  %first_unplanned_course_attribute%(%pp_end%);
export %reqd_training_is_any_lifus% = 
    locate("LIFUS", %reqd_training_attribute_in_pp%) > 0;
export %reqd_training_on_leg_is_any_lifus% =
  locate("LIFUS", %required_type_on_leg%) > 0;

%ofdx_period_goal%(Int ofdx_id, Abstime d) =
  if default(%ofdx_id_valid_for_crew%(ofdx_id, d),false) then
    task.%ofdx_attend_goal%(ofdx_id, d)
  else 0;

export %reqd_ofdx_training_missing%(Int ofdx_id) =
  default(%ofdx_attended%(ofdx_id, %pp_start%),0) < %ofdx_period_goal%(ofdx_id, %pp_start%);

/* This is the total used for the rule */
export %ofdx_attended%(Int ofdx_id, Abstime d) =
    %nr_acts_of_code_in_ival%(task.%ofdx_code%(ofdx_id),
                              task.%ofdx_period_start%(ofdx_id, d),
                              task.%ofdx_period_end%(ofdx_id, d));

/* This is used for the cost to only reward for OFDX assigned in
   the planning period */
export %ofdx_attended_pp%(Int ofdx_ix, Abstime d) =
    %nr_acts_of_code_in_ival_plan%(task.%ofdx_code%(ofdx_ix),
                                   nmax(task.%ofdx_period_start%(ofdx_ix, d), fundamental.%pp_start%),
                                   task.%ofdx_period_end%(ofdx_ix, d));

export %leg_ofdx_attended% =
    if void(leg.%ofdx_id%) then 0
    else if leg.%ofdx_invalid_date% then 1 /* gives at least 1 for comparison with limit 0 */
    else %ofdx_attended%(leg.%ofdx_id%, leg.%start_UTC%);


export %ofdx_id_valid_for_crew%(Int ofdx_id, Abstime d) =
  let agmt_qual_group = crew.%agmt_group_id_at_date%(d);

  base_utils.%semicol_sep_exact_match%(agmt_qual_group, task.%ofdx_agmt_group%(ofdx_id, d)) and
  %ofdx_id_valid_for_crew_quals%(ofdx_id, d);

%ofdx_id_valid_for_crew_quals%(Int ofdx_id, Abstime d) =
  let ofdx_quals = default(task.%ofdx_qualification%(ofdx_id, d), ""),
      date = %_crew_qual_course_grace_period_date%(d, ofdx_quals);

  if ofdx_quals = "" then
    true
  else
    any(times(model_crew.%crew_qual_limit%),
        base_utils.%semicol_sep_exact_match%(model_crew.%qln_unf%(crew.%id%, date, %times_index_0%),
                                             ofdx_quals));

/* SKCMS-2115: If crew is on a course that gives any of the needed quals for the ofdx,
   check the quals 3 days later to allow for the course to add them.
   3 days here is just the arbitrary number that fit this specific jira,
   should be extended to have a more generic grace-period as needed. */
%_crew_qual_course_grace_period_date%(Abstime date, string quals) =
  if any(times(%count_crew_course_at_date%(date)),
         locate(default(%_qual_obtained_from_course_date_ix%(date, %times_index_0%), "None"), quals) > 0)
  then date + 3*24:00
  else date;

%_qual_obtained_from_course_date_ix%(Abstime date, int ix) =
  let course_name = %course_name_at_date_ix%(date, ix),
      course_cat = %course_cat_at_date_ix%(date, ix),
      qual_type = %course_qual_obtained_type%(course_name, course_cat),
      qual_subtype = %course_qual_obtained_subtype%(course_name, course_cat);

  concat(qual_type, "+", qual_subtype);

export %ofdx_valid_for_crew%(String activity_code, Abstime d) =
  %ofdx_id_valid_for_crew%(task.%ofdx_id%(activity_code), d);

/* If no training is defined for acqual, function returns 0 */
%first_index_for_ac_qual%(String acqual, Abstime date) = 
  default(first(times(%training_activities%(date)), %times_index_0%)
          where (%course_acqual%(date, %times_index_0%) = acqual), 0);

%is_reqd_for_ac_qual%(String acqual, Abstime date) =
  /* if no specific acqual is defined in table, any will do */
  not %course_has_acqual_req%(date, 1) or
  %first_index_for_ac_qual%(acqual, date) > 0;

%nr_flts_by_attr%(String attr, Abstime date) = 
  let acqual_needed = default(first(times(%training_activities_in_period%(date,date)),
                                    %course_acqual%(date,%times_index_0%)) 
                               where (%course_attribute%(date,%times_index_0%) = attr)
                               ,"");
  if acqual_needed = "" then
    %nr_flts_of_type%(attr, date)
  else
    %nr_flts_of_type_and_code%(attr, acqual_needed, date);   
    
/* Wrapper to make warnings behave correctly when performing NEW flights
   that have no explicit training code set by the planner */
export %leg_training_code_safe% =
  if leg.%is_new% then
      "NEW"
  else if leg.%is_x_supernum% then
      training.%X_SUPERNUM_STR%
  else if leg.%is_release% then
      training.%RELEASE_STR%
  else
      leg.%training_code_safe%;

/*
 * Leg based variables used in rules
 */
/* Used in rule: trng_all_training_flights_performed_ALL */
export %is_reqd_for_ac_qual_leg_start% = %is_reqd_for_ac_qual%(leg.%qual%, leg.%start_UTC%);

/* 
 * Variables used for check-in 
 */ 
/* These variables will not be correct in all cases for Matador, but
   correct enough to enable optimization. The solutions might be illegal in
   Studio */
export %is_instr_first_zftt_lifus% = false;
export %is_instr_first_lifus% = false;
export %course_extends_zftt_lifus_ci% = false;
export %is_instr_first_x_supernum_except_skd% = false;
export %is_instr_first_fam_flt% = false;
export %is_instr_release% = false;

export %is_lcp_last_lc% = 
    %is_lcp_on_lc% and
    default(is_last(leg(trip))
            where (leg.%is_active_flight%), true);
export %is_lcp_last_ilc% = 
    %is_lcp_on_ilc% and
    default(is_last(leg(trip))
            where (leg.%is_active_flight%), true);
    
export %is_lcs_last_lc_or_ilc% =
    %is_lcs_on_lc_or_ilc% and
    default(is_last(leg(trip))
            where (leg.%is_active_flight%), true);

%_is_instr_first_zftt_lifus% =
    default(leg.%is_zftt_lifus_instructor%, true) and
    %__is_instr_first_zftt_lifus%;

%__is_instr_first_zftt_lifus% =
    let zftt_crew = leg.%crewid_on_zftt_lifus%;
    zftt_crew <> "-" and
    (crew.%is_tri_instr_leg_start% or crew.%is_tre_instr_leg_start%) and
    default(prev(leg(roster), zftt_crew <> leg.%crewid_on_zftt_lifus%)
            where (leg.%is_active_flight%), true);

%_is_instr_first_lifus% =
  default(leg.%is_lifus_instructor%, true) and
  %__is_instr_first_lifus%;

%__is_instr_first_lifus% =
    let lifus_crew = leg.%crewid_on_lifus%;
    lifus_crew <> "-" and
    crew.%is_instructor_leg_start% and
    default(prev(leg(roster), lifus_crew <> leg.%crewid_on_lifus%)
            where (leg.%is_active_flight%), true);

%_is_instr_first_fam_flt% =
    let fam_flt_crew = leg.%crewid_on_fam_flt%;
    fam_flt_crew <> "-" and
    crew.%is_fam_flt_instr%(leg.%start_hb%) and
    default(prev(leg(roster), fam_flt_crew <> leg.%crewid_on_fam_flt%)
            where (leg.%is_active_flight%), true);
  
export %is_lcp_on_lc% = %_is_lcp_on_lc_or_ilc%("LC");
export %is_lcp_on_ilc% = %_is_lcp_on_lc_or_ilc%("ILC");
export %is_lcs_on_lc_or_ilc% = (%_is_lcs_on_lc_or_ilc%("LC") or %_is_lcs_on_lc_or_ilc%("ILC") or %_is_lcs_on_lc_or_ilc%("LC AP-POS")); 

/* redefined in training_gpc */
export %is_lcp_on_ilc_for_new_capt% = false;

%_is_lcp_on_lc_or_ilc%(String type) =
    crew.%is_line_check_pilot%(leg.%start_utc%) and
    leg.%has_training_attr_any_crew%(type);
    
%_is_lcs_on_lc_or_ilc%(String type) =
    crew.%is_lcs%(leg.%start_utc%) and
    leg.%has_training_attr_any_crew%(type);
  
export %is_first_lifus% =   
  leg.%is_lifus% and not
  default(prev(leg(roster), leg.%is_any_lifus%)
          where(leg.%is_active_flight%),
          false);
  
export %is_first_zftt_lifus% =
  leg.%is_zftt_lifus% and not
  default(prev(leg(roster), leg.%is_zftt_lifus%)
          where(leg.%is_active_flight%),
          false);
  
export %is_first_x_supernum% =
  leg.%is_x_supernum% and not
  default(prev(leg(roster), leg.%is_x_supernum%)
          where(leg.%is_active_flight%),
          false);
  
export %is_first_fam_flt% =
  leg.%is_fam_flt% and not
  default(prev(leg(roster), leg.%is_fam_flt%)
          where(leg.%is_active_flight%),
          false);
  
export %is_last_ilc% =   
  leg.%is_ilc% and not
  default(next(leg(roster), leg.%is_ilc%)
          where(leg.%is_active_flight%),
          false);
  
export %is_last_lc% =
  leg.%is_lc% and not
  default(next(leg(roster), leg.%is_lc%)
          where(leg.%is_active_flight%),
          false);

/* SKCMS-36 */
/* Is last leg in a new hire follow up trip */
export %is_last_new_hire_follow_up% =
  let this_new_hire_crewid = leg.%crewid_on_new_hire_follow_up%;
  leg.%is_new_hire_follow_up% and 
  ( 
    %is_last_active_flight_leg_in%(32:00) 
    or
    default(
            not next(leg(roster),
                     leg.%is_new_hire_follow_up% and this_new_hire_crewid = leg.%crewid_on_new_hire_follow_up%)
                    where(leg.%is_active_flight%),
    true)
  );





%is_last_active_flight_leg_in%(Reltime period) =
  let this_end = leg.%end_utc%;
  leg.%is_active_flight% and
  default(
    next(leg(roster), leg.%start_utc% - this_end > period) where(leg.%is_active_flight%),
  true);

export %is_last_x_supernum% =
  leg.%is_x_supernum% and is_last(leg(trip)) and
  (leg.%start_date% > 
   prev(leg(roster), leg.%start_date%)
   where (%is_first_x_supernum%));
  
/* Used in failtexts */
export %nr_reqd_initial_flts% = 
  %flights_of_type%("NEW", %course_acqual%(trip.%start_hb%, 1), trip.%start_hb%);
export %nr_reqd_initial_flts_duty_start% =
  %flights_of_type%("NEW", %course_acqual%(duty.%start_hb%, 1),duty.%start_hb%);
export %nr_perf_initial_flts_trip_end% = %_nr_perf_initial_flts%(trip.%end_UTC%);
export %nr_perf_initial_flts_duty_start% = %_nr_perf_initial_flts%(duty.%start_UTC%);
export %nr_perf_initial_flts_now_date% = %_nr_perf_initial_flts%(%now_date%);
%_nr_perf_initial_flts%(Abstime date) =
   %nr_flts_by_attr%("NEW",date);
/* Used for reward for NEW flights in roster_cost*/
export %nr_performed_flts_leg_start% = 
  default(%_nr_perf_initial_flts%(leg.%start_UTC%),0);
export %nr_performed_initial_flights_at_date%(Abstime date) =
  default(%_nr_perf_initial_flts%(date),0);
export %nr_reqd_initial_flts_leg_start% = 
   %nr_reqd_initial_flights_at_date%(leg.%start_UTC%);

export %nr_reqd_initial_flights_at_date%(Abstime date) =
    %flights_of_type%("NEW", "", date);
   
%nr_remaining_flights_by_attr_at_time%(string attr, abstime time_utc) =
    let date = round_down(crew.%hb_time%(time_utc), 24:00),
        acqual_needed = default(first(times(%training_activities_in_period%(date,date)),
                                      %course_acqual%(date,%times_index_0%)) 
                                where (%course_attribute%(date,%times_index_0%) = attr)
                                ,"");
    nmax(0, %flights_of_type%(attr, acqual_needed, date)*%course_flight_buffer%(attr)/100 -
           %nr_flts_by_attr%(attr,date));

/* Variables used in several rules */
export %first_flight_of_type% =
  %leg_training_code_safe% <> %last_perf_flt_type%(leg.%start_UTC%, 1jan1901);
export %first_training_flight_of_type% =
  if %leg_training_code_safe% = "NONE" then
    false
  else
    %first_flight_of_type%;

export %first_lifus_flight% =
  let last_flight_type = %last_perf_flt_type%(leg.%start_UTC%, 1jan1901);
  leg.%is_any_lifus% and
  not (last_flight_type = "LIFUS" or 
       last_flight_type = "ZFTT LIFUS" or 
       last_flight_type = "X LIFUS");

export %last_flight_of_type% =
  default(next(leg(roster), %leg_training_code_safe%) where (leg.%is_active_flight%)
          <> %leg_training_code_safe%,
  false);
  
%extra_lifus_legs_p% =
  parameter 0
  remark "Extra LIFUS legs to assign above legal requirement. (%)";
  
export %crew_has_training_bl_during_restr% =
  crew.%has_restr_training_trip_start% and trip.%is_training_blank_day%;


export %number_lifus_legs_extra_guidance_need_for_trainee_extra_fu_need% =
  parameter 15
  remark "Unexperienced FP requires supernumerary FP at first LIFUS legs (default 15)";


export %trainee_number_lifus_trainings_below_minimum_extra_fu_need% =
  %is_nth_non_zftt_lifus%(%number_lifus_legs_extra_guidance_need_for_trainee_extra_fu_need%);

  
export %number_lifus_legs_extra_guidance_need_for_trainee_tri_instructor% =
  parameter 20
  remark "Unexperienced FP require TRI instructor at first LIFUS legs(default 20)";

export %trainee_number_lifus_trainings_below_minimum_tri_needed% =
  %is_nth_non_zftt_lifus%(%number_lifus_legs_extra_guidance_need_for_trainee_tri_instructor%);

/****************************************************************
 * Section 4: Training log table lookups and variables
 ***************************************************************/
/*
** Countings
*/
/*Just a help variable to distinguish between flight and ground activities */
%type_is_flight_duty%(String type) =
  type in attributes.training_codes_cc or
  type in attributes.training_codes_fc or
  type = "NONE";

/* These functions are designed to make it a little easier to use in rule
 * values. Interval start is training.%start% and interval end is date */
export %nr_flts_of_type%(String type, Abstime date) =
  %nr_flts_of_type_and_code%(type, "", date);

export %nr_flts_of_type_and_code%(String type, String code, Abstime date) =
  %nr_acts_of_type_and_code_in_ival%(type, code, %course_start%(date), date);

/*
 * Nr activities/flights of type
 */
export %nr_acts_of_type_in_ival%(String type, Abstime istart, Abstime iend) =
  %nr_acts_of_type_and_code_in_ival%(type, "", istart, iend);

/*
 * Nr activities/flights of type and code
 */
export %nr_acts_of_type_and_code_in_ival%(String type, String code,
                                          Abstime istart, Abstime iend) =
  %nr_acts_of_type_and_code_in_ival_table%(type, code, istart, nmin(iend, fundamental.%pp_start%)) +
  %nr_acts_of_type_and_code_in_ival_plan%(type, code, nmax(istart, fundamental.%pp_start%), iend);

/* Nr activities in interval in plan of type and code */
%nr_acts_of_type_and_code_in_ival_plan%(String type, String code,
                                        Abstime istart, Abstime iend) =
  if %type_is_flight_duty%(type) then
    %_nr_flts_of_type_and_code_in_ival_plan%(type, code, istart, iend)
  else
    %_nr_acts_of_type_and_code_in_ival_plan%(type, code, istart, iend);

/* Nr flights in interval in plan, flight attribute = type and ac qual = code */
%_nr_flts_of_type_and_code_in_ival_plan%(String type, String code,
                                        Abstime istart, Abstime iend) =
  count(leg(roster))
  where (leg.%is_active_flight% and
         leg.%start_UTC% >= istart and leg.%start_UTC% <= iend and
         %leg_training_code_safe% = type and
         (code = "" or leg.%qual% = code));

/* Nr ground activities in interval in plan, group code = type, duty code = code */
%_nr_acts_of_type_and_code_in_ival_plan%(String type, String code,
                                        Abstime istart, Abstime iend) =
  count(duty(roster))
  where (duty.%start_utc% >= istart and duty.%start_utc% <= iend and
         %_gnd_duty_match%(type) and
         (code = "" or code = duty.%code%));
  
/* We only handle needed cases, as to not re-implement training_log module */
table ground_type_match(String type) =
  type -> %_gnd_duty_match%;
  "SIM INSTR" -> duty.%is_sim_instr%;
  "SIM INSTR SUPERVIS" -> duty.%is_sim_instr_supervis%;
  "SIM INSTR OL" -> duty.%is_sim_instr_ol%;
  "SIM INSTR SUPOL" -> duty.%is_sim_instr_supol%;
  "SIM DEADHEAD" -> %pc_opc_deadhead%;
  &
  -     ->  type = duty.%group_code%;
end

export %pc_opc_deadhead% =
 duty.%is_sim_deadhead% and duty.%is_pc_or_opc% and %sim_duty_assigned_to_student%;

/* Support for CR 456 */
%_nr_sim_instr_in_ival%(Abstime istart, Abstime iend) =
  %nr_acts_of_type_and_code_in_ival%("SIM INSTR", "", istart, iend) +
  %nr_acts_of_type_and_code_in_ival%("SIM INSTR SUPERVIS", "", istart, iend) + 
  %nr_acts_of_type_and_code_in_ival%("SIM INSTR OL", "", istart, iend) + 
  %nr_acts_of_type_and_code_in_ival%("SIM INSTR SUPOL", "", istart, iend);
    
/* School year is from July 1 to June 30, in homebase time.
   Log is in UTC, but we don't anticipate that sim instr will be scheduled close
   to midnight. We still need to do the roster lookup with utc-time to find
   ourselves, when counting sim instr until (and including) the current duty.
   /EKG 100413 */
%_school_year_start%(Abstime date) =
  let year = round_down_year(date),
      year2 = round_down_year(add_months(date, -6));
  if year = year2 then
    add_months(year, 6)
  else
    add_months(year2, 6);
    
export %num_sim_instr_in_school_year% =
  let istart = %_school_year_start%(duty.%start_hb%),
      iend = add_years(istart, 1);
  %_nr_sim_instr_in_ival%(istart, iend);
  
export %num_sim_instr_in_school_year_duty_start% =
  let istart = %_school_year_start%(duty.%start_hb%),
      iend = duty.%start_utc%;
  %_nr_sim_instr_in_ival%(istart, iend);
  
/* Support for CR 385 */
%_nr_sim_deadhead_in_ival%(Abstime istart, Abstime iend) =
  %nr_acts_of_type_and_code_in_ival%("SIM DEADHEAD", "", istart, iend);
  
export %num_sim_deadhead_in_calendar_year% =
  let istart = crew.%utc_time%(round_down_year(duty.%start_hb%));
  %_nr_sim_deadhead_in_ival%(istart, duty.%start_utc%);
  
/*
** Date lookups
*/
/*
 * First performed date for activity/flight of type
 */

    
export %first_perf_date_for_lifus_after_date%(Abstime start) =
  round_down(%_first_perf_date_for_lifus_flight_after_date%(start), 24:00);

%_first_perf_date_for_lifus_flight_after_date%(Abstime start) =
  nmin(default(first(leg(roster), leg.%start_date_utc%)
                 where (locate("LIFUS", %leg_training_code_safe%) > 0 and
                        leg.%start_UTC% >= start and
                        leg.%start_hb% <= %pp_end%),
               %first_logged_date_for_lifus_after_date%(start)),
       %first_logged_date_for_lifus_after_date%(start));
  
/*
 * Code for last performed activity/flight of type
 */
export %last_perf_code_for_act_of_type%(String type, Abstime date) =
  default(last(trip(roster), trip.%code%)
          where (trip.%is_ground_duty% and
                 trip.%group_code% = type and
                 trip.%start_UTC% < date), 
          %last_logged_code_for_type%(type, date));

%last_logged_code_for_type%(String type, Abstime date) =
  default(%ctl_code_at_time%(%last_logged_date_for_type%(type, date)),"");

/*
 * Last performed date for activity/flight of type
 */
export %last_perf_date_for_act_of_type%(String type, Abstime date) =
  if %type_is_flight_duty%(type) then
    %_last_perf_date_for_flight_of_type%(type, date)
  else
    %_last_perf_date_for_act_of_type%(type, date);

/**********************
 IMPORTANT!!
 Training lookup returns start_utc for activity.
 So if looking in log, start count 17 hours after ILC (to not include ILC itself).
 Assumed here that ILC flight is no longer than 17:00 (PVG usually 17:00h).
 **********************/
export %end_hb_last_perf_act_of_type%(String type, Abstime date) =
  if %type_is_flight_duty%(type) then
    default(last(leg(roster), leg.%end_hb%)
              where (%leg_training_code_safe% = type and
                     leg.%start_UTC% < date),
      %last_logged_date_for_type%(type, %pp_start%)+17:00)
  else
    %_last_perf_date_for_act_of_type%(type, date)+17:00;

export %last_perf_date_for_act_of_type_as_student%(String type, Abstime date) =
    %_last_perf_date_for_act_of_type_as_student%(type, date);

/* Last performed date for flight of type */
%_last_perf_date_for_flight_of_type%(String type, Abstime date) =
  default(last(leg(roster), leg.%start_utc%)
          where (%leg_training_code_safe% = type and
                 leg.%start_UTC% < date),
  %last_logged_date_for_type%(type, %pp_start%));

/* Last performed date for activity of type 
   We can't look for PC in a correct way without going into circularity.
   It will probably be ok since most things can check for PC or OPC.
   We excluce forced assists and instructors for this lookup.
*/
%_last_perf_date_for_act_of_type%(String type, Abstime date) =
    %last_perf_date_for_act_of_type_for_ac_qual%(type, "", date);

%_last_perf_date_for_act_of_type_as_student%(String type, Abstime date) =
    %last_perf_date_for_act_of_type_for_ac_qual_as_student%(type, "", date);

/*
 * Last performed date for activity/flight of type and code
 */
export %last_perf_date_for_act_of_type_and_code%(String type, String code, Abstime date) =
  let log_check_date = nmin(date, %pp_start%);
  default(%last_roster_date_for_code%(date, code),
          default(%last_logged_date_for_type_and_code%(type, code, log_check_date),
                  %abstimemin%)
          );

/* Last performed date for flight of type and code */
export %last_perf_date_for_flight_of_type_and_code%(String type, String code, Abstime date) =
  default(last(leg(roster), leg.%start_utc%)
          where (%leg_training_code_safe% = type and
                 leg.%qual% = code and
                 leg.%start_UTC% < date and
                 leg.%start_hb% >= %pp_start%),
  %last_logged_date_for_type_and_code%(type, code, nmin(%pp_start%, date)));
  
export %last_perf_date_for_flight_of_type_code_and_attr%(String type, String code, String attr, Abstime date) =
  default(last(leg(roster), leg.%start_utc%)
          where (%leg_training_code_safe% = type and
                 leg.%qual% = code and
                 leg.%start_UTC% < date and
                 leg.%start_hb% >= %pp_start% and
                 attributes.%assignment_attr_si%("TRAINING") = attr),
  %last_logged_date_for_type_code_attr%(type, code, attr, nmin(%pp_start%, date)));

export %last_perf_date_for_cc_rec_cx7%(Abstime date) =
  default(last(leg(roster), leg.%start_utc%)
          where (leg.%is_cc_rec_cx7% and
                 leg.%start_utc% < date and
                 leg.%start_hb% >= %pp_start%),
  %last_logged_date_for_type_and_code%("REC CX", "CX7", nmin(%pp_start%, date)));
  
export %last_perf_date_for_cc_rec_cx6%(Abstime date) =
  default(last(leg(roster), leg.%start_utc%)
          where (leg.%is_cc_rec_cx6% and
                 leg.%start_utc% < date and
                 leg.%start_hb% >= %pp_start%),
  %last_logged_date_for_type_and_code%("REC CX", "CX6", nmin(%pp_start%, date)));
 
export %last_perf_date_for_cc_rec_web%(Abstime date) =
  default(last(leg(roster), leg.%start_utc%)
          where (%leg_is_cc_rec_web% and
                 leg.%start_utc% < date and
                 leg.%start_hb% >= %pp_start%),
  %last_logged_date_for_type%("REC", nmin(%pp_start%, date)));
  
export %last_perf_date_for_sim_instructor%(Abstime date, String instr_id) =
  default(last(leg(roster), leg.%start_utc%)
          where (leg.%is_simulator% and
                 leg.%start_utc% < date and
                 leg.%start_hb% >= %pp_start% and
                 instr_id = %acceptable_companion_id%),
          %last_logged_date_for_attr%(instr_id, date));

/* Redefined in child module, defined here to keep log lookups in same place */
export %acceptable_companion_id% = "";

/* Lookup attribute */
export %last_perf_release_attr_for_flight_of_type_and_code%(String type, String code, Abstime date) =
  default(last(leg(roster), leg.%release_attr%)
          where (%leg_training_code_safe% = type and
                 leg.%qual% = code and
                 leg.%start_UTC% < date and
                 leg.%start_hb% >= %pp_start%),
  %last_logged_attr_for_type_and_code%(type, code, nmin(%pp_start%, date)));
  
/* Lookups for release flight should return the day the flight lands.
** If attribute is overnight, the following day is returned */
export %last_perf_day_for_release%(String code, Abstime date) = 
  default(last(leg(roster), leg.%end_date% + 24:00)
          where(leg.%is_release% and
                leg.%qual% = code and
                leg.%start_utc% < date and
                leg.%start_hb% >= %pp_start%),
          %last_logged_day_for_release%(code, nmin(%pp_start%, date)));

%last_logged_day_for_release%(String code, Abstime date) =
  let block_off = %last_logged_date_for_type_and_code%("RELEASE", code, date);
  if %last_logged_attr_for_type_and_code%("RELEASE", code, date) = "OVERNIGHT" then
    round_up(crew.%hb_time%(block_off), 24:00) + 24:00
  else
    round_up(crew.%hb_time%(block_off), 24:00);
    
/* Assumed that courses are not held overnight 
** Workshop is any course activity listed in cabin_training */
export %last_perf_day_for_workshop%(String code, Abstime date) =
  default(last(leg(roster), leg.%end_date% + 24:00)
          where(%valid_workshop%(code) and
                leg.%start_utc% < date
                and leg.%start_hb% >= %pp_start% ),
          %last_logged_day_for_workshop%(code, nmin(%pp_start%, date)));
  

 /* This rule is almost identical to the one above, but for on check removed. See JIRA SKCMS-421. */
export %last_perf_day_for_workshop2%(String code, Abstime date) =
  default(last(leg(roster), leg.%end_date% + 24:00)
          where(%valid_workshop%(code) and
                leg.%start_utc% < date
                /* and leg.%start_hb% >= %pp_start% */ /*terjeda: Why was this conditioin here? Removing it for now.  2014-11-20 */
          ),
          %last_logged_day_for_workshop%(code, nmin(%pp_start%, date)));

  
  
  %last_logged_day_for_workshop%(String code, Abstime date) =
  let nr_rows = %ctl_rows%;
  max(times(nr_rows), round_up(crew.%hb_time%(%current_ctl_time%), 24:00))
  where(%current_ctl_time% < date and
        not void(%_training_is_for_quals%(%ctl_code%(%times_index_0%), %current_ctl_time%)) and
        (locate(code, %current_ctl_attr%) > 0 or %current_ctl_attr% = ""));

%valid_workshop%(String leg_qual) = 
  %conversion%(leg_qual) or
  %conv_refra%(leg_qual) or
  %conv_refrb%(leg_qual) or
  %refresher%(leg_qual) or
  %initial%(leg_qual) or
  %scc_course% or
  %as_course% or
  %ap_course%; 
  
/* Assumed that courses are not held overnight 
** CC course is any CXnn activity */
export %last_perf_day_for_cc_course%(Abstime date) =
   if system_db_parameters.%new_training_codes_17_CC_valid%(date)
   then %_last_perf_day_for_cc_course_ntc17%(date)
   else %_last_perf_day_for_cc_course%(date);

%_last_perf_day_for_cc_course%(Abstime date) =
  default(prev(leg(roster), leg.%end_date% + 24:00)
          where(substr(leg.%code%,1,2) = "CX"),
          default(%last_logged_day_for_cc_course%(nmin(%pp_start%, date)),
                  01jan1986));

/* New Training Code 2017 */
%_last_perf_day_for_cc_course_ntc17%(Abstime date) =
  if crew.%is_cabin% then
  default(prev(leg(roster), leg.%end_date% + 24:00) where(task.%group%(leg.%code%)="COD"),
          default(%last_logged_day_for_cc_course%(nmin(%pp_start%, date)),
                  01jan1986))
  else 01jan1986;



%last_logged_day_for_cc_course%(Abstime date) =
  let nr_rows = %ctl_rows%;
  max(times(nr_rows), round_up(crew.%hb_time%(%current_ctl_time%), 24:00))
  where(%current_ctl_time% < date and
        %ctl_type%(%times_index_0%) = "COURSE");

/*
** Activity lookup
*/
/* Last performed flight type */
export %last_perf_flt_type%(Abstime date, Abstime course_start) =
  default(%_last_perf_flt_type_in_plan%(nmax(course_start, %pp_start%), date),
    default(%_last_perf_flt_type_in_table%(course_start, nmin(%pp_start%, date)), "NONE"));

%_last_perf_flt_type_in_plan%(Abstime istart, Abstime iend) =
  last(leg(roster), %leg_training_code_safe%)
  where (leg.%is_active_flight% and
         leg.%start_UTC% < iend and
         leg.%start_UTC% >= istart);

%_last_perf_flt_type_in_table%(Abstime istart, Abstime iend) =
    let last_logged_date = %_last_perf_flt_date_in_table%(istart, iend);
    if istart = iend then void_string
    else
      first(times(%ctl_rows%), %last_logged_type%(iend, %times_index_0%))
      where (%type_is_flight_duty%(%last_logged_type%(iend, %times_index_0%))
             and %last_logged_date%(iend, %times_index_0%) = last_logged_date);

/* Last performed flight type with code (e.g. ac_qual) */
export %last_perf_flt_type_with_code%(String code, Abstime date, Abstime course_start) =
  default(%_last_perf_flt_type_with_code_in_plan%(code, nmax(course_start, %pp_start%), date),
    default(%_last_perf_flt_type_with_code_in_table%(code, course_start, nmin(%pp_start%, date)), "NONE"));

%_last_perf_flt_type_with_code_in_plan%(String code, Abstime istart, Abstime iend) =
  last(leg(roster), %leg_training_code_safe%)
    where (leg.%is_active_flight% and
         leg.%qual% = code and
         leg.%start_UTC% < iend and
         leg.%start_utc% >= istart and 
         %leg_training_code_safe% <> leg.%no_attribute%);
    
/*Get type of flight training for last performed training in interval with code (acqual) */
%_last_perf_flt_type_with_code_in_table%(String code, Abstime istart, Abstime iend) =
   let last_date = default(%_last_perf_flt_date_with_code_in_table%(code, istart, iend),1jan1986);
  if istart = iend then void_string
  else
    first(times(%ctl_rows%), %last_logged_type%(iend, %times_index_0%))
    where (%last_logged_date%(iend, %times_index_0%) = last_date);

/* Lookup last date of any kind of flight training in crew training log table */
%_last_perf_flt_date_in_table%(Abstime istart, Abstime iend) =   
    %_last_perf_flt_date_with_code_in_table%("",istart, iend);
    
/* Lookup last date with code (acqual) of flight training in crew training log table */
%_last_perf_flt_date_with_code_in_table%(String code, Abstime istart, Abstime iend) =
   max(times(%ctl_rows%), %last_logged_date%(iend, %times_index_0%))
    where (%type_is_flight_duty%(%last_logged_type%(iend, %times_index_0%)) and
           (code = "" or %last_logged_code%(iend, %times_index_0%) = code) and
           %last_logged_date%(iend, %times_index_0%) >= istart);

export %last_logged_ast_is_in_current_year% =
  round_down_year(trip.%start_hb%) =
  round_down_year(%last_perf_date_for_act_of_type_as_student%("AST", trip.%start_UTC%));
  
export %logged_release%(Abstime date, String ac_qual) =
  %last_perf_date_for_act_of_type_for_ac_qual%("RELEASE", ac_qual, date) > %_expiry_date%(date);
  
export %logged_qual_start%(Abstime date, String ac_qual) =
  %last_perf_date_for_act_of_type_for_ac_qual%("QUAL START", ac_qual, date) > %_expiry_date%(date);

export %logged_requal_start%(Abstime date, String ac_qual) =
  %last_perf_date_for_act_of_type_for_ac_qual%("REQUAL START", ac_qual, date) > %_expiry_date%(date);

%_expiry_date%(Abstime date) = 
  add_months(round_down_month(date), -2);
  
/******************************************************************************
 *
 * Section X: Crew training log lookups
 * 
 *****************************************************************************/
/* We load approx 3 years of data */
export %ctl_time_limit% =
  add_years(fundamental.%plan_start%, -3);

table general_lookup_ival(Abstime st, Abstime et, Int ix) =
  crew.%id%, st, et, ix ->
    String %ctl_type_ival%,
    String %ctl_code_ival%,
    Abstime %ctl_time_ival%,
    String %_ctl_attr_ival%;
  external "crew_training_log";
  crew, <=tim, >=tim, match_number -> typ, code, tim, attr;
  -,-,-,- -> void_string, void_string, void_abstime, void_string;
end

/* We log some items twice, but with the same code and attr */
%ctl_code_at_time%(Abstime tim) =
  %ctl_code_ival%(tim, tim, 1);
%ctl_attr_at_time%(Abstime tim) =
  %ctl_attr_ival%(tim, tim, 1);

/* attr is void in general, but we don't want to handle that every time */
%ctl_attr_ival%(Abstime st, Abstime et, Int ix) =
  default(%_ctl_attr_ival%(st,et,ix), "");
  
export %ctl_type%(Int ix) = %ctl_type_ival%(1Jan1986, 31dec2035, ix);
export %ctl_code%(Int ix) = %ctl_code_ival%(1Jan1986, 31dec2035, ix); 
export %ctl_time%(Int ix) = %ctl_time_ival%(1Jan1986, 31dec2035, ix); 
export %ctl_attr%(Int ix) = %ctl_attr_ival%(1Jan1986, 31dec2035, ix);

/* +-1 minute to avoid finding ourselves */
%ctl_type_before%(Abstime date, Int ix) = %ctl_type_ival%(1Jan1986, date-0:01, ix);
%ctl_code_before%(Abstime date, Int ix) = %ctl_code_ival%(1Jan1986, date-0:01, ix); 
%ctl_time_before%(Abstime date, Int ix) = %ctl_time_ival%(1Jan1986, date-0:01, ix); 
%ctl_attr_before%(Abstime date, Int ix) = %ctl_attr_ival%(1Jan1986, date-0:01, ix);

%ctl_type_after%(Abstime date, Int ix) = %ctl_type_ival%(date+0:01, 31dec2035, ix);
%ctl_code_after%(Abstime date, Int ix) = %ctl_code_ival%(date+0:01, 31dec2035, ix); 
%ctl_time_after%(Abstime date, Int ix) = %ctl_time_ival%(date+0:01, 31dec2035, ix); 
%ctl_attr_after%(Abstime date, Int ix) = %ctl_attr_ival%(date+0:01, 31dec2035, ix);

%last_logged_type%(Abstime date, Int ix) =
  default(%ctl_type_ival%(1Jan1901, date, ix), leg.%no_attribute%);
%last_logged_code%(Abstime date, Int ix) =
  default(%ctl_code_ival%(1Jan1901, date, ix), "NONE");
%last_logged_date%(Abstime date, Int ix) =
  default(%ctl_time_ival%(1Jan1901, date, ix), 01jan1986);

export %current_ctl_time% = %ctl_time%(%times_index_0%);
%current_ctl_type% = %ctl_type%(%times_index_0%);
%current_ctl_attr% = %ctl_attr%(%times_index_0%);

export %ctl_rows% =
    count(times(1000))
    while (not void(%current_ctl_type%));
    
%first_logged_date_for_lifus_after_date%(Abstime start) =
  default(min(times(%ctl_rows%), %current_ctl_time%)
          where (locate("LIFUS", %ctl_type%(%times_index_0%)) > 0 and 
                 %current_ctl_time% >= start),
            1Jan1986);

%nr_acts_of_type_and_code_in_ival_table%(String type, String code, Abstime istart, Abstime iend) =
  count(times(%ctl_rows%))
  where ((type = %ctl_type_ival%(istart, iend, %times_index_0%))
         and
         (code = "" or code = %ctl_code_ival%(istart, iend, %times_index_0%)));

export %nr_acts_of_type_in_ival_table%(String type, Abstime istart, Abstime iend) =
  %nr_acts_of_type_and_code_in_ival_table%(type, "", istart, iend);

%last_logged_date_for_type_code_attr%(String type, String code, String attr, Abstime date) =
  default(max(times(%ctl_rows%), %ctl_time_before%(date, %times_index_0%))
          where ((type = "" or type = %ctl_type_before%(date, %times_index_0%))
                 and
                 (code = "" or code = %ctl_code_before%(date, %times_index_0%))
                 and
                 (attr = "" or attr = %ctl_attr_before%(date, %times_index_0%))),
          1Jan1986);
    
export %last_logged_date_for_type_and_attr%(String type, String attr, Abstime date) =
  %last_logged_date_for_type_code_attr%(type, "", attr, date);
  
%last_logged_date_for_attr%(String attr, Abstime date) =
  %last_logged_date_for_type_code_attr%("", "", attr, date);
  
%last_logged_date_for_type_and_code%(String type, String code, Abstime date) =
  %last_logged_date_for_type_code_attr%(type, code, "", date);

export %last_logged_date_for_type%(String type, Abstime date) =
  %last_logged_date_for_type_code_attr%(type, "", "", date);
  
export %last_logged_date_for_code%(String code, Abstime date) =
  %last_logged_date_for_type_code_attr%("", code, "", date);  
    
%last_logged_attr_for_type_and_code%(String type, String code, Abstime date) =
  default(%ctl_attr_at_time%(%last_logged_date_for_type_and_code%(type, code, date)), 
          "");

export %last_logged_attr_for_type%(String type, Abstime date) =
  %last_logged_attr_for_type_and_code%(type, "", date);

/****************************************************************
 * Section 5: Composition/Qualification check
 ***************************************************************/
export %acceptable_companion%(String type) =
    %_acceptable_companion%(fundamental.%main_cat%, type, leg.%qual%, leg.%start_utc%, crew.%region%, false) or
    (leg.%qual% = "36" and
     %_acceptable_companion%(fundamental.%main_cat%, type, "38", leg.%start_utc%, crew.%region%, false)) or
    (leg.%qual% = "38" and
     %_acceptable_companion%(fundamental.%main_cat%, type, "36", leg.%start_utc%, crew.%region%, false));
%possible_acceptable_companion%(String type) =
    %_acceptable_companion%(fundamental.%main_cat%, type, leg.%qual%, leg.%start_utc%, crew.%region%, true);
export %acceptable_companion_str%(String type) =
    %_acceptable_companion_str%(fundamental.%main_cat%, type, leg.%qual%, leg.%start_utc%, crew.%region%, false);
table acceptable_companion(String main_cat, String type, String code, Abstime date, String region, bool ignore_tag) =
  main_cat, type, code, region  ->
    %_acceptable_companion%,
    %_acceptable_companion_str%;
  
  /* Flight Crew */
  "F", "T-FLIGHT",   -, - -> /* T-flights can be flown by any sort of instructor,
                             including LCP. In special cases the requirement is 
                             TRI/TRE /EKG 090310 */
                          crew.%is_instructor_leg_start% or
                          crew.%has_qln_lcp%(date),
                          "Instructor or LCP";
  "F", "ZFTT LIFUS", -, - -> crew.%is_lifus_matching_instr%(true,date) and
                             (crew.%is_tri_instr%(code, date) or 
                              crew.%is_tre_instr%(code, date)) and
                             %crew_is_qualified_for_apt%,
                          "TRI/TRE, which is airport qualified";
  "F", "ZFTT X",    -, - -> crew.%is_lifus_matching_instr%(true,date) and (crew.%is_tri_instr%(code, date) or crew.%is_tre_instr%(code, date)) and %crew_is_qualified_for_apt%,
                          "TRI/TRE, which is airport qualified";
  "F", "LIFUS",      -, - -> crew.%is_lifus_matching_instr%(false, date) and
                             %crew_is_qualified_for_apt%,
                          crew.%lifus_instructor_str%(false,date);
  "F", "X LIFUS",    -, - -> crew.%is_lifus_matching_instr%(true,date) and
                             %crew_is_qualified_for_apt%,
                          crew.%lifus_instructor_str%(true,date);
  "F", "FAM FLT",    -, - -> crew.%is_fam_flt_instr%(date),
                             crew.%is_fam_flt_instr_str%;
  "F", "LR REFRESH", -, - -> crew.%is_lr_refresh_instr%(date),
                             crew.%is_lr_refresh_instr_str%;
  "F", "LC",         -, - -> crew.%has_qln_lcp%(date),
                          "LCP";
  "F", "ILC",        -, - -> crew.%has_qln_lcp%(date),
                          "LCP";
  "F", "FBF",        -, - -> crew.%has_qln_lcp%(date) or
                          not crew.%has_any_restriction%(date),
                          "LCP/Non-restr";
  "F", "CNF",        -, - -> crew.%has_qln_lcp%(date),
                          "LCP";
  "F", "RELEASE",    -, - -> %crew_is_qualified_for_apt%,
                          "airport qualified companion";
  "F", "BU DUAL",    -, - -> crew.%is_instructor%(date),
                          "Instructor";
  "F",  "SUPERNUM",  -, - -> true, "";

  "F","FLT INSTR OL",-, - -> true, "";
  /*"F","ETOPS LIFUS/LC",    -, - -> ((crew.%is_lifus_matching_instr%(true, date) and %crew_is_qualified_for_apt%) or crew.%has_qln_lcp%(date)) and crew.%is_a2nx_qualified_at_date%(date),
                                    "ETOPS LIFUS/LC";*/
  "F","ETOPS LIFUS/LC",    -, - -> crew.%is_etops_lifus_lc_instr%(date),
                                    crew.%is_etops_lifus_lc_instr_str%;
  "F","ETOPS LIFUS",    -, - -> crew.%is_etops_lifus_lc_instr%(date),
                                    crew.%is_etops_lifus_lc_instr_str%;
  "F","ETOPS LC",    -, - -> crew.%is_etops_lifus_lc_instr%(date),
                                    crew.%is_etops_lifus_lc_instr_str%;



/* "F", "FOLLOW UP",  -, - -> crew.%has_position_chief_pilot%(date) or
                          crew.%has_qln_lcp%(date),
                          "LCP/CP";	Removed by mikaella 2014-09-09	*/ 
	  			  
  "F", "NEW HIRE FOLLOW UP",  -, - -> %crew_is_new_hire_mentor%,
                            concat("New-Hire Mentor.\nValid mentor is ", 
                                  default(model_crew.%extperkey_at_date_by_id%(leg.%mentor_crewid_on_new_hire_follow_up%,fundamental.%plan_start%),leg.%mentor_crewid_on_new_hire_follow_up%), 
                                  ", (",
                                  crew.%surname_at_date_by_id%(leg.%mentor_crewid_on_new_hire_follow_up%,fundamental.%plan_start%), ",",
                                  crew.%firstname_at_date_by_id%(leg.%mentor_crewid_on_new_hire_follow_up%,fundamental.%plan_start%), 
                                  ").");

  "F", "School flt", -, - -> crew.%is_tri_instr%(code, date),
                          "TRI";
  "F", "LIFUS unexp", -, - -> crew.%is_tri_instr%(code, date) or
                              crew.%is_tre_instr%(code, date) or
                              crew.%is_sfe_instr%(code, date),
                          "TRI, TRE, SFE";

  /* Simulator types */
  "F", "Skill test", -, - -> crew.%is_tre_instr%(code, date), 
                          "TRE";
  "F", "PC", -, -         -> crew.%is_tre_instr%(code, date) or
                             crew.%is_sup_instr%(code, date) or
                             crew.%is_sfe_instr%(code, date) or
                             crew.%is_ol_instr_ac_qual%(code, date), 
                          "TRE, SFE, SUP, OL";
  "F", "OPC", -, -         -> crew.%is_tre_instr%(code, date) or
                              crew.%is_sup_instr%(code, date) or
                              crew.%is_sfe_instr%(code, date) or
                              crew.%is_ol_instr_ac_qual%(code, date) or
                              crew.%is_tri_instr%(code, date),                              
                          "TRI, TRE, SFE, SUP, OL";
  "F", "Supervision", -, - -> crew.%is_sup_instr_qualgroup%(code, date),
                           "SUP";
  "F", "FFS TRI", -, -     -> crew.%is_tri_instr%(code, date), 
                          "TRI";
  "F", "FFS min SFE", -, - -> crew.%is_tre_instr%(code, date) or
                              crew.%is_sup_instr%(code, date) or
                              crew.%is_sfe_instr%(code, date), 
                          "TRE, SFE, SUP";
  "F", "FFS min SFI", -, - -> crew.%is_tre_instr%(code, date) or
                              crew.%is_sup_instr%(code, date) or
                              crew.%is_sfe_instr%(code, date) or
                              crew.%is_sfi_instr%(code, date), 
                          "TRE, SFE, SFI, SUP";
  /* General case, SIM, ASF, AST */
  "F", "Simulator", -, -  -> crew.%is_tri_tre_sfi_sfe_sup%(code, date), 
                          "TRI/TRE, SFI/SFE, SUP, OL";
  &
/*Link flight training*/
  "C", "LC",            "EJ",   - -> crew.%is_lcs%(date), "LCS";
  "C", "ILC",           "EJ",   - -> crew.%is_lcs%(date), "LCS";
  "C", "LC AP-POS",     "EJ",   - -> crew.%is_lcs%(date), "LCS";
  "C", "LINE FLIGHT",   "EJ",   - -> crew.%is_scc%(date), "SCC";
  "C", "LINE FLIGHT SCC","EJ",  - -> crew.%is_scc%(date), "SCC";
  "C", "FAM FLT",       "EJ",   - -> crew.%is_scc%(date), "SCC";
  /*SK flight training*/
  "C", "AS TRAINING",   "AL",   - -> crew.%is_as_instr%(date) and %tagged_instructor%(type, ignore_tag), "AS INSTR";
  "C", "AP TRAINING",    -,     - -> crew.%rank_at_date%(date) = "AP", "Purser";
/*  "C", "FOLLOW UP",    -,     - -> crew.%rank_at_date%(date) = "AP", "Purser";*/
  "C", "RELEASE",        -,     - -> crew.%rank_at_date%(date) = "AP", "Purser";
  "C", "SUPERNUM",       -,     - -> crew.%rank_at_date%(date) = "AP", "Purser";
  "C", "X SUPERNUM",     -,     - -> crew.%rank_at_date%(date) = "AP", "Purser";
  &
    -, "NEW", -, - -> not leg.%is_new% and crew.%main_func_at_date%(date) = main_cat, "Instr";
  &
  /* The default requirement for Cabin Crew is AP */
  "C", -, -, - -> crew.%rank_at_date%(date) = "AP" or
               /*(crew.%rank_at_date%(date) = "AH" and 
                crew.%is_linst_ac_qual_instr%(code, date)) or*/
               (crew.%is_scc%(date) and crew.%has_agmt_group_svs_cc%),
               "SK Purser/SVS SCC";
  /* If here, something is missing in the table -> obvious error code */
  -, -, -, - -> false, "ERROR";
end

%tagged_instructor%(String type, bool ignore_tag) =
    ignore_tag or leg.%instructor_code_safe% = type;
    
export %simulator_ok_qual% =
    if leg.%is_sim_instr% or leg.%is_sim_instr_supervis% then
        %acceptable_companion%(%sim_type_for_qual_check%)
    else
        crew.%has_qln%("ACQUAL", leg.%qual%, leg.%start_date%) or
        (leg.%qual% = "36" and
         crew.%has_qln%("ACQUAL", "38", leg.%start_date%)) or
        (leg.%qual% = "38" and
         crew.%has_qln%("ACQUAL", "36", leg.%start_date%));
        
export %simulator_qual_str% =
    %acceptable_companion_str%(%sim_type_for_qual_check%);
   
/* These needs to match table above */
export %sim_type_for_qual_check% =
  if leg.%is_skill_test% or leg.%is_sim_instr% and %crew_on_skill_test% then 
    "Skill test"
  else if leg.%is_sim_instr_supervis% then
    "Supervision"
  else if any (equal_legs, %leg_is_pc%) then 
    "PC" 
  else if leg.%is_opc% then
    "OPC"
  else if leg.%is_ffs% then
    %ffs_type_for_qual_check%
  else
    "Simulator";

%_last_two_char% =
  let start = length(leg.%code%) - 1;
  substr(leg.%code%, start, 2);
  
%ffs_type_for_qual_check% =
  /* Case 1a: Code found in rave_string_paramset sim_requiring_min_sfi */
  if %param_table%("sim_requiring_min_sfi", leg.%code%, leg.%start_hb%) then
    "FFS min SFI"
  /* Case 1b: Code found in rave_string_paramset sim_requiring_min_sfe */
  else if %param_table%("sim_requiring_min_sfe", leg.%code%, leg.%start_hb%) then
    "FFS min SFE"
  /* Case 2: Code found in rave_string_paramset sim_requiring_tri */
  else if %param_table%("sim_requiring_tri", leg.%code%, leg.%start_hb%) then
    "FFS TRI"
  /* Case 3 & 4: Actypes excl airbus */
  else if leg.%qual% not in crew.airbus then
    /* Case 3: Code ending with 12 min SFE */
    if %_last_two_char% = "12" then
      "FFS min SFE"
    /* Case 4: Code ending with 13 TRI */
    else if %_last_two_char% = "13" then
      "FFS TRI"
    else 
      "Simulator"
  else
    "Simulator";

%crew_is_qualified_for_apt% = 
    let rank = crew.%rank%;
    if rank = "FC" and %_airport_requirements_for_FC% or
        rank = "FP" and %_airport_requirements_for_FP%
    then crew.%has_aptqln_in_pp%(leg.%place%(leg.%end_station%))
    else True;

table airport_requirements_ha =
  leg.%end_station%, leg.%aoc% ->
    Bool %_airport_requirements_for_FC%,
    Bool %_airport_requirements_for_FP%;
  external crew.%airport_requirements_table%;
  Airport, aoc -> FCReq, FPReq;
  -      , -   -> False, False;
end

/****************************************************************
 * Section 6: Selects and Sorts
 ***************************************************************/

export %any_ac_qual% = crew.%any_ac_qual%; /* Used for recurrent searches when ac qual does not matter */
export %active_ac_qual% = crew.%active_ac_qual%; /* Used for recurrent searches when ac qual needs to be active */

set exclude_ranks_set = "FE", "FS", "FO", "FA", "FF";

/*
** Recurrent training
*/
%must_have_in_period%(String type, String acqual, Abstime p_start, Abstime p_end) =
    let expiry_date = %recurrent_type_expiry_date_incl_performed%(type, %any_ac_qual%, p_end, true);

    /* acqual is in general not used, but for 37/38 double qual crew PC should 
       be alternated between 37 and 38. 
       Checking expiry date at p_end is needed to check performed, and ok since
       the table lookup checks for date larger than validfrom (which typically
       is 1Jan1986 /EKG 
       %type_not_required% is used to filter out only required recurrent documents
       for "must_have_..." BZ 27474 /JC 20/5-08*/
    if crew.%rank_at_date%(p_start) in exclude_ranks_set then
      false
    else
      if %rec_type_required%(type, p_start) then
        default((acqual = "" or 
                /* Handles the case where upcoming lc qual is "A3 or A4" */
                locate(acqual, %recurrent_type_expiry_ac_qual%(type, %any_ac_qual%, p_start)) <> 0) and
                expiry_date <= p_end,
                false)
      else
        if %crmc_except_crew%(type, p_start) then
          if expiry_date = %abstimemin% then
            system_db_parameters.%crmc_first_3_year_cycle_validto%(p_start) <= p_end
          else
            expiry_date <= p_end
        else
          false;


%may_have_in_period%(String type, String acqual, Abstime p_start, Abstime p_end) =
    if crew.%rank_at_date%(p_start) in exclude_ranks_set then
      false
    else
      (%rec_type_required%(type, p_start) or %crmc_except_crew%(type, p_start)) and
      default((acqual = "" or
               /* Handles the case where upcoming lc qual is "A3 or A4" */
               locate(acqual, %recurrent_type_expiry_ac_qual%(type, %any_ac_qual%, p_start)) <> 0) and
              %earliest_rec_assignment_incl_perf%(type, %active_ac_qual%, p_start, true) < p_end,
              false);


export %must_have_in_pp%(String type) =
  %must_have_in_pp_w_acqual%(type, "");

export %rec_period_end% =
    if calendar.%month_number%(%pp_end%) <> calendar.%month_number%(%pp_end% + 24:00) then
        /* pp_end was last in month explicitly */
        round_up_month(%pp_end%)
    else
        round_down_month(%pp_end%);
        
%must_have_in_pp_w_acqual%(String type, String acqual) =
  %must_have_in_period%(type, acqual, %pp_start%, %rec_period_end%);
  
export %may_have_in_pp%(String type) =
  %may_have_in_pp_w_acqual%(type, "");

%may_have_in_pp_w_acqual%(String type, String acqual) =
  %may_have_in_period%(type, acqual, %pp_start%, %rec_period_end%);
  
/* 
 * Must haves... (cached)
 */
/* Flight crew */
%must_have_pc% = %must_have_in_pp%("PC");
%must_have_opc% = %must_have_in_pp%("OPC");
%must_have_pc_opc% = %must_have_pc% or %must_have_opc%;

%must_have_pca3% = %must_have_in_pp%("PCA3");
%must_have_opca3% = %must_have_in_pp%("OPCA3");
%must_have_pc_opc_a3% = %must_have_pca3% or %must_have_opca3%;

%must_have_pca4% = %must_have_in_pp%("PCA4");
%must_have_opca4% = %must_have_in_pp%("OPCA4");
%must_have_pc_opc_a4% = %must_have_pca4% or %must_have_opca4%;

%must_have_pca5% = %must_have_in_pp%("PCA5");
%must_have_opca5% = %must_have_in_pp%("OPCA5");
%must_have_pc_opc_a5% = %must_have_pca5% or %must_have_opca5%;

%must_have_pca3a5% = %must_have_in_pp%("PCA3A5");
%must_have_opca3a5% = %must_have_in_pp%("OPCA3A5");

%must_have_pc37% = %must_have_in_pp_w_acqual%("PC", "37");
%must_have_opc37% = %must_have_in_pp_w_acqual%("OPC", "37");
%must_have_pc_opc_37% = %must_have_pc37% or %must_have_opc37%;

%must_have_pc38% = %must_have_in_pp_w_acqual%("PC", "38");
%must_have_opc38% = %must_have_in_pp_w_acqual%("OPC", "38");
%must_have_pc_opc_38% = %must_have_pc38% or %must_have_opc38%;

export %must_have_pc_any% =
  %must_have_pc% or
  %must_have_pca3% or %must_have_pca4% or %must_have_pca5% or
  %must_have_pc37% or %must_have_pc38%
  or %must_have_pca3a5%;

export %must_have_opc_any% =
  %must_have_opc% or
  %must_have_opca3% or %must_have_opca4% or %must_have_opca5% or
  %must_have_opc37% or %must_have_opc38%
  or %must_have_opca3a5%;

%must_have_pc_opc_any% =
  %must_have_pc_any% or
  %must_have_opc_any%;
 
%must_have_pgt% = %must_have_in_pp%("PGT");
export %must_have_pgt_any% = %must_have_pgt%;

%must_have_crm% = %must_have_in_pp%("CRM");
%must_have_crmc% = %must_have_in_pp%("CRMC");

export %must_have_lc% = %must_have_in_pp%("LC");
export %must_have_lc_a2% = %must_have_in_pp_w_acqual%("LC", "A2");
export %must_have_lc_a3% = %must_have_in_pp_w_acqual%("LC", "A3");
export %must_have_lc_a4% = %must_have_in_pp_w_acqual%("LC", "A4");
export %must_have_lc_a5% = %must_have_in_pp_w_acqual%("LC", "A5");
export %must_have_lcc% = %must_have_in_pp%("LCC");

/* Cabin crew.
only used in select, must have REC. Warning 'H' is not included */
%must_have_rec% = %must_have_in_pp%("REC") and not
                  %has_warning_code_h%;

export %next_rec_date% =
  nmax(%_next_rec_date_plan_end%,
       %_next_rec_date_pp_start%);

%_next_rec_date_plan_end% =
  %recurrent_type_expiry_date_incl_performed%("REC", %any_ac_qual%, fundamental.%plan_end%, false);
%_next_rec_date_pp_start% =
  %recurrent_type_expiry_date_incl_performed%("REC", %any_ac_qual%, %pp_start%, false);

export %rec_date_exist% = 
   not void(%_next_rec_date_plan_end%) and
   not void(%_next_rec_date_pp_start%);

export %has_warning_code_h% =
not %rec_date_exist% or
%next_rec_date% <= %recurrent_season_start%("REC", %pp_start%);

/* 
 * May haves... (cached)
 */
/* Flight crew */
%may_have_pc% = %may_have_in_pp%("PC");
%may_have_opc% = %may_have_in_pp%("OPC");
%may_have_pc_opc% = %may_have_pc% or %may_have_opc%;

%may_have_pca3% = %may_have_in_pp%("PCA3");
%may_have_opca3% = %may_have_in_pp%("OPCA3");
%may_have_pc_opc_a3% = 
  %may_have_pca3% or 
  (%may_have_opca3% and not %may_have_pca4%);

%may_have_pca4% = %may_have_in_pp%("PCA4");
%may_have_opca4% = %may_have_in_pp%("OPCA4");
%may_have_pc_opc_a4% = 
  %may_have_pca4% or 
  (%may_have_opca4% and not %may_have_pca3%);

%may_have_pca5% = %may_have_in_pp%("PCA5");
%may_have_opca5% = %may_have_in_pp%("OPCA5");
%may_have_pc_opc_a5% = 
  %may_have_pca5% or 
  (%may_have_opca5% and not %may_have_pca3%);

%may_have_pca3a5% = %may_have_in_pp%("PCA3A5");
%may_have_opca3a5% = %may_have_in_pp%("OPCA3A5");
%may_have_pc_opc_a3a5% = %may_have_pca3a5% or %may_have_opca3a5%;

%may_have_pc37% = %may_have_in_pp_w_acqual%("PC", "37");
%may_have_opc37% = %may_have_in_pp_w_acqual%("OPC", "37");
%may_have_pc_opc_37% = %may_have_pc37% or %may_have_opc37%;

%may_have_pc38% = %may_have_in_pp_w_acqual%("PC", "38");
%may_have_opc38% = %may_have_in_pp_w_acqual%("OPC", "38");
%may_have_pc_opc_38% = %may_have_pc38% or %may_have_opc38%;

export %may_have_pc_any% =
  %may_have_pc% or
  %may_have_pca3% or %may_have_pca4% or %may_have_pca5% or
  %may_have_pc37% or %may_have_pc38%
  or %may_have_pca3a5%;

export %may_have_opc_any% =
  %may_have_opc% or
  %may_have_opca3% or %may_have_opca4% or %may_have_opca5% or
  %may_have_opc37% or %may_have_opc38%
  or %may_have_opca3a5%;

%may_have_pc_opc_any% =
  %may_have_pc_opc% or
  %may_have_pc_opc_a3% or %may_have_pc_opc_a4% or
  %may_have_pc_opc_37% or %may_have_pc_opc_38%
  or %may_have_pc_opc_a3a5%;
 
%may_have_pgt% = %may_have_in_pp%("PGT");
%may_have_pgt_any% = %may_have_pgt%;

%may_have_crm% = %may_have_in_pp%("CRM") and 
  %must_have_in_period%("CRM", "", round_down_year(%pp_start%+00:01), round_up_year(%pp_start%+00:01));

%may_have_crmc% =
  %may_have_in_pp%("CRMC") and
  (if %crmc_except_crew%("CRMC", %pp_start%) then
     %must_have_in_period%("CRMC", "", system_db_parameters.%crmc_first_3_year_cycle_validfrom%(%pp_start%), system_db_parameters.%crmc_first_3_year_cycle_validto%(%pp_start%))
   else
     %must_have_in_period%("CRMC", "", round_down_year(%pp_start%+00:01), round_up_year(%pp_start%+00:01)));

export %may_have_lc% = %may_have_in_pp%("LC");
export %may_have_lc_a2% = %may_have_in_pp_w_acqual%("LC", "A2");
export %may_have_lc_a3% = %may_have_in_pp_w_acqual%("LC", "A3");
export %may_have_lc_a4% = %may_have_in_pp_w_acqual%("LC", "A4");
export %may_have_lc_a5% = %may_have_in_pp_w_acqual%("LC", "A5");
export %may_have_lcc% = %may_have_in_pp%("LCC");

export %needs_lc_after_fam% = default(%expiry_date_lc_after_fam% <> "", false);

%latest_fam_date_without_lc%(String ac_qual) =
  let fam_date = %last_perf_date_for_flight_of_type_and_code%("FAM FLT", ac_qual, %pp_end%),
      lc_date = %last_perf_date_for_flight_of_type_and_code%("LC", ac_qual, %pp_end%);
  if fam_date > lc_date then
    fam_date
  else
    void_abstime;

%latest_lc_after_fam_date%(String ac_qual) =
  if model_crew.%has_ac_qual_at_date%(crew.%id%, ac_qual, %pp_end%) and
    not default(model_crew.%doc_subtype_acq%(crew.%id%, "REC", "LC", %pp_end%, ac_qual) = "LC", False) then
    add_months(%latest_fam_date_without_lc%(ac_qual), 6)
  else
    void_abstime;

export %lc_after_fam_date% = %latest_lc_after_fam_date%(%lc_qual_after_fam%);
export %expiry_date_lc_after_fam% = %expiry_date_inclusive%(%lc_after_fam_date%);
export %lc_qual_after_fam% = "A5";

export set fam_flt_acquals = parameter "A5" remark "AC qualifications that need FAM FLT";

%fam_flt_performed_twice%(String ac_qual) =
  let fam2_date = %last_perf_date_for_flight_of_type_and_code%("FAM FLT", ac_qual, %pp_end%),
      fam1_date = %last_perf_date_for_flight_of_type_and_code%("FAM FLT", ac_qual, fam2_date - 0:01);
  (fam1_date > %abstimemin%) or
  (%last_perf_date_for_flight_of_type_code_and_attr%("FAM FLT", ac_qual, "2 legs", %pp_end%) > %abstimemin%);

export %latest_fam_flt_date%(String ac_qual) =
  %last_perf_date_for_flight_of_type_and_code%("FAM FLT", ac_qual, %pp_end%);

/* Used for rudob */
export %fam_flt_needed% =
  let fam_flt_perf_date = default(%last_perf_date_for_flight_of_type_and_code%("FAM FLT", %fam_flt_needed_ac_qual%, %fam_flt_needed_end%), %abstimemin%);

  fam_flt_perf_date < %fam_flt_needed_start%;

export %fam_flt_needed_ac_qual% = %ac_qual_of_last_training_before%("FAM FLT", %pp_end%);
export %fam_flt_needed_start% =
  let simulator = %first_asf%(%fam_flt_needed_ac_qual%, %pp_end%);

  if simulator > %abstimemin% then
    round_up(simulator + 0:01, 24:00)
  else
    %abstimemin%;

export %fam_flt_needed_end% =
  let first_sim = %first_asf%(%fam_flt_needed_ac_qual%, %pp_end%),
      last_sim_or_ast = nmax(%prev_asf%(%fam_flt_needed_ac_qual%, %pp_end%), %prev_ast%(%fam_flt_needed_ac_qual%, %pp_end%));

  if last_sim_or_ast > first_sim then
    round_up(round_up(last_sim_or_ast + 0:01, 24:00) + 24:00 * %max_days_between_sim_ext_and_fam_flt%, 24:00)
  else
    round_up(%fam_flt_needed_start% + 24:00 * %max_days_between_sim_and_fam_flt%, 24:00);

export %max_days_between_sim_and_fam_flt% = 45;
export %max_days_between_sim_ext_and_fam_flt% = 21;

%prev_asf_or_ast%(String ac_qual, Abstime end_time) =
  nmax(%prev_asf%(ac_qual, end_time),
       %prev_ast%(ac_qual, end_time));

export %initial_asf_or_prev_asf_or_ast%(String ac_qual, Abstime end_time) =
  let first_asf = %first_asf%(ac_qual, end_time);

  if first_asf = %abstimemin% then
    %abstimemin%
  else if %prev_is_initial_asf%(ac_qual, end_time) then
    first_asf
  else
    nmax(%prev_asf%(ac_qual, end_time),
         %prev_ast%(ac_qual, end_time));

%prev_is_initial_asf%(String ac_qual, Abstime end_time) =
  let first_asf = %first_asf%(ac_qual, end_time),
      prev_asf_or_ast = %prev_asf_or_ast%(ac_qual, end_time);

  (prev_asf_or_ast - first_asf) < (24:00 * (%max_days_between_sim_and_fam_flt% - %max_days_between_sim_ext_and_fam_flt%));

export %max_days_before_fam_flt% =
  if %prev_is_initial_asf%(leg.%qual%, leg.%start_utc%) then
    %max_days_between_sim_and_fam_flt%
  else
    %max_days_between_sim_ext_and_fam_flt%;

%first_asf%(String ac_qual, Abstime end_time) =
  let perf_date = %first_perf_date_for_act_of_type_for_ac_qual%("ASF", ac_qual, end_time);
  if perf_date = %abstimemax% then
    %abstimemin%
  else
    perf_date;

%prev_asf%(String ac_qual, Abstime end_time) =
  %last_perf_date_for_act_of_type_for_ac_qual%("ASF", ac_qual, end_time);
  
%prev_ast%(String ac_qual, Abstime end_time) =
  %last_perf_date_for_act_of_type_for_ac_qual%("AST", ac_qual, end_time);

/* Used for rudob between LRP2 and ETOPS LIFUS/LC */
export %etops_lifus_lc_needed% =
  let etops_lifus_lc_perf_date = default(nmax(%last_perf_date_for_flight_of_type_and_code%("ETOPS LIFUS/LC", %etops_lifus_lc_needed_ac_qual%, %etops_lifus_lc_needed_end%),
                                              %last_perf_date_for_flight_of_type_and_code%("ETOPS LIFUS", %etops_lifus_lc_needed_ac_qual%, %etops_lifus_lc_needed_end%)), %abstimemin%);

etops_lifus_lc_perf_date < %etops_lifus_lc_needed_start%;

export %etops_lifus_lc_needed_ac_qual% = default(%ac_qual_of_last_training_before%("ETOPS LIFUS/LC", %pp_end%),%ac_qual_of_last_training_before%("ETOPS LIFUS", %pp_end%));

export %etops_lifus_lc_needed_start% =
  let lrp2 = %last_perf_date_for_act_of_type_and_code%("COURSE", "LRP2", leg.%start_utc%);

  if lrp2 > %abstimemin% then
    round_up(lrp2 + 0:01, 24:00)
  else
    %abstimemin%;

export %etops_lifus_lc_needed_end% =
  nmax(round_up(%etops_lifus_lc_needed_start% + 24:00 * %max_days_between_lrp2_and_etops_lifus_lc%, 24:00), %abstimemin%);

export %max_days_between_lrp2_and_etops_lifus_lc% = 60;

/* Consolidation sectors needed: begin */

export %consolidation_ac_qual% =
  let ac_qual = %ac_qual_of_last_training_before%("FAM FLT", %pp_end%);
  if crew.%is_pilot% and %fam_flt_performed_twice%(ac_qual) then
    ac_qual
  else
    "";

export %consolidation_course_type% =
  %course_type_of_last_training_before%("FAM FLT", %pp_end%);

export %consolidation_period_start_hb% = round_up(%utc2hb%(training.%latest_fam_flt_date%(%consolidation_ac_qual%)) + 0:01, 24:00);
export %consolidation_period_end_hb% =
  if %consider_asf_ast_pc_opc% then
    %consolidation_period_end_150d_hb%
  else
    if %consider_fmst% then
      %consolidation_period_end_120d_hb%
    else
      %consolidation_period_end_90d_hb%;

export %nr_consolidation_sectors_required% = 10;
export %nr_consolidation_sectors_required_before_fmst% = 8;

export %consider_fmst% =
  %nr_consolidation_sectors_in_90d% < %nr_consolidation_sectors_required% and
  %last_fmst_date_hb% > %consolidation_period_start_hb% and
  %nr_consolidation_sectors_before_fmst% >= %nr_consolidation_sectors_required_before_fmst%;

export %consider_asf_ast_pc_opc% =
  %nr_consolidation_sectors_in_120d% < %nr_consolidation_sectors_required% and
  %last_asf_ast_pc_opc_date_hb% > %consolidation_period_start_hb%;

export %consolidation_period_end_90d_hb% =
  %consolidation_period_start_hb% + 90 * 24:00;
export %consolidation_period_end_120d_hb% =
  %consolidation_period_start_hb% + 120 * 24:00;
export %consolidation_period_end_150d_hb% =
  %consolidation_period_start_hb% + 150 * 24:00;

export %last_fmst_date_hb% =
    round_down(%utc2hb%(training.%last_perf_date_for_act_of_type%("FMST", %hb2utc%(%consolidation_period_end_120d_hb%))), 24:00);

%last_asf_ast_pc_opc_date_hb% = nmax(%last_activity_for_date_hb%("ASF"),
                                     %last_activity_for_date_hb%("AST"),
                                     nmax(%last_activity_for_date_hb%("PC"),
                                          %last_activity_for_date_hb%("OPC")));

%last_activity_for_date_hb%(String activity) =
    round_down(%utc2hb%(training.%last_perf_date_for_act_of_type_for_ac_qual%(activity, %consolidation_ac_qual%, %hb2utc%(%consolidation_period_end_150d_hb%))), 24:00);

export %nr_consolidation_sectors_in_90d% = 
  accumulators.%nr_active_flights_in_period%(%consolidation_ac_qual%, %consolidation_period_start_hb%, %consolidation_period_end_90d_hb%);
export %nr_consolidation_sectors_in_120d% = 
  accumulators.%nr_active_flights_in_period%(%consolidation_ac_qual%, %consolidation_period_start_hb%, %consolidation_period_end_120d_hb%);
export %nr_consolidation_sectors_in_150d% = 
  accumulators.%nr_active_flights_in_period%(%consolidation_ac_qual%, %consolidation_period_start_hb%, %consolidation_period_end_150d_hb%);

%nr_consolidation_sectors_before_fmst% =
  accumulators.%nr_active_flights_in_period%(%consolidation_ac_qual%, %consolidation_period_start_hb%, %last_fmst_date_hb%);

export %nr_consolidation_sectors_after_fmst_before_pp% =
  accumulators.%nr_active_flights_in_period%(%consolidation_ac_qual%, %last_fmst_date_hb%, %pp_start%);

export %nr_consolidation_sectors_perf% =
  accumulators.%nr_active_flights_in_period%(%consolidation_ac_qual%, %consolidation_period_start_hb%, %perf_publ_limit%);
export %nr_consolidation_sectors_publ% =
  accumulators.%nr_active_flights_in_period%(%consolidation_ac_qual%, %perf_publ_limit%, %publ_plan_limit%);
export %nr_consolidation_sectors_plan% =
  accumulators.%nr_active_flights_in_period%(%consolidation_ac_qual%, %publ_plan_limit%, %consolidation_period_end_hb%);
export %nr_consolidation_sectors_in_period%(Abstime start_hb, Abstime end_hb) =
  accumulators.%nr_active_flights_in_period%(%consolidation_ac_qual%,
                                             nmax(start_hb, %consolidation_period_start_hb%),
                                             nmin(end_hb, %consolidation_period_end_hb%));

%perf_publ_limit% = %within_period%(%now_hb%);
%publ_plan_limit% = %within_period%(nmax(%publ_date%, %now_hb%)); /* Publish date is normally larger than now: the limit is to give a correct sum of sectors when running on old plans */
%within_period%(Abstime limit) = nmax(%consolidation_period_end_hb%, nmin(%consolidation_period_start_hb%, limit));

%publ_date% = attributes.%crew_last_published%;

/* Consolidation sectors needed: end */

/* Active sectors needed after ETOPS training: begin */

table etops_training_lookup =
  %etops_training_ac_qual% -> export %etops_training_accumulator_type%,
                              export %etops_training_course_type%;

  "A2" -> "A2LH", "ETOPS LC";
  -    -> void_string, void_string;
end

export %leg_needs_etops_training% =
  %leg_qual% = %etops_training_ac_qual% and
  %leg_is_long_haul%;

export %etops_training_ac_qual% =
  if %latest_etops_lc_date% > %abstimemin% then
    "A2"
  else
    "";

%latest_lrp2_date% =
  %last_perf_date_for_act_of_type_and_code%("COURSE", "LRP2", %pp_end%);

%latest_etops_lc_date% =
  %last_perf_date_for_act_of_type_and_code%("ETOPS LC", "A2", %pp_end%);

export %etops_training_period_start_hb% = round_up(%utc2hb%(%latest_etops_lc_date%) + 0:01, 24:00);
export %etops_training_period_end_hb% =
  if %consider_lr_refresh% then
    %etops_training_period_end_lr_refresh_hb%
  else
    if %consider_lrp2r% then
      %etops_training_period_end_lrp2r_hb%
    else
      %etops_training_period_end_150d_hb%;

export %nr_etops_training_sectors_required% = 8;
export %nr_etops_training_sectors_required_before_lrp2r% = 6;

export %consider_lrp2r% =
  %nr_etops_training_sectors_in_150d% < %nr_etops_training_sectors_required% and
  %last_lrp2r_date_hb% > %etops_training_period_start_hb% and
  %nr_etops_training_sectors_before_lrp2r% >= %nr_etops_training_sectors_required_before_lrp2r%;

export %consider_lr_refresh% =
  %nr_etops_training_sectors_in_150d% < %nr_etops_training_sectors_required_before_lrp2r% and
  %last_lr_refresh_date_hb% > %etops_training_period_start_hb%;

export %etops_training_period_end_150d_hb% =
  %etops_training_period_start_hb% + 150 * 24:00;
export %etops_training_period_end_lrp2r_hb% =
  %last_lrp2r_date_hb% + 60 * 24:00;
%etops_training_period_end_lr_refresh_hb% =
  %last_lr_refresh_date_hb% + 30 * 24:00;

export %last_lrp2r_date_hb% =
    round_down(%utc2hb%(%last_perf_date_for_act_of_type_and_code%("COURSE", "LRP2R", %pp_end%)), 24:00);


%last_lr_refresh_date_hb% =
    round_down(%utc2hb%(%last_perf_date_for_flight_of_type_and_code%("LR REFRESH", %etops_training_ac_qual%, %pp_end%)), 24:00);

export %nr_etops_training_sectors_in_150d% = 
  accumulators.%nr_all_flights_in_period%(%etops_training_accumulator_type%, %etops_training_period_start_hb%, %etops_training_period_end_150d_hb%)
  - %training_log_ETOPS_lifus_count%(%etops_training_period_start_hb%, %etops_training_period_end_150d_hb%);
export %nr_etops_training_sectors_considering_lrp2r% = 
  accumulators.%nr_all_flights_in_period%(%etops_training_accumulator_type%, %etops_training_period_start_hb%, %etops_training_period_end_lrp2r_hb%)
  - %training_log_ETOPS_lifus_count%(%etops_training_period_start_hb%, %etops_training_period_end_lrp2r_hb%);
export %nr_etops_training_sectors_considering_lr_refresh% = 
  accumulators.%nr_all_flights_in_period%(%etops_training_accumulator_type%, %etops_training_period_start_hb%, %etops_training_period_end_lr_refresh_hb%)
  - %training_log_ETOPS_lifus_count%(%etops_training_period_start_hb%, %etops_training_period_end_lr_refresh_hb%);

%nr_etops_training_sectors_before_lrp2r% =
  accumulators.%nr_all_flights_in_period%(%etops_training_accumulator_type%, %etops_training_period_start_hb%, %last_lrp2r_date_hb%)
  - %training_log_ETOPS_lifus_count%(%etops_training_period_start_hb%, %last_lrp2r_date_hb%);

export %nr_etops_training_sectors_after_lrp2r_within_60days% =
  accumulators.%nr_all_flights_in_period%(%etops_training_accumulator_type%, %last_lrp2r_date_hb%, %last_lrp2r_date_hb% + 60 * 24:00);


export %nr_etops_training_sectors_perf% =
  accumulators.%nr_all_flights_in_period%(%etops_training_accumulator_type%, %etops_training_period_start_hb%, %etops_training_perf_publ_limit%)
  - %training_log_ETOPS_lifus_count%(%etops_training_period_start_hb%, %etops_training_period_end_hb%);
export %nr_etops_training_sectors_publ% =
  accumulators.%nr_all_flights_in_period%(%etops_training_ac_qual%, %etops_training_perf_publ_limit%, %etops_training_publ_plan_limit%);
export %nr_etops_training_sectors_plan% =
  accumulators.%nr_all_flights_in_period%(%etops_training_ac_qual%, %etops_training_publ_plan_limit%, %etops_training_period_end_hb%);
export %nr_etops_training_sectors_in_period%(Abstime start_hb, Abstime end_hb) =
  accumulators.%nr_all_flights_in_period%(%etops_training_ac_qual%,
                                             nmax(start_hb, %etops_training_period_start_hb%),
                                             nmin(end_hb, %etops_training_period_end_hb%));

%etops_training_perf_publ_limit% = %etops_training_within_period%(%now_hb%);
%etops_training_publ_plan_limit% = %etops_training_within_period%(nmax(%publ_date%, %now_hb%)); /* Publish date is normally larger than now: the limit is to give a correct sum of sectors when running on old plans */
%etops_training_within_period%(Abstime limit) = nmax(%etops_training_period_end_hb%, nmin(%etops_training_period_start_hb%, limit));

/* Active sectors needed after ETOPS training: end */

export %not_had_pm% =   crew.%is_cabin% and accumulators.%pm_attended% = 0;
export %not_enough_pm% = crew.%is_cabin% and accumulators.%pm_attended% <= parameters.%pm_attend_goal%;
export %pm_sort% = default(accumulators.%pm_last_attend%,01Jan1986);
export %pm_last_attend% = accumulators.%pm_last_attend%;

/* Cabin crew.
only used in select, may have REC.
Warning 'H' and 'E' is not included ('E' is handled by %must_have_rec%)
*/
%may_have_rec% = %may_have_in_pp%("REC") and not
                 %must_have_in_pp%("REC") and not
                 %has_warning_code_h%;

export %lc_date% = 
    if %flight_crew% then %recurrent_type_expiry_date%("LC", %lc_date_ac_qual_selector%, %now%)
    else %recurrent_type_expiry_date%("LCC", %any_ac_qual%, %now%);

%lc_date_ac_qual_selector% =
  if crew.%is_double_qualified% or
     crew.%is_a3a5_qualified% or
     crew.%is_a3a4a5_qualified%
  then
    %any_ac_qual%
  else
    %lc_qual%;

export %lc_date_for_acqual%(String acqual) = %recurrent_type_expiry_date_for_acqual%("LC", acqual, %now%);
export %pgt_date% = %recurrent_type_expiry_date%("PGT", %any_ac_qual%, %now%);
%pgt_any_date% = %pgt_date%;
export %rec_date% = %recurrent_type_expiry_date%("REC", %any_ac_qual%, %now%);
export %crm_date% = %recurrent_type_expiry_date%("CRM", %any_ac_qual%, %now%);
export %crmc_date% =
  if %crmc_except_crew%("CRMC", %pp_start%) then
    default(%recurrent_type_expiry_date%("CRMC", %any_ac_qual%, %now%), system_db_parameters.%crmc_first_3_year_cycle_validto%(%pp_start%))
  else
    %recurrent_type_expiry_date%("CRMC", %any_ac_qual%, %now%);
export %rec_month% = calendar.%month_number%(%rec_date% - 24:00);
export %pgt_month% = calendar.%month_number%(%pgt_date% - 24:00);
/* ------------------ */

/*
 * Unified PC/OPC lookup 
 */
 
/* When checking if crew has the qual of the rec doc we check at pp_end,
   or, if expiry larger than pp_end, at expiry. This way we catch:
   1. Old docs with obsolete quals. It will give warning
   2. New docs with acquals that crew will get after pp_end
   3. Crew whose qual ends before the expiry /EKG 081113 */
%has_qual%(String qual, abstime expiry) =
    %_has_qual%(qual, %pp_end%) or
    %_has_qual%(qual, expiry);

%_has_qual%(String qual, abstime date) = 
    crew.%has_ac_qln%(date-24:00, qual);

%non_ski_qual_pc% =
  %recurrent_type_expiry_ac_qual%("PC", %active_ac_qual%, %pp_start%);
  
%non_ski_qual_opc% =
  %recurrent_type_expiry_ac_qual%("OPC", %active_ac_qual%, %pp_start%);

export %lc_qual% = %recurrent_type_expiry_ac_qual%("LC", %lc_qual_ac_qual_selector%, %pp_start%);

%lc_qual_ac_qual_selector% =
  if crew.%is_double_qualified% or
     crew.%is_a3a5_qualified% or
     crew.%is_a3a4a5_qualified%
  then
    %any_ac_qual%
  else
    %active_ac_qual%;

table unified_pc_opc_lookup = 
  crew.%is_pilot%,
  %has_qual%("A2",%pp_end%), 
  %has_qual%("A3",%pp_end%), 
  %has_qual%("A4",%pp_end%),
  %has_qual%("A5",%pp_end%) /* and %crew_has_A5_extras%(%pp_end%) */ ->
                              Abstime %_pc_date_1%,
                              Int %_pc_month_1%,
                              export String %pc_qual_1%,
                              export String %pc_code_1%,
                              Abstime %_opc_date_1%,
                              Int %_opc_month_1%,
                              export String %opc_qual_1%,
                              export String %opc_code_1%;
  true,true,true,-,- ->       %pc_def_date%, calendar.%month_number%(%pc_def_date% - 24:00), "A2", "PC", 
                              %opc_def_date%, calendar.%month_number%(%opc_def_date% - 24:00), "A2", "OPC";
  true,false,true,-,false  -> %pc_a3_date%, calendar.%month_number%(%pc_a3_date% - 24:00), "A3", "PCA3", 
                              %opc_a3_date%, calendar.%month_number%(%opc_a3_date% - 24:00), "A3", "OPCA3";
  true,false,true,-,true      -> %pc_a3a5_date%, calendar.%month_number%(%pc_a3a5_date% - 24:00), "A3/A5", "PCA3A5", 
                              %opc_a3a5_date%, calendar.%month_number%(%opc_a3a5_date% - 24:00), "A3/A5", "OPCA3A5";
  
  true,true,false,false,true    -> %pc_def_date%, calendar.%month_number%(%pc_def_date% - 24:00), "A2", "PC",
                                %opc_def_date%, calendar.%month_number%(%opc_def_date% - 24:00), "A2", "OPC";

  true,false,false,false,true  -> %pc_a5_date%, calendar.%month_number%(%pc_a5_date% - 24:00), "A5", "PCA5", 
                              %opc_a5_date%,calendar.%month_number%(%opc_a5_date% - 24:00),  "A5", "OPCA5";
  
  true,false,false,true,false -> %pc_a4_date%, calendar.%month_number%(%pc_a4_date% - 24:00), "A4", "PCA4",
                           %opc_a4_date%,calendar.%month_number%(%opc_a4_date% - 24:00), "A4", "OPCA4";

  true,true,false,-,false   -> %pc_def_date%, calendar.%month_number%(%pc_def_date% - 24:00), "A2", "PC", 
                              %opc_def_date%, calendar.%month_number%(%opc_def_date% - 24:00), "A2", "OPC";
 
  true,false,false,false,false -> %pc_def_date%, calendar.%month_number%(%pc_def_date% - 24:00), %non_ski_qual_pc%, "PC", 
                              %opc_def_date%, calendar.%month_number%(%opc_def_date% - 24:00), %non_ski_qual_opc%, "OPC";
  false,-,-,-,-            -> void_abstime,void_int,void_string,void_string,void_abstime,void_int,void_string,void_string;
end

%map_pc_qual_to_ac_qual%(String pc_qual) =
  if pc_qual = "A3/A5" then
    "A5"
  else
    pc_qual;

%mapped_pc_qual_1% = %map_pc_qual_to_ac_qual%(%pc_qual_1%);
%mapped_opc_qual_1% = %map_pc_qual_to_ac_qual%(%opc_qual_1%);

%pc_month_for_ac_qual%(String ac_qual) =
  calendar.%month_number%(%pc_date_for_active_ac_qual%(ac_qual) - 24:00);

%pc_date_for_active_ac_qual%(String ac_qual) =
  let pc_date = %pc_date_for_ac_qual%(ac_qual);

  if %has_qual%(ac_qual, pc_date) then pc_date else void_abstime;

export %pc_date_1% =
    if %has_qual%(%mapped_pc_qual_1%,%_pc_date_1%) or %has_qual%("FF", %_pc_date_1%) then %_pc_date_1% else void_abstime;
    
export %pc_month_1% =
    if %has_qual%(%mapped_pc_qual_1%,%_pc_date_1%) or %has_qual%("FF", %_pc_date_1%) then %_pc_month_1% else void_int;
                         
export %opc_date_1% =
    if %has_qual%(%mapped_opc_qual_1%,%_opc_date_1%) or %has_qual%("FF", %_opc_date_1%) then %_opc_date_1% else void_abstime;
    
export %opc_month_1% =
    if %has_qual%(%mapped_opc_qual_1%,%_opc_date_1%) or %has_qual%("FF", %_opc_date_1%) then %_opc_month_1% else void_int;
    
export %expiry_month_pc_1% =
  default(if void(%pc_date_1%) then
            concat("(", %expiry_month_inclusive%(%_pc_date_1%), " ", %pc_qual_1%, ")")
          else
            %expiry_month_inclusive%(%pc_date_1%),"-");
export %expiry_month_pc_2% =
  default(%expiry_month_inclusive%(%pc_date_2%),"-");
export %expiry_month_opc_1% =
  default(if void(%opc_date_1%) then
            concat("(", %expiry_month_inclusive%(%_opc_date_1%), " ", %opc_qual_1%, ")")
          else
            %expiry_month_inclusive%(%opc_date_1%),"-");
export %expiry_month_opc_2% =
  default(%expiry_month_inclusive%(%opc_date_2%),"-");

export %expiry_month_lc% =
               /* Handles the case where upcoming lc qual is "A3 or A4" */
    default(if crew.%has_ac_qual_override_a3a4%(%lc_qual%, %lc_date%) or %has_qual%("FF", %lc_date%) then
                %expiry_month_inclusive%(%lc_date%)
            else if crew.%has_ac_qual_override_a3a5%(%lc_qual%, %lc_date%) or %has_qual%("FF", %lc_date%) then
                %expiry_month_inclusive%(%lc_date%)
            else
                concat("(",%expiry_month_inclusive%(%lc_date%)," ", %lc_qual%, ")"), "-");
                         
export %expiry_month_lc_for_acqual%(String acqual) =
  default(%expiry_month_inclusive%(%lc_date_for_acqual%(acqual)), "-");
                         

export %rec_month_by_date%(Abstime date) =
  format_time(date-0:01, "%b");
  
/* Only used for SKN */
export %different_pc_opc_quals% =
  %pc_qual_1% = "37" and %opc_qual_1% = "38"
  or
  %pc_qual_1% = "38" and %opc_qual_1% = "37";
  
table unified_pc_opc_lookup2 = 
  crew.%is_double_qualified%, crew.%is_a2a3_qualified%,crew.%is_a3a5_qualified%,crew.%is_a2a5_qualified% -> 
                         export Abstime %pc_date_2%,
                         export Int %pc_month_2%,
                         export String %pc_qual_2%,
                         export String %pc_code_2%,
                         export Abstime %opc_date_2%,
                         export Int %opc_month_2%,
                         export String %opc_qual_2%,
                         export String %opc_code_2%;
  true, false ,false,false       -> %pc_a4_date%, calendar.%month_number%(%pc_a4_date% - 24:00),"A4", "PCA4",
                         %opc_a4_date%, calendar.%month_number%(%opc_a4_date% - 24:00),"A4", "OPCA4";
  -, true  ,false,false           -> %pc_a3_date%, calendar.%month_number%(%pc_a3_date% - 24:00),"A3", "PCA3",
                        %opc_a3_date%, calendar.%month_number%(%opc_a3_date% - 24:00),"A3", "OPCA3";
  false,false,true,false ->%pc_a3a5_date%, calendar.%month_number%(%pc_a3a5_date% - 24:00),"A3/A5", "PCA3A5",
                         %opc_a3a5_date%, calendar.%month_number%(%opc_a3a5_date% - 24:00),"A3/A5", "OPCA3A5";
						 
  -,false,false,true ->  %pc_a5_date%, calendar.%month_number%(%pc_a5_date% - 24:00),"A5", "PCA5",
                          %opc_a5_date%, calendar.%month_number%(%opc_a5_date% - 24:00),"A5", "OPCA5";
  -, -,-,-               -> void_abstime,void_int,void_string,void_string,void_abstime,void_int,void_string, void_string;
end  
export %pc_date_1_incl_perf%(Abstime date) =
    %recurrent_type_expiry_date_incl_performed%(%pc_code_1%, %any_ac_qual%, date, false);
export %pc_date_2_incl_perf%(Abstime date) =
    %recurrent_type_expiry_date_incl_performed%(%pc_code_2%, %any_ac_qual%, date, false);
export %opc_date_1_incl_perf%(Abstime date) =
    %recurrent_type_expiry_date_incl_performed%(%opc_code_1%, %any_ac_qual%, date, false);
export %opc_date_2_incl_perf%(Abstime date) =
    %recurrent_type_expiry_date_incl_performed%(%opc_code_2%, %any_ac_qual%, date, false);
    
/* PC/OPC expiry dates for reports */
export %pc_expiry_date% =
  nmin(default(%recurrent_type_expiry_date%("PC", %any_ac_qual%, %rec_period_end%), 31Dec2099),
       default(%recurrent_type_expiry_date%("PCA3", %any_ac_qual%, %rec_period_end%), 31Dec2099),
       default(%recurrent_type_expiry_date%("PCA5", %any_ac_qual%, %rec_period_end%), 31Dec2099),
       default(%recurrent_type_expiry_date%("PCA4", %any_ac_qual%, %rec_period_end%), 31Dec2099)) - 00:01;
  
export %opc_expiry_date% =
  nmin(default(%recurrent_type_expiry_date%("OPC", %any_ac_qual%, %rec_period_end%), 31Dec2099),
       default(%recurrent_type_expiry_date%("OPCA3", %any_ac_qual%, %rec_period_end%), 31Dec2099),
       default(%recurrent_type_expiry_date%("OPCA5", %any_ac_qual%, %rec_period_end%), 31Dec2099),
       default(%recurrent_type_expiry_date%("OPCA4", %any_ac_qual%, %rec_period_end%), 31Dec2099)) - 00:01;

export %pc_qual_expiry_date% =
  if leg.%qual% = "A3" then default(%recurrent_type_expiry_date%("PCA3", %any_ac_qual%, %rec_period_end%), 31Dec2099) - 00:01
  else if leg.%qual% = "A4" then default(%recurrent_type_expiry_date%("PCA4", %any_ac_qual%, %rec_period_end%), 31Dec2099) - 00:01
  else if leg.%qual% = "A5" then default(%recurrent_type_expiry_date%("PCA5", %any_ac_qual%, %rec_period_end%), 31Dec2099) - 00:01
  else default(%recurrent_type_expiry_date%("PC", %any_ac_qual%, %rec_period_end%), 31Dec2099) - 00:01;
    
export %opc_qual_expiry_date% =
  if leg.%qual% = "A3" then default(%recurrent_type_expiry_date%("OPCA3", %any_ac_qual%, %rec_period_end%), 31Dec2099) - 00:01
  else if leg.%qual% = "A4" then default(%recurrent_type_expiry_date%("OPCA4", %any_ac_qual%, %rec_period_end%), 31Dec2099) - 00:01
  else if leg.%qual% = "A5" then default(%recurrent_type_expiry_date%("OPCA5", %any_ac_qual%, %rec_period_end%), 31Dec2099) - 00:01
  else default(%recurrent_type_expiry_date%("OPC", %any_ac_qual%, %rec_period_end%), 31Dec2099) - 00:01;


/* PC/OPC is a valid lookup for all but A3/A4 qualified crew */
%pc_def_date% =
  %recurrent_type_expiry_date%("PC", %non_ski_qual_pc%, %now%);
  
%opc_def_date% =
  %recurrent_type_expiry_date%("OPC", %non_ski_qual_opc%, %now%);

%pc_date_for_ac_qual%(String ac_qual) =
  if ac_qual = "A3" then
    %recurrent_type_expiry_date%("PCA3", %any_ac_qual%, %now%)
  else if ac_qual = "A5" then
    %recurrent_type_expiry_date%("PCA5", %any_ac_qual%, %now%)
  else
    %recurrent_type_expiry_date%("PC", ac_qual, %now%);

%pc_opc_def_date% =
  nmin(%pc_def_date%, %opc_def_date%);

export %pc_a3_date% = 
  default(%recurrent_type_expiry_date%("PCA3A5", %any_ac_qual%, %now%), %recurrent_type_expiry_date%("PCA3", %any_ac_qual%, %now%));
export %opc_a3_date% = 
  default(%recurrent_type_expiry_date%("OPCA3A5", %any_ac_qual%, %now%), %recurrent_type_expiry_date%("OPCA3", %any_ac_qual%, %now%));
export %pc_opc_a3_date% = nmin(%pc_a3_date%, %opc_a3_date%);

export %pc_a5_date% = 
  if not void(%recurrent_type_expiry_date%("PCA3A5", %any_ac_qual%, %now%)) and not void(%recurrent_type_expiry_date%("PCA5", %any_ac_qual%, %now%)) then
    nmax(%recurrent_type_expiry_date%("PCA3A5", %any_ac_qual%, %now%), %recurrent_type_expiry_date%("PCA5", %any_ac_qual%, %now%))
  else
    default(%recurrent_type_expiry_date%("PCA3A5", %any_ac_qual%, %now%), %recurrent_type_expiry_date%("PCA5", %any_ac_qual%, %now%));
export %opc_a5_date% = 
  if not void(%recurrent_type_expiry_date%("OPCA3A5", %any_ac_qual%, %now%)) and not void(%recurrent_type_expiry_date%("OPCA5", %any_ac_qual%, %now%)) then
    nmax(%recurrent_type_expiry_date%("OPCA3A5", %any_ac_qual%, %now%), %recurrent_type_expiry_date%("OPCA5", %any_ac_qual%, %now%))
  else
    default(%recurrent_type_expiry_date%("OPCA3A5", %any_ac_qual%, %now%), %recurrent_type_expiry_date%("OPCA5", %any_ac_qual%, %now%));
export %pc_opc_a5_date% = nmin(%pc_a5_date%, %opc_a5_date%);

export %pc_a3a5_date% = 
  default(default(%recurrent_type_expiry_date%("PCA3A5", %any_ac_qual%, %now%), %recurrent_type_expiry_date%("PCA3A5", %any_ac_qual%, %pc_a3_date%)), %pc_a3_date%);
export %opc_a3a5_date% = 
  default(default(%recurrent_type_expiry_date%("OPCA3A5", %any_ac_qual%, %now%), %recurrent_type_expiry_date%("OPCA3A5", %any_ac_qual%, %opc_a3_date%)), %opc_a3_date%);

export %pc_a4_date% = 
  %recurrent_type_expiry_date%("PCA4", %any_ac_qual%, %now%);
export %opc_a4_date% = 
  %recurrent_type_expiry_date%("OPCA4", %any_ac_qual%, %now%);
export %pc_opc_a4_date% = nmin(%pc_a4_date%, %opc_a4_date%);

export %pc_opc_match_at_date%(Abstime date) =
  not crew.%is_a3a4_qualified_at_date%(date) or
  not crew.%is_a3a5_qualified_at_date%(date) or
  default(%_pc_dates_match%(date), false);

%_pc_dates_match%(Abstime date) =
  let pca3 = %recurrent_type_expiry_date%("PCA3", %any_ac_qual%, date),
      pca4 = %recurrent_type_expiry_date%("PCA4", %any_ac_qual%, date),
      pca5 = %recurrent_type_expiry_date%("PCA5", %any_ac_qual%, date);
 pca3 = add_months(pca4, 6) or
 pca4 = add_months(pca3, 6) or
 pca3 = add_months(pca5, 6) or
 pca5 = add_months(pca3, 6);

export %pc_opc_match_pp_start% =
  %pc_opc_match_at_date%(%pp_start%);
  
export %pc_opc_match_pp_end% =
  %pc_opc_match_at_date%(%select_pp_end%);
  
export %pc_opc_match_in_pp% =
  %pc_opc_match_pp_start% and %pc_opc_match_pp_end%;
  
export %pc_opc_match_trip_start% =
  %pc_opc_match_at_date%(trip.%start_day%);

%needs_ast% = 
  crew.%is_pilot% and
  not (crew.%is_a2a3_qualified% or crew.%is_a2a5_qualified%) and
  not %has_ast_in_ast_period% ;

%needs_ast_for_qual_group_38% =
  %needs_ast_for_qual_group%("38");

%needs_ast_for_qual_group_A2% =
  %needs_ast_for_qual_group%("A2");

%needs_ast_for_qual_group_A3A5% =
  %needs_ast_for_qual_group%("A3A5");

%needs_ast_for_qual_group%(String qual_group) = 
  crew.%is_pilot% and
  not (crew.%is_a2a3_qualified% or crew.%is_a2a5_qualified%) and
  (%ast_qual_group_of_crew% = qual_group) and
  not %has_ast_in_ast_period%;

%ast_qual_group_of_crew% =
  if %crew_has_ac_qln_in_ast_period%("38", "38") then
    "38"
  else if %crew_has_ac_qln_in_ast_period%("A2", "A2") then
    "A2"
  else if %crew_has_ac_qln_in_ast_period%("A3", "A3A5") or %crew_has_ac_qln_in_ast_period%("A5", "A3A5") then
    "A3A5"
  else
    "";

%crew_has_ac_qln_in_ast_period%(String qual, String qual_group) =
   crew.%has_ac_qln%(nmax(system_db_parameters.%ast_period_end%(%pp_end%, qual_group), %pp_end%), qual);

%qual_in_ast_qual_group_of_crew%(String qual) =
  (qual = %ast_qual_group_of_crew%) or
  (("A3A5" = %ast_qual_group_of_crew% ) and (qual = "A3" or qual = "A5"));

export %has_ast_in_ast_period% = 
    (%ast_date% >= %ast_period_begin_date% and 
     %ast_date% < %ast_period_end_date%);

export %ast_date% =    
    default(%planned_ast%, %last_ast_as_student%);

export %planned_ast% =
    last(leg(roster), leg.%start_utc%)
    where (leg.%is_ast% and
           %assigned_as_student_on_leg% and
           %qual_in_ast_qual_group_of_crew%(leg.%qual%));

export %activity_allowed% =
  leg.%activity_allowed% and
  (if leg.%is_ast% and not %simulator_instructor% then
    %qual_in_ast_qual_group_of_crew%(leg.%qual%)
   else
     true);

export %simulator_instructor% = crew_pos.%assigned_function% = "TR" and %inst_on_simulator%;

export %inst_on_simulator% =
  leg.%is_sim_instr_supervis%
  or leg.%is_sim_supervis%
  or leg.%is_sim_instr%;

%is_conv_typerating_skill_test%(Int idx) =
    %pc_course_name%(idx) = "CONV TYPERATING";

%pc_date%(Int idx) =
    model_training.%training_log_time%(crew.%id%, %ast_period_begin_date%, %ast_period_end_date%, "PC SKILL TEST", idx);

%pc_course_name%(Int idx) =
    training.%course_name%(%pc_date%(idx));


export %too_many_ast_in_ast_period% =
  let num_planned_asts = %num_planned_asts%;
  if not (crew.%is_a2a3_qualified% or crew.%is_a2a5_qualified%) then
    if num_planned_asts > 1 then
      true
    else if num_planned_asts + %num_performed_asts% > 1 then
      true
    else
      false
  else
    num_planned_asts + %num_performed_asts% > 0;

/*
* SKCMS-3218
* A3A5 Crew --> 1 K5 or K6
* A3 Crew --> 1 K6
* A5 Crew --> 1 K5
*/
%num_planned_asts% = 
  if crew.%is_a3a5_qualified% then
    count(trip(roster)) where (trip.%is_ast% and 
    (trip.%code% = "K5" or trip.%code%= "K6") and 
    %assigned_as_student_on_any_ast_duty_in_trip%)
  else if crew.%has_acqln_in_pp%("A3") then
    count(trip(roster)) where (trip.%is_ast% and 
    trip.%code%= "K6" and 
    %assigned_as_student_on_any_ast_duty_in_trip%)
  else if crew.%has_acqln_in_pp%("A5") then
    count(trip(roster)) where (trip.%is_ast% and 
    trip.%code%= "K5" and 
    %assigned_as_student_on_any_ast_duty_in_trip%)
  else 
    count(trip(roster)) where (trip.%is_ast% and
    %assigned_as_student_on_any_ast_duty_in_trip%);
  

export %assigned_as_student_on_any_ast_duty_in_trip% =
  any(duty(trip), %assigned_as_student_on_any_ast_leg_in_duty%);

export %assigned_as_student_on_any_ast_leg_in_duty% =
  any   (leg(duty), %assigned_as_student_on_leg%)
  where (leg.%is_ast%);

export %assigned_as_student_on_leg% = not (crew_pos.%assigned_pos% = 10 or
                                           %assigned_as_assist%);

%num_performed_asts% =
   let last_ast_as_student = default(%last_ast_as_student%, 1JAN1986);
   if (last_ast_as_student >= %ast_period_begin_date%) and (last_ast_as_student < %ast_period_end_date%) then
     1
   else
     0;

export %last_ast% = 
    %last_perf_date_for_act_of_type%("AST", trip.%start_UTC%);

export %last_ast_as_student% =
    %last_perf_date_for_act_of_type_as_student%("AST", trip.%start_UTC%);

export %any_new_actype_restr_planned_in_year% =
    let start_date = round_down_year(%pp_start%), 
        end_date = round_up_year(%pp_start% + 0:01); 

    crew.%has_restr_subtype_in_ival%("NEW", "ACTYPE", start_date, end_date);

/*
* SKCMS-3218
* Only crew belonging to SKI_FD_AG shall be affected by  ast_period_start/end_a3a5
*/
export %ast_period_begin_date% = 
  if %ast_qual_group_of_crew% = "A3A5" and not crew.%has_agmt_group_ski_fd% then 
    31dec2035
  else 
    system_db_parameters.%ast_period_start%(trip.%start_hb%, %ast_qual_group_of_crew%);  

export %ast_period_end_date% =
  if %ast_qual_group_of_crew% = "A3A5" and not crew.%has_agmt_group_ski_fd% then 
    1jan1986
  else 
    system_db_parameters.%ast_period_end%(trip.%start_hb%, %ast_qual_group_of_crew%); 

/* Countings */
%pgt_occurence% = 
  default(
          first(trip(roster), trip.%start_utc%)
          where (trip.%start_day% >= %pp_start% and trip.%is_pgt%),
          add_years(%pp_end%,10));

%sim_occurence% = 
  default(
          first(trip(roster), trip.%start_utc%)
          where (trip.%start_day% >= %pp_start% and trip.%is_simulator%),
          add_years(%pp_end%,10));

/****************************************************************
 * Section 7: Redefinitions of codes to display
 ***************************************************************/

export %leg_code_redefined% =
  if %flight_crew% and %is_roster% then
    if leg.%is_sim_instr% and %crew_on_skill_test% then
      concat("Z", substr(leg.%code%, 2, length(leg.%code%)))
    else if %leg_is_pc% then
      concat(%_pc_letter%, substr(leg.%code%, 2, length(leg.%code%)))
    else if leg.%is_pgt% then
      %pgt_code_full%
    else if %is_new_wt_code_leg% then
      %wt_code_full%
    else
      void_string
  else if %cabin_crew% and %is_roster% then
    if leg.%is_cc_rec_web% then
        %rec_code_full%
    else
        void_string
  else
    void_string;

%duty_code_redefined% =
    default(first(leg(duty),%leg_code_redefined%)
            , "");
    
%_pc_letter% =
    if leg.%is_skill_test% then "Z"
    else "Y";


export %leg_ac_family% =
  if task.%is_simulator%(task.%code%) then
    model_training.%sim_ac_family%(task.%code%)
  else if task.%is_ol123%(task.%code%) then
    model_training.%ol123_ac_family%(task.%code%)
  else
    leg.%ac_family%;
    
 /****************************************************************
 * Section 8: Logic for automatic PC/OPC assignment
 ***************************************************************/
/*
 * PC/OPC fundamentals
 *   TYPE 1: 2x2 hours
 *     - Composition 1/1/0
 *     - FR flies in FP position (solved in module crew_pos_ccr)
 *     - FC lower on simulator must perform OPC
 *     - FC may only be assigned lower once every year
 *     - For B737/MD80/A320 only INSTRUCTOR, LCP or CP may fly as lower
 *   TYPE 2: 4 hours
 *     - Composition 1/1/0, but FP not allowed, a FC must be lower and seated in FP position
 *     - FC lower on simulator must perform OPC
 *     - FC may only be assigned lower once every year
 *   TYPE 3: 6 hours
 *     - Composition 2/0/0
 *     - Lower assignments not allowed
 *   TYPE 4: 2:30x2:30 hours
 *     - Composition 2/0/0
 *     - Lower assignments not allowed
 *
 *  Variable crew_pos.%simulator_is_for_two_fc% copies some of this tables
 *  functionality. If you change here, make sure that variable is still valid.
 */
%pc_opc_intended_for_two_fc% = leg.%pc_opc_intended_for_two_fc%;
%min_reqd_crew_on_opc% = leg.%min_reqd_crew_on_opc%;

%leg_has_max_pc_req% =
  default(%min_reqd_crew_on_opc% > 0, false);

export %trip_has_max_pc_req% =
  any(leg(trip), %leg_has_max_pc_req%)
  where (leg.%is_pc_or_opc%);

export %trip_is_2x2h_opc% =
  first(leg(trip), leg.%is_2x2h_opc%) 
  where (leg.%is_pc_or_opc%);
  
export %pc_opc_trip_intended_for_two_fc% =
    first(leg(trip), %pc_opc_intended_for_two_fc%)
    where (leg.%is_pc_or_opc%);
    
export %reqd_crew_on_sim% =
  default(first(leg(trip), %reqd_crew_on_sim_leg%)
          where (leg.%is_simulator%),0);

/* Simulators have a need in pos 1,2,3,4, or 9. This variable is to calculate
   the required number of trainees, so instructors are excluded. */
export %reqd_crew_on_sim_leg% =
  default(crew_pos.%sim_need_in_pos%(1) + crew_pos.%sim_need_in_pos%(2) + 
          crew_pos.%sim_need_in_pos%(3) + crew_pos.%sim_need_in_pos%(9), 0);

export %nr_simulators_in_trip% = count(leg(trip)) where (leg.%is_pc_or_opc% or leg.%is_ast% or leg.%is_asf%);
export %length_sim1% = first(leg(trip), leg.%time%) where (leg.%is_pc_or_opc% or leg.%is_ast% or leg.%is_asf%);
export %length_sim2% = last(leg(trip), leg.%time%) where (leg.%is_pc_or_opc% or leg.%is_ast% or leg.%is_asf%);

export %last_logged_opc_perfomed_lower% =
  %last_logged_date_for_type_and_attr%("OPC", "LOWER", trip.%start_utc%) >
  %last_logged_date_for_type_and_attr%("OPC", "", trip.%start_utc%);

/*
 * Assists
 * To be available for assist crew must have performed the seasons recurrent 
 * training. In reality this means that as soon as the last assigned sim is
 * after recurrent season start, crew is available for assist.
 * FR shouldn't be assists
 * For A3/A4 crew qualification doesn't matter.
 * Simulators are only logged as PC/OPC, so it's a limitation if recurrent
 * season starts ever become different for A3/A4 specific documents */
export %may_be_assist%(Abstime date) = %may_be_assist_for_ac_qual%(date, %any_ac_qual%);
%may_be_assist_for_ac_qual%(Abstime date, String ac_qual) =
    crew.%rank_at_date%(date) <> "FR" and
    not crew.%has_restr_training_dct%(date) and
    %_may_be_assist%(date, ac_qual);
    
%pc_opc_expiry_month_this_season%(Abstime date) =
  let month1 = %pc_month_1%,
      month2 = if crew.%is_a3a4_qualified_at_date%(date) or crew.%is_a3a5_qualified_at_date%(date) then
                  %pc_month_2%
               else
                  %opc_month_1%,
      season = if calendar.%month_number%(date) < 7 then 1 else 2;
  if season = 1 and month1 < 7 or season = 2 and month1 >= 7 then month1
  else month2;
  
%_may_be_assist%(Abstime date, String ac_qual) =
  let last_date = nmax(%last_perf_date_for_act_of_type_for_ac_qual%("PC", ac_qual, date),
                       %last_perf_date_for_act_of_type_for_ac_qual%("OPC", ac_qual, date)),
      season_start = %recurrent_season_start%("PC", date),
      exp_month = %pc_opc_expiry_month_this_season%(date),
      earliest_assignment = add_months(round_down_year(date), exp_month - 3);
  last_date >= season_start
  and
  last_date >= earliest_assignment;
  

export %may_be_assist_pp_start% = %may_be_assist%(%pp_start%);
export %may_be_assist_pp_end% = %may_be_assist%(%pp_end%);

export %may_be_assist_trip_start% = %may_be_assist%(trip.%start_day%);
export %may_be_assist_duty_start% = %may_be_assist%(duty.%start_day%);
%may_be_assist_duty_start_for_ac_qual%(String ac_qual) = %may_be_assist_for_ac_qual%(duty.%start_day%, ac_qual);
/* A constraint defined in module roster_constraints controls
 * that the assist is assigned in correct position. 
   2008-10-29 JC the constraint is outcommented 091107 by sasha!?*/
export %assigned_as_assist% = %assigned_as_assist_for_ac_qual%(leg.%sim_leg_qual%);
%assigned_as_assist_for_ac_qual%(String ac_qual) =
  %sim_assigned_to_student% and
  (%leg_is_forced_sim_assist% or
  default(%allow_assists_on_pc_opc_p% and
          leg.%is_pc_or_opc% and
          not (leg.%is_pc_change_month% or
               leg.%is_forced_pc% or
               leg.%is_forced_opc% or
               leg.%is_skill_test% or
               leg.%is_performed_pc% or
               leg.%is_sim_instr% or
               leg.%is_sim_instr_supervis% or
               leg.%is_sim_instr_ol% or
               leg.%is_sim_instr_supol% or
               leg.%is_sim_supernum%) and
	       %may_be_assist_duty_start_for_ac_qual%(ac_qual),
          false));
  
export %allow_assists_on_pc_opc_p% = 
  parameter true 
  remark "SIM: Allow using Assists on PC/OPC's";
  
%leg_is_forced_sim_assist% =
    leg.%is_forced_sim_assist% or 
    not leg.%has_training_code% and leg.%is_pc_or_opc% and
    (%skn_wrong_qual_sim_assist% or
    %ski_wrong_qual_sim_assist%);
    
/* For SKN and SKI double qual we want simulators with "wrong" qual for the
   season to be assists */
%skn_wrong_qual_sim_assist% =
    if crew.%is_skn_double_qualified_at_date%(leg.%start_date%) and
       parameters.%sim_pass_classic_req%(leg.%start_date%) then
        /* The sim is in the PC season, we check that qual is different */
        if %pc_month_1%/7 = calendar.%month_number%(leg.%start_date%)/7 then
            %skn_sim_assist_not_equal_quals%(leg.%qual%, %pc_qual_1%)
        else
            %skn_sim_assist_equal_quals%(leg.%qual%, %pc_qual_1%)
    else
        false;

%skn_sim_assist_equal_quals%(String qual1, String qual2) =
    qual1 = qual2 or 
    (qual1 = "36" and qual2 = "38") or
    (qual1 = "38" and qual2 = "36");

%skn_sim_assist_not_equal_quals%(String qual1, String qual2) =
    if (qual1 = "36" and qual2 = "38") or (qual1 = "38" and qual2 = "36")
    then false 
    else qual1 <> qual2;

%ski_wrong_qual_sim_assist% =
    if crew.%is_double_qualified_ski_trip_start% then
        /* The sim is in the PCA3 season, we check that qual is A4 */
        if %pc_month_1%/7 = calendar.%month_number%(leg.%start_date%)/7 then
            leg.%qual% = "A5"
        else
            leg.%qual% = "A3"
    else
        false;

export %change_recurrent_date% = 
  trip.%has_recurrent% and any(leg(trip), leg.%is_pc_change_month% or leg.%is_skill_test%);
  
/* Legality should disregard certain activities that would otherwise, because 
   of their type, trigger recurrent period legality */
export %leg_is_invalid_for_rec_period_legality% =
  not (leg.%is_recurrent% or leg.%is_cc_rec% or leg.%is_lc%) or 
      %leg_creates_rec% or
      %leg_is_valid_pgt_refresher% or
      leg.%is_pc_change_month% or 
      leg.%is_forced_pc% or 
      leg.%is_forced_opc% or
      leg.%is_skill_test% or
      leg.%is_sim_instr% or
      leg.%is_sim_instr_supervis% or
      leg.%is_sim_instr_ol% or
      leg.%is_sim_instr_supol% or
      leg.%is_sim_supernum% or
      %assigned_as_assist% or
      /* PC is calculated dynamically or tagged, so should be ok */
      %leg_is_pc% or
      leg.%is_ilc% or
      leg.%is_lc% and %crew_has_program_on_leg%;
  
export %trip_is_sim_assist% =
    any(leg(trip), %assigned_as_assist%);
    
export %duty_is_sim_assist% =
    any(leg(duty), %assigned_as_assist%);
export %duty_is_forced_sim_assist% =
    any(leg(duty), %leg_is_forced_sim_assist%);
export %duty_is_sim_assist_landings% =
    any(leg(duty), leg.%is_sim_assist_landings%);

export %duty_is_own_sim% =
    duty.%is_simulator% and 
    not (%duty_is_forced_sim_assist% or %duty_is_sim_assist_landings% or
         first(leg(duty), crew_pos.%assigned_pos% = 10 or crew_pos.%assigned_pos% = 4)
         where (leg.%is_simulator%));  
export %leg_is_own_sim% =
    leg.%is_simulator% and 
    not (%leg_is_forced_sim_assist% or leg.%is_sim_assist_landings% or
         crew_pos.%assigned_pos% = 10 or 
         crew_pos.%assigned_pos% = 4);

%sim_assigned_to_instr% =
    leg.%is_simulator% and 
    (crew_pos.%assigned_pos% = 10 or crew_pos.%assigned_pos% = 4);
    
export %sim_assigned_to_student% =
    leg.%is_simulator% and not %sim_assigned_to_instr%;
    
export %sim_trip_assigned_to_student% =
  %is_roster% and
  any(leg(trip), %sim_assigned_to_student%)
  where (leg.%is_simulator%);

export %sim_duty_assigned_to_student% =
  %is_roster% and
  any(leg(duty), %sim_assigned_to_student%)
  where (leg.%is_simulator%);

/* This will be mostly correct. For matador that is enough. We will redefine it
   in child module */
export %crew_on_skill_test% = %_crew_on_skill_test%;
    
%_crew_on_skill_test% = 
    leg.%has_training_attr_any_crew%("SKILL TEST");

/* This is for absence and recency legality. Crew with T-flight should be
   correctly planned before opt. If not, we still don't want Matador to deassign
   production */
export %leg_has_tri_tre% = true;

/*
** Variables for school period
*/

export %month_is_in_school_period_min_7x24% =
  let month_start = wop.%start_month_start%;
  any(wop(roster),training.%wop_is_in_school_period_min_7x24%)
    from (current) backwards
    while (wop.%end_hb% > month_start);

export %wop_is_in_school_period_min_7x24% = 
  first(leg(wop),%leg_is_in_school_period_min_7x24% and not leg.%is_sim_instr%) and
  all(leg(wop), %leg_is_valid_school_activity%);

export %trip_is_in_school_period_min_7x24% = 
  first(leg(trip),%leg_is_in_school_period_min_7x24%) and
  %trip_is_valid_school_activity%;  
  
export %duty_is_in_school_period_min_7x24% = 
  first(leg(duty),%leg_is_in_school_period_min_7x24%) and
  all(leg(duty), %leg_is_valid_school_activity%);

export %leg_is_in_school_period_min_7x24% =
  default(%school_period_days% >= 7, false);

%school_period_days% = 
  (%end_of_school_activities% - %start_of_school_activities%) / 24:00;
  
%start_of_school_activities% = 
  let lim = leg.%start_date% - 7*24:00;
  min(leg(roster), leg.%start_date%)
  from (current)backwards while (leg.%start_date% >= lim) 
  where (%leg_is_valid_school_activity%);
  
%end_of_school_activities% = 
  let lim = leg.%start_date% + 7*24:00;
  max(leg(roster), leg.%end_date% + 24:00)
  from (current) forwards while (leg.%start_date% < lim) 
  where (%leg_is_valid_school_activity%);
  
export %trip_is_valid_school_activity% =
  all(leg(trip),%leg_is_valid_school_activity%);
  
 /* school activities not generating overtime */
export %duty_is_valid_school_activity% =
  all(leg(duty), %leg_is_valid_school_activity%);
  
export %leg_is_valid_school_activity% =
  crew.%has_restr_training_leg_start% and
  default(leg.%is_simulator% or
  leg.%is_pgt% or
  leg.%is_emg_pgt% or
  leg.%is_school_flight% or
  leg.%is_deadhead% or
  (leg.%code% in valid_school_period_codes) or
  (leg.%group_code% in valid_school_period_group_codes), false);
  
set valid_school_period_codes = "CS","CS8","FT1","TH1","SI1","F20", "BL20", "B";
set valid_school_period_group_codes = "SIB";


/*
  Long course period days
*/


export %leg_is_valid_long_course_activity% =
  crew.%has_restr_training_leg_start% and
  default(leg.%is_simulator% or
  leg.%is_pgt% or
  leg.%is_school_flight% or
  %is_deadhead_non_production% or
  (leg.%code% in valid_long_course_period_codes) or 
  (substr(leg.%code%,1,2) = "EX" and length(leg.%code%) > 2) or
  (leg.%group_code% in valid_long_course_period_group_codes), false);

%is_deadhead_non_production% =
  if trip.%has_only_flight_duty% then
    leg.%is_deadhead% and (not is_first(duty(trip)) or trip.%num_duties% = 1)
  else
    leg.%is_deadhead%;
  
set valid_long_course_period_codes = 
  "CS","CS8","FT1","TH1","SI1","F20", "FS", "BL20", "B", "BTLB", "CR4", 
  "CR5", "CR6", "E20", "E30", "E40", "E70", "E80", "BL7";
  
set valid_long_course_period_group_codes = "SIB";

%_long_course_period_min_days% = 7;

export %duty_is_in_long_course_period% =
  all(leg(duty), %leg_is_in_long_course_period%);

export %long_course_period_days_in_period_pt%(Abstime start_date, Abstime end_date) =
  let days = (round_up(end_date, 24:00) - round_down(start_date, 24:00)) / 24:00; 
    sum(times(days), %long_course_period_in_day_pt%(%_next_day%(start_date)));   

%_next_day%(Abstime start_date) = start_date + (%times_index_0% - 1) * 24:00;                                        
                                       
%long_course_period_in_day_pt%(Abstime date) =
  if any(leg(roster), %leg_is_in_long_course_period%) 
  where (leg.%start_date% <= date and leg.%end_date% >= date) then
    crew.%part_time_factor_at_date%(date) * 10
  else
    0;

%leg_is_in_long_course_period% =
  default(%long_course_period_days% >= %_long_course_period_min_days%, false);

%long_course_period_days% = 
  (%end_of_long_course_period% - %start_of_long_course_period% + 24:00) / 24:00;

%start_of_long_course_period% = 
  min(leg(roster), leg.%start_date%)
  from (current) backwards while (%leg_is_valid_long_course_activity%); 
  
%end_of_long_course_period% = 
  max(leg(roster), leg.%end_date%)
  from (current) forwards while (%leg_is_valid_long_course_activity%); 


/*
 * Code to handle special training companions (intructors/students 
 * in different areas).
 *
 */

export %leg_non_loaded_special_instructor_id% =
  max(times(%_nrb_of_special_instructors%), 
              %leg_special_instructor%(times_index(0)))
  where (not crew.%is_loaded_by_id%(%leg_special_instructor%(times_index(0))));

export %leg_non_loaded_special_student_id% =
  max(times(%_nrb_of_special_students%), 
              %leg_special_student%(times_index(0)))
  where (not crew.%is_loaded_by_id%(%leg_special_student%(times_index(0))));

%leg_special_instructor%(int i) = 
  substr(%leg_special_instructors%, (i - 1) * 6 + 1, 5);

%leg_special_student%(int i) =
  substr(%leg_special_students%, (i - 1) * 6 + 1, 5);

%_nrb_of_special_instructors% = (length(%leg_special_instructors%) + 1) / 6;
%_nrb_of_special_students% = (length(%leg_special_students%) + 1) / 6; 

 %leg_special_instructors% =
  default(substr(%leg_special_companions%, 
                 1, 
                 locate(":", %leg_special_companions%) - 1),
           void_string);

%leg_special_students% = 
  default(substr(%leg_special_companions%, 
                 locate(":", %leg_special_companions%) + 1,
                 length(%leg_special_companions%)),
           void_string);

%leg_special_companions% =
  if leg.%is_active_flight% then
    attributes.%flight_leg_str%("SPEC COMP")
  else if leg.%is_ground_duty% then
    attributes.%ground_task_str%("SPEC COMP")
  else
    void_string;
    
    
/****************************************************************
 * Section 9: FC course contents
 ***************************************************************/

/* Table lookups for tables course_content and course_content_exc */

%course_content_table% = parameter "course_content";

%lifus_airport_table% = %etab_path%(%lifus_airport_table_p%);
%lifus_airport_table_p% =
  parameter "lifus_airport"
  remark "ETAB: Airports that should be visited during commander training";


table course_content_tab(String course, String subtype, String ac, String rank, String activity) =
    /* general table lookup */
    course, subtype, ac, rank, activity->
    Int %_course_activity_order%,
    Int %_course_quantity%,
    Reltime %_course_min_hrs%,
    Bool %_entry_exists%;
  external %course_content_table%;
  course, course_subtype, ac_qual, rank, activity ->
    activity_order, quantity, min_hrs, row_number;
  -,      -,              -,       -,    -        ->
    void_int, void_int, void_reltime, false;
end
    
export %order_in_course%(String course, String subtype, String ac, String rank, String activity) =
    %_course_activity_order%(course, subtype, ac, rank, activity);

export %activity_exists_in_course%(String course, String subtype, String ac, String rank, String activity) = 
    %_entry_exists%(course, subtype, ac, rank, activity);


table count_course_content_tab(String course, String subtype) =
    /* counts activities belonging to course */
    course, subtype -> export int %rows_in_course%;
    external %course_content_table%;
    course, course_subtype -> count(row_number);
end

table course_content_by_match_tab(String course, String subtype, Int match) =
    /* contents by match number */
    course, subtype, match->
    String %_course_ac_type_by_match%,
    String %_course_rank_by_match%,
    String %_course_activity_by_match%,
    Reltime %_course_min_hrs_by_match%,
    Int %_course_quantity_by_match%,
    Int %_course_activity_order_by_match%;
  external %course_content_table%;
  course, course_subtype, match_number ->
    ac_qual, rank, activity, min_hrs, quantity, activity_order;
end

export %activity_in_course_by_match%(String course, String subtype, Int row) =
    %_course_activity_by_match%(course, subtype, row);

export %nr_in_course_by_match%(String course, String subtype, Int row) = 
    default(%_course_quantity_by_match%(course, subtype, row), 1);
    
export %order_in_course_by_match%(String course, String subtype, Int row) =
    %_course_activity_order_by_match%(course, subtype, row);

export %rank_in_course_by_match%(String course, String subtype, Int row) =
    %_course_rank_by_match%(course, subtype, row);
    
export %ac_type_in_course_by_match%(String course, String subtype, Int row) =
    %_course_ac_type_by_match%(course, subtype, row);


%course_content_exc_table% = parameter "course_content_exc";

table course_content_exc_tab(String crew, String course, String subtype, String ac, String activity) = 
    /* General table lookup */
    crew, course, subtype, ac, activity->
    Int %_exc_activity_order%,
    Int %_exc_quantity%,
    Reltime %_exc_min_hrs%,
    Bool %_exc_exists%;
  external %course_content_exc_table%;
  crew, course, course_subtype, ac_qual, activity ->
    activity_order, quantity, min_hrs, row_number;
  -,      -,    -,              -,       -        ->
    void_int, void_int, void_reltime, false;
end

export %order_in_course_exc%(String course, String subtype, String ac, String activity) =
    %_exc_activity_order%(crew.%id%, course, subtype, ac, activity);

export %content_exception%(String course, String subtype, String ac, String activity) = 
    %_exc_exists%(crew.%id%, course, subtype, ac, activity);

export %activity_ordered_in_course_check_exc%(String type, String subtype, String ac, String rank, String activity) =
    default(%order_in_course_check_exc%(type, subtype, ac, rank, activity) > 0, false);

export %order_in_course_check_exc%(String course, String subtype, String ac, String rank, String activity) =
    default(%order_in_course_exc%(course, subtype, ac, activity),
            default(%order_in_course%(course, subtype, ac, rank, activity),
                    %order_in_course%(course, subtype, ac, "ALL", activity)));

table count_course_content_exc_tab(String course, String subtype) =
    /* counts activities in course exceptions */
    crew.%id%, course, subtype -> export int %crew_rows_in_course_content_exc%;
    external %course_content_exc_table%;
    crew, course, course_subtype -> count(row_number);
end

export %crew_has_exceptions%(String course, String subtype) = 
    %crew_rows_in_course_content_exc%(course, subtype)>0;

table course_content_exc_by_match_tab(String course, String subtype, Int match) =
    /* exception by match number */
    crew.%id%, course, subtype, match->
    String %_exc_ac_type_by_match%,
    String %_exc_activity_by_match%,
    Reltime %_exc_min_hrs_by_match%,
    Int %_exc_quantity_by_match%,
    Int %_exc_activity_order_by_match%;
  external %course_content_exc_table%;
  crew, course, course_subtype, match_number ->
    ac_qual, activity, min_hrs, quantity, activity_order;
end

export %activity_in_course_exc_by_match%(String course, String subtype, Int match) =
    %_exc_activity_by_match%(course, subtype, match);

export %order_in_course_exc_by_match%(String course, String subtype, Int match) =
    %_exc_activity_order_by_match%(course, subtype, match);

export %nr_in_course_exc_by_match%(String course, String subtype, Int match) = 
    %_exc_quantity_by_match%(course, subtype, match);


/* Number of course activities in plan or log */

export %nr_acts_of_code%(String activity, Abstime date) = 
    training.%nr_acts_of_code_in_ival%(activity, %course_start%(date), date);

export %nr_acts_of_code_in_ival%(String code, Abstime istart, Abstime iend) =
    %nr_acts_of_code_in_ival_plan%(code, nmax(istart, fundamental.%plan_start%),iend) +
    %nr_acts_of_code_in_ival_table%(code,istart, nmin(iend, fundamental.%plan_start%));

export %nr_acts_of_code_in_ival_plan%(String code, Abstime istart, Abstime iend) =
  count(leg(roster))
  where (leg.%start_utc% >= istart and leg.%start_utc% <= iend and 
         (code = leg.%code% or code = %duty_code_redefined%));

%nr_acts_of_code_in_ival_table%(String code, Abstime istart, Abstime iend) =
  /* Check the table crew_training_log for performed activities */
  count(times(%ctl_rows%))
  where (code = %ctl_code_ival%(istart, iend, %times_index_0%));

export %missing_activitiy_in_course_content_voidy%(String course, String subtype, String ac, String rank, Int row, Abstime date) =
    let rowrank = %rank_in_course_by_match%(course, subtype, row),
        rowac = %ac_type_in_course_by_match%(course, subtype, row),
        crs_activity = %activity_in_course_by_match%(course, subtype, row);
    if %matching_rank%(rowrank, rank) and
        %matching_quals%(rowac, ac) and
        %nr_in_course_by_match%(course, subtype, row) > %nr_acts_of_code%(crs_activity, date)
    then
        concat(crs_activity,
                format_int(%nr_in_course_by_match%(course, subtype, row) - %nr_acts_of_code%(crs_activity, date), "-%d"))
    else void_string;


%matching_rank%(String rank0, String rank1) =
    rank0 = rank1 or
    rank0 = "ALL" or
    rank1 = "ALL";

/* Mathing ac_qualifications.
** - 36 and 38 are equal.
** - A3 and A4 are equal.
** - 3738 match 36, 37 and 38.
** - ALL match everything
*/
export %matching_quals%(String ac0, String ac1) =
    ac0 = ac1 or
    ac0 = "ALL" or
    ac1 = "ALL" or
    ac0 = "37" and
    (ac1 = "37" or ac1 = "3738") or
    ac0 = "3738" and
    (ac1 in SET3638 or ac1 = "37" or ac1 = "3738") or
    ac0 in SET3638 and
    (ac1 in SET3638 or ac1 = "3738");

export set SET3638 = "36","38";


export %missing_activitiy_in_course_exc_voidy%(String course, String subtype, String ac, /*String rank,*/ Int row, Abstime date) =
    let rowac = %_exc_ac_type_by_match%(course, subtype, row),
    crs_activity = %activity_in_course_exc_by_match%(course, subtype, row);
    if %matching_quals%(rowac, ac) and
        %nr_in_course_exc_by_match%(course, subtype, row) > %nr_acts_of_code%(crs_activity, date)
    then
        concat(crs_activity,
                format_int(%nr_in_course_exc_by_match%(course, subtype, row) - %nr_acts_of_code%(crs_activity, date), "-%d"))
    else void_string;


table ac_course_content_tab(String course, String subtype, String acqual, String crewrank) =
    course, subtype, leg.%code%, acqual, crewrank -> String %_acqual_in_course_content%;
    external %course_content_table%;
    course, course_subtype, activity, ac_qual, rank -> ac_qual;
    -,      -,              -,        -,       -    -> void_string;
end

export %acqual_from_course%(String course, String subtype, String acqual) =
    default(%acqual_in_course_content%(course, subtype, acqual, crew.%rank%),
            %acqual_in_course_content%(course, subtype, acqual, "ALL"));

%acqual_in_course_content%(String course, String subtype, String acqual, String rank) =
    default(if acqual in SET3638 then
                %3638_acqual_in_course_content%(course, subtype, rank)
            else if acqual = "37" then
                %37_acqual_in_course_content%(course, subtype, rank)
            else if acqual = "3738" then
                default(%3638_acqual_in_course_content%(course, subtype, rank),
                        %_acqual_in_course_content%(course, subtype, "37", rank))
            else
                %_acqual_in_course_content%(course, subtype, acqual, rank),
            
            %_acqual_in_course_content%(course, subtype, "ALL", rank));

%3638_acqual_in_course_content%(String course, String subtype, String rank) =
    default(%_acqual_in_course_content%(course, subtype, "36", rank),
            default(%_acqual_in_course_content%(course, subtype, "38", rank),
                    %_acqual_in_course_content%(course, subtype, "3738", rank)));

%37_acqual_in_course_content%(String course, String subtype, String rank) =
    default(%_acqual_in_course_content%(course, subtype, "37", rank),
            %_acqual_in_course_content%(course, subtype, "3738", rank));

%A3A4_acqual_in_course_content%(String course, String subtype, String rank) =
    default(%_acqual_in_course_content%(course, subtype, "A3", rank),
            %_acqual_in_course_content%(course, subtype, "A4", rank));

%A3A5_acqual_in_course_content%(String course, String subtype, String rank) =
    default(%_acqual_in_course_content%(course, subtype, "A3", rank),
            %_acqual_in_course_content%(course, subtype, "A5", rank));


/* Finding previous course activity to check order */
export %prev_course_activity%(String type, String subtype, String ac, String rank) = 
    default(%prev_course_activity_in_plan%(type, subtype, ac, rank), 
            %prev_course_activity_in_log%(type, subtype, ac, rank));

%prev_course_activity_in_plan%(String type, String subtype, String ac, String rank) = 
    prev(leg(chain), leg.%code%) where(%activity_ordered_in_course_check_exc%(type, subtype, ac, rank, leg.%code%));

%prev_course_activity_in_log%(String type, String subtype, String ac, String rank) = 
    %last_ordered_activity_in_log%(type, subtype, ac, rank, leg.%start_utc%);

%last_ordered_activity_in_log%(String type, String subtype, String ac, String rank, Abstime date) =
    /* Last activity within course period before given date */
    let start_date = %course_start%(date);
    %ctl_code_at_time%(max(times(%ctl_rows%), 
                           %ctl_time_ival%(start_date, date - 0:01, %times_index_0%))
                       where (%activity_ordered_in_course_check_exc%(type, subtype, ac, rank, %ctl_code_ival%(start_date, date - 0:01, %times_index_0%))));

/* Crew needs to visit airports on lifus flights during commander training*/
export %commander_trng_flown_to_all_apt% = void(%crew_has_not_flown_to_apt%);

export %crew_has_not_flown_to_apt% =
    let ac_qual = crew.%ac_qln_string_leg_start%;
    default(%_crew_has_not_flown_to_apt%("ALL"),
            if ac_qual in SET3638 then
                default(%_crew_has_not_flown_to_apt%("36"),
                default(%_crew_has_not_flown_to_apt%("38"),
                        %_crew_has_not_flown_to_apt%("3738")))
            else if ac_qual = "3738" then
                default(%_crew_has_not_flown_to_apt%("36"),
                default(%_crew_has_not_flown_to_apt%("38"),
                default(%_crew_has_not_flown_to_apt%("37"),
                        %_crew_has_not_flown_to_apt%("3738"))))
            else if ac_qual = "37" then
                default(%_crew_has_not_flown_to_apt%("37"),
                        %_crew_has_not_flown_to_apt%("3738"))
            else
                %_crew_has_not_flown_to_apt%(ac_qual));

%_crew_has_not_flown_to_apt%(String ac_qual) =
    /* This function would be better named: ac_qual_if_not_qual_for_crew.  returns void if ac_qual _is_ found.
       Return value is void, or one or more airports as string, i.e. "URY & URZ". */
   let res =
        cat(times(1000), %need_commander_airport%(ac_qual,%times_index_0%), " & ")
        where(void(%need_commander_airport%(ac_qual,%times_index_0%)) or
              not %crew_has_flown_to_apt_ix%(ac_qual, %times_index_0%));
   if res = "" then void_string else res;

%crew_has_flown_to_apt_ix%(String ac_qual, Int ix) =
    %crew_has_flown_to_apt%(%need_commander_airport_wrap%(ac_qual, ix));

%crew_has_flown_to_apt%(String apt) =
    any(leg(roster),
        leg.%is_any_lifus% and
        leg.%end_station% = apt and
        leg.%is_active_flight%);

%need_commander_airport%(String qual, Int ix) =
  if leg.%is_ac_employer_skn% then
     %_need_commander_airport%(qual,ix)
  else
    void_string;

table lifus_airport_tab(String qual, Int ix) =
    /* Returns an airport if a match is found. This indicates that the crew needs training for this airport.  */
    qual, ix ->  String %_need_commander_airport%;
    external %lifus_airport_table%;
    ac_qual, match_number -> airport;
    -, - -> void_string;
end

table lifus_airports =
  leg.%arrival_airport_name%, leg.%qual% -> export Bool %is_lifus_airport%;
  external "lifus_airport";
  "airport", "ac_qual" -> row_number;
  -, - -> false;
end

%need_commander_airport_wrap%(String ac_qual, int indx) =
    /* Sends call through to the wrapped function, and if an airport is returned, then check if it has been visited previously.. */
    let apt = %need_commander_airport%(ac_qual, indx);
    if not void(apt) then /* if an aiport was found that should be visited */
        %_crew_has_not_flown_to_apt_previously%(apt)
    else
        apt;  /* void_string */


%_crew_has_not_flown_to_apt_previously%(String apt) =
    /* returns the ac_qual if crew _not_ qualified, else void. Yes, rather counter-intuitive naming, I know.  ;-)  */
        if not %crew_has_qual_previous%(apt) then apt else void_string;

%crew_has_qual_previous%(String apt) =
    leg.%start_utc% <= default(%crew_qualification_validto%(apt), 01Jan1986);

table lifus_crew_qualification(String apt) =
    crew.%id%, "AIRPORT", apt, leg.%start_utc% -> AbsTime %crew_qualification_validto%;
    external "crew_qualification";
    crew, qual_typ, qual_subtype, (validfrom, validto)  -> validto;
    -, -, -, -                       -> void_abstime;
end

/*************************************************************************
    New Hire follow up
  *************************************************************************/

/*
    Crew is mentor for a crew that has a NEW HIRE FOLLOW UP 
    training attribute on the same leg. 
*/
export %crew_is_new_hire_mentor% =
    default(fundamental.%main_cat% = "F" and
    leg.%mentor_crewid_on_new_hire_follow_up% = crew.%id%, false);

/***************************************************************************
**  Web training before PC or OPC etc
****************************************************************************/
%last_wt_any_performed% =
  default(
    %wt_last_performed_any%(training.%wt_earliest_date%, leg.%start_hb%),
    1jan1986);

%first_valid_time_for_spring_training% =
    parameter 1jan2017
    remark "Start date for spring web training evaluation (year ignored)";

export %first_valid_time_for_spring_training_day% =
    format_time(%first_valid_time_for_spring_training%, "%03j");

%last_valid_time_for_spring_training% =
    parameter 30jun2018
    remark "End date for spring web training evaluation (year ignored)";

export %last_valid_time_for_spring_training_day% =
    format_time(%last_valid_time_for_spring_training%, "%03j");

%first_valid_time_for_autumn_training% =
    parameter 1jul2018
    remark "Start date for autumn web training evaluation (year ignored)";

export %first_valid_time_for_autumn_training_day% =
    format_time(%first_valid_time_for_autumn_training%, "%03j");

%last_valid_time_for_autumn_training% =
    parameter 31Dec2018
    remark "End date for autumn web training evaluation (year ignored)";

export %last_valid_time_for_autumn_training_day% =
    format_time(%last_valid_time_for_autumn_training%, "%03j");

export %missing_any_self_trg% =
  any(times(%self_trg_type_ix_max%), %self_trg_valid%(%times_index_0%)
     and %self_trg_needed%(%times_index_0%) > %self_trg_assigned%(%times_index_0%));

export %self_trg_missing%(Int trg_type_ix) =
  %self_trg_needed%(trg_type_ix) - %self_trg_assigned%(trg_type_ix);

table self_trg_tbl(Int trg_type_ix) =
  trg_type_ix ->
    export %self_trg_valid%, export %self_trg_needed%, export %self_trg_assigned%, export %self_trg_code%, export %self_trg_duration%;
    1  -> %web_trg_valid%, %web_trg_needed% ,  %web_trg_assigned%, %wt_code%, 10:00;
    -  -> false, 0, 0, "", 0:00;
end

export %self_trg_type_ix_max% = 1;

export %is_seasonal_web_training%(String code) =
  model_training.%is_seasonal_web_training%(code);

export %is_spring_web_training%(String code) =
  model_training.%is_spring_web_training%(code);

export %is_autumn_web_training%(String code) =
  model_training.%is_autumn_web_training%(code);

export %web_trg_valid% =
   %flight_crew%
   and not crew.%is_leased%(%pp_start%)
   and (%wt_airbus_qual% or %wt_boeing_qual%);

export %web_trg_needed% =
  if %pp_start%>= %wt_start_date% and %pp_start% < %wt_latest_date% then
    1
  else if %has_pc_opc_not_Z_in_interval%(%pp_start%, round_up_month(%pp_start% + 0:01)) then
    1
  else 0;

export %is_a_wt_leg%(String match_str) =
    not leg.%returned_to_ramp% and base_utils.%sp_sep_exact_match%(task.%code%,match_str);

export %is_any_wt_leg% =
    %is_a_wt_leg%(model_training.%wt_match_str%);

export %is_new_wt_code_leg% =
    system_db_parameters.%web_training_pc_22_valid%(leg.%start_UTC%) and
    %is_a_wt_leg%(model_training.%wt_newcodes_match_str%);

export %wt_code_full% = 
  if %is_new_wt_code_leg% then
    if crew.%has_ac_qln%(leg.%start_date%, "38") then
      concat("W", substr(leg.%code%,3,2),"B3")
    else if crew.%is_a2a3_qualified_at_date%(leg.%start_date%) then
      concat("W", substr(leg.%code%,3,2),"M3")
    else if crew.%is_a2a5_qualified_at_date%(leg.%start_date%) then
      concat("W", substr(leg.%code%,3,2),"M5")
    else if crew.%is_a3a5_qualified_at_date%(leg.%start_date%) then
      concat("W", substr(leg.%code%,3,2),"LH")
    else if crew.%has_ac_qln%(leg.%start_date%, "A2") then
      concat("W", substr(leg.%code%,3,2),"A2")
    else if crew.%has_ac_qln%(leg.%start_date%, "A3") then
      concat("W", substr(leg.%code%,3,2),"A3")
    else if crew.%has_ac_qln%(leg.%start_date%, "A5") then
      concat("W", substr(leg.%code%,3,2),"A5")
    else 
      leg.%code%
  else
    leg.%code%;

export %is_any_cbt_leg% =
    %is_a_wt_leg%(model_training.%cbt_match_str%);

%_wt_last_performed_in_roster_xx%(Abstime s, Abstime e, String match_str) =
    leg.%start_hb% >= nmax(s, %pp_start%) and leg.%start_hb% < e 
    and %is_a_wt_leg%(match_str);

export %wt_last_performed%(Abstime s, Abstime e, String code) =
  if %is_new_wt_code_leg% then
    default (
      %wt_last_performed_in_roster_xx%(s, e, code),
      model_training.%last_training_log%( crew.%id%, s, nmin(e, %pp_start%), "COURSE", %wt_code_full%)
    )
  else
    default (
      %wt_last_performed_in_roster_xx%(s, e, code),
      model_training.%last_training_log%( crew.%id%, s, nmin(e, %pp_start%), "COURSE", code)
    ); 

%wt_last_performed_in_roster_xx%(Abstime s, Abstime e, String match_str) =
    last (leg(chain), leg.%start_hb%)
    where (%_wt_last_performed_in_roster_xx%(s, e, match_str));

export %wt_last_performed_any%(Abstime s, Abstime e) =
   default (
       %wt_last_performed_in_roster_xx%(s, e, model_training.%wt_match_str%),
       max(times(model_training.%wt_ix_max%),
          model_training.%last_training_log%( crew.%id%, s, nmin(e, %pp_start%), "COURSE", model_training.%wt_code%(base_utils.%ti0%))
       )
   );

export %web_trg_assigned% =
  if void( %wt_last_performed_any%(%wt_earliest_date%, %wt_latest_date%)) then
    0
  else
    1;

export %wt_latest_date% =
    nmin(%wt_pc_latest_date%, %wt_opc_latest_date%);

export %wt_latest_date_for_qual% =
    nmin(%wt_pc_latest_date_for_qual%, %wt_opc_latest_date_for_qual%);


%wt_pc_latest_date% =
  default(
    round_up_month(leg.%pc_change_date%(%pp_start%, round_up_month(%pp_start% + 0:01))),
    round_up_month(%pc_expiry_date%)
  );

%wt_opc_latest_date% =
    round_up_month(%opc_expiry_date%);

%wt_pc_latest_date_for_qual% =
  default(
    round_up_month(leg.%pc_change_date%(%pp_start%, round_up_month(%pp_start% + 0:01))),
    round_up_month(%pc_qual_expiry_date%)
  );

%wt_opc_latest_date_for_qual% =
    round_up_month(%opc_qual_expiry_date%);

export %wt_earliest_date% =
  nmax(add_months(%wt_latest_date%, -3), %wt_course_publish_date%(%wt_latest_date%));

export %wt_earliest_date_for_qual% =
  nmax(add_months(%wt_latest_date_for_qual%, -3), %wt_course_publish_date%(%wt_latest_date_for_qual%));

export %wt_start_date% =
  nmax(add_months(%wt_latest_date%, -2), %wt_course_publish_date%(%wt_latest_date%));

%autumn_period_start% =
  let publish_date = format_time(%first_valid_time_for_autumn_training%, "%02d%b"),
      year = base_utils.%int2str%(base_utils.%year_nr%(round_down_year(%pp_start%)));
  base_utils.%abstime_parse%(concat(publish_date, year));

%wt_course_publish_date%(Abstime d) =
  if %pp_start% < %autumn_period_start% then
    %wt_spring_course_publish_date%(d)
  else
    %wt_autumn_course_publish_date%(d);

%wt_spring_course_publish_date%(Abstime d) =
  let jan1 = round_down_year(d),
      year = base_utils.%int2str%(base_utils.%year_nr%(jan1));
  base_utils.%abstime_parse%(concat(format_time(%first_valid_time_for_spring_training%, "%02d%b"), year));

%wt_autumn_course_publish_date%(Abstime d) =
  let jan1 = round_down_year(d),
      year = base_utils.%int2str%(base_utils.%year_nr%(jan1));
  base_utils.%abstime_parse%(concat(format_time(%first_valid_time_for_autumn_training%, "%02d%b"), year));

export %wt_airbus_qual% =
  default(
    crew.%has_airbus_qual_at_date%(%pc_expiry_date%),
    false);

export %wt_boeing_qual% =
  default(
    crew.%has_boeing_qual_at_date%(%pc_expiry_date%),
    false);

/*
Bool argument 'spring_season' indicates if web training is spring season (true) or autumn season (false).
*/
export %wt_code% =
  if %pp_start% < %autumn_period_start% then
    model_training.%wt_cod_by_type_and_season%(%wt_airbus_qual%, base_utils.%year_nr%(%pc_expiry_date%), true)
  else
    model_training.%wt_cod_by_type_and_season%(%wt_airbus_qual%, base_utils.%year_nr%(%pc_expiry_date%), false);


export %is_simulator_instructor% =  
            (%simulator_duty_code%= "IZ" or
             %simulator_duty_code% = "IZO" or
             %simulator_duty_code% = "IO" or
             %simulator_duty_code% = "I");
   
export %simulator_duty_code% =
    if leg.%is_sim_instr_supervis% then
        /* Supervisor on sim */
        "IZ"
    else if leg.%is_sim_supervis% then
        /* Instructor on sim, being supervised */
        "IS"
    else if leg.%is_sim_instr_ol% then
        "IO"
    else if leg.%is_sim_instr_supol% then
        "IZO"
    else if leg.%is_sim_ol% then
        "IP"
    else if leg.%is_sim_supol% then
        "ISP"
    else if leg.%is_sim_instr% then 
        "I"
    else if %assigned_as_assist% then
        "A"
    else if leg.%is_sim_lower% then
        "L"
    else if leg.%is_airport_sim% then
        leg.%airport_sim%
    else if leg.%is_sim_assist_landings% then
        "AR"
    else if leg.%is_sim_supernum% then 
        "U"
    else "";

export %PC_last_performed%(Abstime s, Abstime e) =
   default(%PC_last_performed_in_roster%(s, e),
           model_training.%last_training_log_type%(crew.%id%, s, e, "PC"));

%PC_last_performed_in_roster%(Abstime s, Abstime e) =
   last(leg(chain), leg.%start_hb%) where (%leg_is_pc% and leg.%start_hb% >= s and leg.%start_hb% <= e);

%PC_or_OPC_not_Z_last_performed_in_roster%(Abstime s, Abstime e) =
   last(leg(chain), leg.%start_hb%)
   where (%leg_is_pc_opc_not_Z% and leg.%start_hb% >= s and leg.%start_hb% <= e);

%PC_or_OPC_not_Z_last_performed_ctl%(Abstime istart, Abstime iend) =
  max(times(%ctl_rows%), %ctl_time_ival%(istart, iend, %times_index_0%))
  where ((%ctl_type_ival%(istart, iend, %times_index_0%) = "PC" or %ctl_type_ival%(istart, iend, %times_index_0%) = "OPC") and
          substr( %ctl_code_ival%(istart, iend, %times_index_0%),1,1) <> "Z");

export %PC_or_OPC_not_Z_last_performed%(Abstime s, Abstime e) =
   default(default(%PC_or_OPC_not_Z_last_performed_in_roster%(s, e),
           %PC_or_OPC_not_Z_last_performed_ctl%(s, e)), %abstimemin%);

export %count_ZFTT_LIFUS_from_prev_month_start_to_pp_start_in_ctl% =
   model_training.%count_training_log_type%(crew.%id%, round_down_month(pp.%start_month% - 24:00), %pp_start%, "ZFTT LIFUS");

export %FULL_TR_plus_OCC% = default(%course_name%(leg.%start_utc%) = "FULL TR plus OCC", false);
/* Cabin initial training */

export %roster_has_cabin_training_trip% =
    count(trip(roster)) where(%trip_has_cabin_training%) > 0;

/* Cached expressions */
%crew_is_cabin% = crew.%is_cabin%;
%crew_employment_date% = model_crew.%employment_date_by_id%(crew.%id%);
%leg_qual% = leg.%qual%;
%leg_is_long_haul% = leg.%is_long_haul%;
%leg_start_hb% = leg.%start_hb%;

export %trip_has_cabin_training% =
    count(leg(trip)) where(training.%flight_has_trainee%) > 0;

table num_assigned_trainees_on_leg =
    %cabin_training_leg_key% -> export Int %num_assigned_trainess_on_leg%;
    external %cabin_initial_training_table%;
    "leg_key" -> count(row_number);
end

table assigned_trainee_on_leg(Int ix) =
    %cabin_training_leg_key%, ix -> export String %trainee_crew_id%;
    external %cabin_initial_training_table%;
    "leg_key", match_number -> "crew_id";
    -, - -> void_string;
end

table num_assigned_training_flights_as_trainee(String crew_id) =
    crew_id -> export Int %num_assigned_training_flights_as_trainee%;
    external %cabin_initial_training_table%;
    "crew_id" -> count(row_number);
end

table leg_has_trainee(String trainee_crew_id) =
    trainee_crew_id, %cabin_training_leg_key% -> export Bool %leg_has_trainee%;
    external %cabin_initial_training_table%;
    "crew_id", "leg_key" -> row_number;
    -, - -> False;
end

table leg_has_any_trainee =
    %cabin_training_leg_key% -> export Bool %flight_has_trainee%;
    external %cabin_initial_training_table%;
    "leg_key" -> row_number;
    - -> False;
end

table supernum_leg_has_trainee_assigned(String trainee_crew_id) =
    trainee_crew_id, %cabin_training_leg_key%, "X SUPERNUM" -> export Bool %supernum_leg_has_trainee_assigned%;
    external %cabin_initial_training_table%;
    "crew_id", "leg_key", "training_sub_type" -> row_number;
    -, -, - -> False;
end

table crew_has_any_supernum_leg_assigned(String trainee_crew_id) =
    trainee_crew_id, "X SUPERNUM" -> export Bool %crew_has_any_supernum_leg_assigned%;
    external %cabin_initial_training_table%;
    "crew_id", "training_sub_type" -> row_number;
    -, - -> False;
end

%cabin_initial_training_table% =
    "allocated_initial_cabin_training.etab";

%cabin_training_leg_key% = concat(format_time(leg.%start_utc%, %abs_format_string%), leg.%flight_descriptor%, leg.%flight_suffix%);

%abs_format_string% = "%Y%02m%02d-%02H%02M";

%needs_initial_training_and_has_1_free_day% =
    (count(trip(roster))
    where(%trip_has_1_available_day_after_in_pp%) > 0
    or %has_no_trip_in_pp%)
    and %needs_initial_training_in_pp%;

%has_no_trip_in_pp% =
    count(trip(roster))
    where(trip.%in_pp%) = 0;

%trip_has_1_available_day_after_in_pp% =
    default(next(trip(roster), trip.%start_hb%) - trip.%end_date_hb% - 24:00 >= 24:00, true)
    and trip.%end_date_hb% + 24:00 < %pp_end%;

export %needs_initial_training_in_pp% =
    not (%roster_has_sufficient_nbr_locked_legs_in_x_supernum_period%
         or %has_completed_x_supernum_and_release_training%)
    and
    count(times(100))
    while (not void(training.%course_type_by_match%(%pp_start%, %pp_end%, times_index(0))))
    where(training.%course_type_by_match%(%pp_start%, %pp_end%, times_index(0)) = %INITIAL_STR%) > 0;

%roster_has_sufficient_nbr_locked_legs_in_x_supernum_period% =
    %num_locked_legs_in_x_supernum_period% >=%limit_x_supernum_release_training_activities%;

%num_locked_legs_in_x_supernum_period% =
    sum(trip(roster), %num_x_supernum_release_locked_legs%);

%has_completed_x_supernum_and_release_training% =
    %nr_flts_of_type%(%X_SUPERNUM_STR%, %pp_start%) + %nr_flts_of_type%(%RELEASE_STR%, %pp_start%) >= %limit_x_supernum_release_training_activities%;

export %INITIAL_STR% = "INITIAL";
export %X_SUPERNUM_STR% = "X SUPERNUM";
export %RELEASE_STR% = "RELEASE";

export %limit_x_supernum_release_training_activities% =
    %num_x_supernum_flight_needed%
    + %num_release_flight_needed%;

export %num_x_supernum_release_locked_legs% = count(leg(trip)) where(leg.%is_locked% and leg.%is_x_supernum_or_release%);

export %num_x_supernum_flight_needed% =
    sum(times(100), training.%course_flights_by_match%(%pp_start%, %pp_end%, times_index(0)))
    
    while (not void(training.%course_type_by_match%(%pp_start%, %pp_end%, times_index(0))))
    where(training.%course_type_by_match%(%pp_start%, %pp_end%, times_index(0)) = training.%INITIAL_STR%
          and training.%course_attribute_by_match%(%pp_start%, %pp_end%, times_index(0)) = training.%X_SUPERNUM_STR%);


export %num_release_flight_needed% =
    sum(times(100), training.%course_flights_by_match%(%pp_start%, %pp_end%, times_index(0)))
    
    while (not void(training.%course_type_by_match%(%pp_start%, %pp_end%, times_index(0))))
    where(training.%course_type_by_match%(%pp_start%, %pp_end%, times_index(0)) = training.%INITIAL_STR%
          and training.%course_attribute_by_match%(%pp_start%, %pp_end%, times_index(0)) = training.%RELEASE_STR%);

/* SKCMS-2680: Calculate the date when crew has completed 4 A5 sectors */    
export %consolidation_period_start_utc% = round_up(training.%latest_fam_flt_date%(%consolidation_ac_qual%) - 0:01, 23:59);

%first_a5_sector_date% = default(accumulators.%next_flown%("A350", %consolidation_period_start_utc%), %abstimemin%);
%second_a5_sector_date% = if (%first_a5_sector_date% <> %abstimemin%) then default(accumulators.%next_flown%("A350", %first_a5_sector_date% + 0:01), %abstimemin%) else %abstimemin%; 
%third_a5_sector_date% = if (%second_a5_sector_date% <> %abstimemin%) then default(accumulators.%next_flown%("A350", %second_a5_sector_date% + 0:01), %abstimemin%) else %abstimemin%;
%fourth_a5_sector_date% = if (%third_a5_sector_date% <> %abstimemin%) then default(accumulators.%next_flown%("A350", %third_a5_sector_date% + 0:01), %abstimemin%) else %abstimemin%;
      
 table date_of_four_or_less_consolidation_sector =
    
   (%fourth_a5_sector_date% <> %abstimemin% and  accumulators.%nr_active_sectors_in_period%(%consolidation_ac_qual%,%consolidation_period_start_utc%, round_up(%fourth_a5_sector_date% + 0:01, 24:00)) >= 4),        
   (%third_a5_sector_date% <> %abstimemin% and  accumulators.%nr_active_sectors_in_period%(%consolidation_ac_qual%,%consolidation_period_start_utc%, round_up(%third_a5_sector_date% + 0:01, 24:00)) >= 3),        
   (%second_a5_sector_date% <> %abstimemin% and  accumulators.%nr_active_sectors_in_period%(%consolidation_ac_qual%,%consolidation_period_start_utc%, round_up(%second_a5_sector_date% + 0:01, 24:00)) >= 2),         
   (%first_a5_sector_date% <> %abstimemin% and  accumulators.%nr_active_sectors_in_period%(%consolidation_ac_qual%,%consolidation_period_start_utc%, round_up(%first_a5_sector_date% + 0:01, 24:00)) >= 1)
        ->   %date_of_four_or_less_consolidation_sector%, %consolidation_sector_nr%;
 
    y, -, - ,-  -> %fourth_a5_sector_date%, 4;
    n, y, - ,-  -> %third_a5_sector_date%,  3;
    n, n, y ,-  -> %second_a5_sector_date%, 2;
    n, n, n ,y  -> %first_a5_sector_date%,  1;
    -, -, - ,-  -> %abstimemin%,            0;
 end

export %nr_all_sectors_till_four_a5_sectors_btw_fam_and_con_flt% =
       accumulators.%nr_active_sectors_in_period%("all",%CTR_date_before_fam_flt%,%date_of_four_or_less_consolidation_sector%) ;
       
export %nr_A5_sectors_till_four_a5_sectors_btw_fam_and_con_flt% =
       accumulators.%nr_active_sectors_in_period%("A5",%CTR_date_before_fam_flt%,%date_of_four_or_less_consolidation_sector%) ;
    
export %is_less_than_fourth_consolidation_sector% = %CTR_date_before_fam_flt% <> %abstimemin%  and ((%consolidation_sector_nr% < 4)  or 
                                                    (leg.%end_utc% <=  %date_of_four_or_less_consolidation_sector%)) ;

export %nr_sectors_not_A5_till_4_consolidation_sector%  =  
  if %consolidation_sector_nr% < 4 and leg.%qual% <> "A5"then
      1
  else     
      %nr_all_sectors_till_four_a5_sectors_btw_fam_and_con_flt% - %nr_A5_sectors_till_four_a5_sectors_btw_fam_and_con_flt%;
                                                                 
table training_need_count(Abstime et, String coursetype, string attribute) =
    crew.%id%, et, coursetype, attribute -> Int %training_need_count%;
    external %need_table%;
    crew, >=validto, course, attribute -> count(row_number);
end

table crew_training_need_in_past_by_name(string coursetype, string attribute, Abstime et, int match) =
  crew.%id%, coursetype, attribute , et, match ->
    export String %course_type_in_past_by_name%,
    export Abstime %course_start_in_past_by_name%,
    export Abstime %course_end_in_past_by_name%,
    export Int %course_index_in_past_by_name%,
    export String %course_attribute_in_past_by_name%,
    export String %_course_acqual_in_past_by_name%,
    Int %course_flights_in_past_by_name%,
    Int %course_days_in_past_by_name%,
    Abstime %course_completion_in_past_by_name%,
    String %course_descr_in_past_by_name%;
  external %need_table%;
  crew, course, attribute, >=validto,match_number ->
    course, validfrom, validto, part, attribute, acqual, flights, maxdays, completion, si;
  -, -, -, -,- ->
    void_string, void_abstime, void_abstime, void_int,
    void_string, void_string, void_int, void_int, void_abstime, void_string;
end

%last_CTR_date%(abstime end_date, string type, string attribute) =
    max(times(%training_need_count%( end_date, type, attribute)), 
      %course_start_in_past_by_name%(type, attribute, end_date, %times_index_0%));

%CTR_date_before_fam_flt% =  default(%last_CTR_date%(leg.%start_utc%,"CTR-A3A5","FAM FLT"), %abstimemin%);
/* end of file */

